{"version":3,"sources":["dummy/tests/adapters/application.jscs-test.js","dummy/tests/adapters/application.jshint.js","dummy/tests/app.jscs-test.js","dummy/tests/app.jshint.js","dummy/tests/components/css-picker.jscs-test.js","dummy/tests/components/css-picker.jshint.js","dummy/tests/components/number-input.jscs-test.js","dummy/tests/components/number-input.jshint.js","dummy/tests/components/settings-example.jscs-test.js","dummy/tests/components/settings-example.jshint.js","dummy/tests/controllers/application.jscs-test.js","dummy/tests/controllers/application.jshint.js","dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-field/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-field/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-file/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-file/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jshint.js","dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jshint.js","dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jscs-test.js","dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-localization-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-localization-list.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jshint.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jscs-test.js","dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jshint.js","dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jscs-test.js","dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jshint.js","dummy/tests/controllers/integration-examples/edit-form/validation.jscs-test.js","dummy/tests/controllers/integration-examples/edit-form/validation.jshint.js","dummy/tests/controllers/log-service-examples/settings-example.jscs-test.js","dummy/tests/controllers/log-service-examples/settings-example.jshint.js","dummy/tests/controllers/sitemap-node.jscs-test.js","dummy/tests/controllers/sitemap-node.jshint.js","dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint.js","dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jshint.js","dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jshint.js","dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test.js","dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint.js","dummy/tests/enums/ember-flexberry-dummy-gender.jscs-test.js","dummy/tests/enums/ember-flexberry-dummy-gender.jshint.js","dummy/tests/enums/ember-flexberry-dummy-vote-type.jscs-test.js","dummy/tests/enums/ember-flexberry-dummy-vote-type.jshint.js","dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jscs-test.js","dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jshint.js","dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jscs-test.js","dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jshint.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/destroy-app.jscs-test.js","dummy/tests/helpers/destroy-app.jshint.js","dummy/tests/helpers/ember-i18n/test-helpers.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-acceptance.jscs-test.js","dummy/tests/helpers/module-for-acceptance.jshint.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jscs-test.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jscs-test.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/helpers/to-safe-string.jscs-test.js","dummy/tests/helpers/to-safe-string.jshint.js","dummy/tests/helpers/to-string.jscs-test.js","dummy/tests/helpers/to-string.jshint.js","dummy/tests/helpers/validate-properties.js","dummy/tests/integration/components/flexberry-datetime-picker-test.js","dummy/tests/integration/components/flexberry-datetime-picker-test.jscs-test.js","dummy/tests/integration/components/flexberry-datetime-picker-test.jshint.js","dummy/tests/integration/components/flexberry-field-test.js","dummy/tests/integration/components/flexberry-field-test.jscs-test.js","dummy/tests/integration/components/flexberry-field-test.jshint.js","dummy/tests/integration/components/flexberry-groupedit-test.js","dummy/tests/integration/components/flexberry-groupedit-test.jscs-test.js","dummy/tests/integration/components/flexberry-groupedit-test.jshint.js","dummy/tests/integration/components/flexberry-simpledatetime-test.js","dummy/tests/integration/components/flexberry-simpledatetime-test.jscs-test.js","dummy/tests/integration/components/flexberry-simpledatetime-test.jshint.js","dummy/tests/integration/components/flexberry-validationmessage-test.js","dummy/tests/integration/components/flexberry-validationmessage-test.jscs-test.js","dummy/tests/integration/components/flexberry-validationmessage-test.jshint.js","dummy/tests/integration/components/flexberry-validationsummary-test.js","dummy/tests/integration/components/flexberry-validationsummary-test.jscs-test.js","dummy/tests/integration/components/flexberry-validationsummary-test.jshint.js","dummy/tests/integration/components/groupedit-toolbar-test.js","dummy/tests/integration/components/groupedit-toolbar-test.jscs-test.js","dummy/tests/integration/components/groupedit-toolbar-test.jshint.js","dummy/tests/integration/components/modal-dialog-test.js","dummy/tests/integration/components/modal-dialog-test.jscs-test.js","dummy/tests/integration/components/modal-dialog-test.jshint.js","dummy/tests/integration/components/object-list-view-cell-test.js","dummy/tests/integration/components/object-list-view-cell-test.jscs-test.js","dummy/tests/integration/components/object-list-view-cell-test.jshint.js","dummy/tests/integration/components/object-list-view-header-cell-test.js","dummy/tests/integration/components/object-list-view-header-cell-test.jscs-test.js","dummy/tests/integration/components/object-list-view-header-cell-test.jshint.js","dummy/tests/integration/components/object-list-view-test.js","dummy/tests/integration/components/object-list-view-test.jscs-test.js","dummy/tests/integration/components/object-list-view-test.jshint.js","dummy/tests/locales/en/translations.jscs-test.js","dummy/tests/locales/en/translations.jshint.js","dummy/tests/locales/ru/translations.jscs-test.js","dummy/tests/locales/ru/translations.jshint.js","dummy/tests/mixins/edit-form-controller-operations-indication.jscs-test.js","dummy/tests/mixins/edit-form-controller-operations-indication.jshint.js","dummy/tests/mixins/edit-form-route-operations-indication.jscs-test.js","dummy/tests/mixins/edit-form-route-operations-indication.jshint.js","dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-field/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-field/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-file/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-file/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jscs-test.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jshint.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jscs-test.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jshint.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jscs-test.js","dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jshint.js","dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jshint.js","dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jscs-test.js","dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jshint.js","dummy/tests/models/ember-flexberry-dummy-application-user.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-application-user.jshint.js","dummy/tests/models/ember-flexberry-dummy-comment-vote.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-comment-vote.jshint.js","dummy/tests/models/ember-flexberry-dummy-comment.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-comment.jshint.js","dummy/tests/models/ember-flexberry-dummy-localization.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-localization.jshint.js","dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jshint.js","dummy/tests/models/ember-flexberry-dummy-suggestion-file.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-suggestion-file.jshint.js","dummy/tests/models/ember-flexberry-dummy-suggestion-type.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-suggestion-type.jshint.js","dummy/tests/models/ember-flexberry-dummy-suggestion.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-suggestion.jshint.js","dummy/tests/models/ember-flexberry-dummy-vote.jscs-test.js","dummy/tests/models/ember-flexberry-dummy-vote.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jshint.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jscs-test.js","dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jshint.js","dummy/tests/models/integration-examples/edit-form/validation/base.jscs-test.js","dummy/tests/models/integration-examples/edit-form/validation/base.jshint.js","dummy/tests/models/integration-examples/edit-form/validation/master.jscs-test.js","dummy/tests/models/integration-examples/edit-form/validation/master.jshint.js","dummy/tests/resolver.jscs-test.js","dummy/tests/resolver.jshint.js","dummy/tests/router.jscs-test.js","dummy/tests/router.jshint.js","dummy/tests/routes/application.jscs-test.js","dummy/tests/routes/application.jshint.js","dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jshint.js","dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jshint.js","dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-field/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-field/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-file/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-file/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jshint.js","dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jshint.js","dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-menu/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-menu/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint.js","dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jshint.js","dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jscs-test.js","dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jshint.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-application-user-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-application-user-list.jshint.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-comment-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-localization-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-localization-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-localization-list.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jshint.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jscs-test.js","dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jshint.js","dummy/tests/routes/index.jscs-test.js","dummy/tests/routes/index.jshint.js","dummy/tests/routes/integration-examples/edit-form/readonly-mode.jscs-test.js","dummy/tests/routes/integration-examples/edit-form/readonly-mode.jshint.js","dummy/tests/routes/integration-examples/edit-form/validation.jscs-test.js","dummy/tests/routes/integration-examples/edit-form/validation.jshint.js","dummy/tests/routes/log-service-examples/settings-example.jscs-test.js","dummy/tests/routes/log-service-examples/settings-example.jshint.js","dummy/tests/serializers/application.jscs-test.js","dummy/tests/serializers/application.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-application-user.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-application-user.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-comment.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-comment.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-localization.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-localization.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-suggestion.jshint.js","dummy/tests/serializers/ember-flexberry-dummy-vote.jscs-test.js","dummy/tests/serializers/ember-flexberry-dummy-vote.jshint.js","dummy/tests/services/store.jscs-test.js","dummy/tests/services/store.jshint.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jscs-test.js","dummy/tests/test-helper.jshint.js","dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test.js","dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint.js","dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test.js","dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jshint.js","dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test.js","dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint.js","dummy/tests/transforms/ember-flexberry-dummy-gender.jscs-test.js","dummy/tests/transforms/ember-flexberry-dummy-gender.jshint.js","dummy/tests/transforms/ember-flexberry-dummy-vote-type.jscs-test.js","dummy/tests/transforms/ember-flexberry-dummy-vote-type.jshint.js","dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jscs-test.js","dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jshint.js","dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jscs-test.js","dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jshint.js","dummy/tests/unit/adapters/application-test.js","dummy/tests/unit/adapters/application-test.jscs-test.js","dummy/tests/unit/adapters/application-test.jshint.js","dummy/tests/unit/controllers/application-test.js","dummy/tests/unit/controllers/application-test.jscs-test.js","dummy/tests/unit/controllers/application-test.jshint.js","dummy/tests/unit/controllers/detail-edit-form-test.js","dummy/tests/unit/controllers/detail-edit-form-test.jscs-test.js","dummy/tests/unit/controllers/detail-edit-form-test.jshint.js","dummy/tests/unit/controllers/edit-form-test.js","dummy/tests/unit/controllers/edit-form-test.jscs-test.js","dummy/tests/unit/controllers/edit-form-test.jshint.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jscs-test.js","dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jshint.js","dummy/tests/unit/controllers/list-form-test.js","dummy/tests/unit/controllers/list-form-test.jscs-test.js","dummy/tests/unit/controllers/list-form-test.jshint.js","dummy/tests/unit/controllers/lookup-dialog-test.js","dummy/tests/unit/controllers/lookup-dialog-test.jscs-test.js","dummy/tests/unit/controllers/lookup-dialog-test.jshint.js","dummy/tests/unit/initializers/i18n-test.js","dummy/tests/unit/initializers/i18n-test.jscs-test.js","dummy/tests/unit/initializers/i18n-test.jshint.js","dummy/tests/unit/mixins/flexberry-file-controller-test.js","dummy/tests/unit/mixins/flexberry-file-controller-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-file-controller-test.jshint.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.jscs-test.js","dummy/tests/unit/mixins/flexberry-groupedit-route-test.jshint.js","dummy/tests/unit/mixins/modal-application-route-test.js","dummy/tests/unit/mixins/modal-application-route-test.jscs-test.js","dummy/tests/unit/mixins/modal-application-route-test.jshint.js","dummy/tests/unit/mixins/paginated-controller-test.js","dummy/tests/unit/mixins/paginated-controller-test.jscs-test.js","dummy/tests/unit/mixins/paginated-controller-test.jshint.js","dummy/tests/unit/mixins/paginated-route-test.js","dummy/tests/unit/mixins/paginated-route-test.jscs-test.js","dummy/tests/unit/mixins/paginated-route-test.jshint.js","dummy/tests/unit/mixins/reload-list-mixin-test.js","dummy/tests/unit/mixins/reload-list-mixin-test.jscs-test.js","dummy/tests/unit/mixins/reload-list-mixin-test.jshint.js","dummy/tests/unit/mixins/sortable-controller-test.js","dummy/tests/unit/mixins/sortable-controller-test.jscs-test.js","dummy/tests/unit/mixins/sortable-controller-test.jshint.js","dummy/tests/unit/mixins/sortable-route-test.js","dummy/tests/unit/mixins/sortable-route-test.jscs-test.js","dummy/tests/unit/mixins/sortable-route-test.jshint.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jscs-test.js","dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jshint.js","dummy/tests/unit/routes/application-test.js","dummy/tests/unit/routes/application-test.jscs-test.js","dummy/tests/unit/routes/application-test.jshint.js","dummy/tests/unit/routes/edit-form-new-test.js","dummy/tests/unit/routes/edit-form-new-test.jscs-test.js","dummy/tests/unit/routes/edit-form-new-test.jshint.js","dummy/tests/unit/routes/edit-form-test.js","dummy/tests/unit/routes/edit-form-test.jscs-test.js","dummy/tests/unit/routes/edit-form-test.jshint.js","dummy/tests/unit/routes/list-form-test.js","dummy/tests/unit/routes/list-form-test.jscs-test.js","dummy/tests/unit/routes/list-form-test.jshint.js","dummy/tests/unit/routes/projected-model-form-test.js","dummy/tests/unit/routes/projected-model-form-test.jscs-test.js","dummy/tests/unit/routes/projected-model-form-test.jshint.js","dummy/tests/unit/services/detail-interaction-test.js","dummy/tests/unit/services/detail-interaction-test.jscs-test.js","dummy/tests/unit/services/detail-interaction-test.jshint.js","dummy/tests/unit/services/objectlistview-events-test.js","dummy/tests/unit/services/objectlistview-events-test.jscs-test.js","dummy/tests/unit/services/objectlistview-events-test.jshint.js","dummy/tests/views/application.jscs-test.js","dummy/tests/views/application.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/adapters/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - adapters');\n  test('adapters/application.js should pass jscs', function () {\n    ok(true, 'adapters/application.js should pass jscs.');\n  });\n});","define('dummy/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass jshint.');\n  });\n});","define('dummy/tests/app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('app.js should pass jscs', function () {\n    ok(true, 'app.js should pass jscs.');\n  });\n});","define('dummy/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass jshint.');\n  });\n});","define('dummy/tests/components/css-picker.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components');\n  test('components/css-picker.js should pass jscs', function () {\n    ok(true, 'components/css-picker.js should pass jscs.');\n  });\n});","define('dummy/tests/components/css-picker.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/css-picker.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/css-picker.js should pass jshint.');\n  });\n});","define('dummy/tests/components/number-input.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components');\n  test('components/number-input.js should pass jscs', function () {\n    ok(true, 'components/number-input.js should pass jscs.');\n  });\n});","define('dummy/tests/components/number-input.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/number-input.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/number-input.js should pass jshint.');\n  });\n});","define('dummy/tests/components/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - components');\n  test('components/settings-example.js should pass jscs', function () {\n    ok(true, 'components/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/components/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - components/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/application.js should pass jscs', function () {\n    ok(true, 'controllers/application.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-checkbox');\n  test('controllers/components-examples/flexberry-checkbox/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-checkbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-checkbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-checkbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-checkbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-datepicker');\n  test('controllers/components-examples/flexberry-datepicker/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-datepicker/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-datepicker/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-datepicker/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-datepicker/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/conditional-render-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/conditional-render-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/conditional-render-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/empty-value-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/empty-value-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/empty-value-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/items-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/items-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/items-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/items-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/items-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-dropdown');\n  test('controllers/components-examples/flexberry-dropdown/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-dropdown/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-dropdown/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-dropdown/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-dropdown/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-field/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-field');\n  test('controllers/components-examples/flexberry-field/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-field/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-field/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-field/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-field/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-file/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-file');\n  test('controllers/components-examples/flexberry-file/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-file/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-file/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-file/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-file/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-groupedit');\n  test('controllers/components-examples/flexberry-groupedit/model-update-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-groupedit/model-update-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/model-update-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-groupedit/model-update-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/model-update-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-groupedit');\n  test('controllers/components-examples/flexberry-groupedit/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-groupedit/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-groupedit/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-groupedit/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-groupedit/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/customizing-window-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/customizing-window-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/customizing-window-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/dropdown-mode-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/dropdown-mode-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/limit-function-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-block-form-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/lookup-block-form-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/lookup-in-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/lookup-in-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/lookup-in-modal.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-lookup');\n  test('controllers/components-examples/flexberry-lookup/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-lookup/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-lookup/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-lookup/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-lookup/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-menu');\n  test('controllers/components-examples/flexberry-menu/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-menu/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-menu/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-menu/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-menu/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/configurate-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/configurate-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/configurate-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/custom-filter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/custom-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/custom-filter.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview/on-edit-form');\n  test('controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/on-edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/on-edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/on-edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-objectlistview');\n  test('controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-simpledatetime');\n  test('controllers/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-simpledatetime/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-simpledatetime/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-simpledatetime/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-textarea');\n  test('controllers/components-examples/flexberry-textarea/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-textarea/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textarea/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-textarea/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-textarea/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-textbox');\n  test('controllers/components-examples/flexberry-textbox/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-textbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-textbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-textbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-textbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/components-examples/flexberry-toggler');\n  test('controllers/components-examples/flexberry-toggler/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/components-examples/flexberry-toggler/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/components-examples/flexberry-toggler/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/components-examples/flexberry-toggler/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/components-examples/flexberry-toggler/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-application-user-edit');\n  test('controllers/ember-flexberry-dummy-application-user-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-application-user-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-application-user-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-application-user-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-application-user-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-application-user-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-application-user-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-application-user-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-application-user-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-application-user-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-application-user-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-comment-edit');\n  test('controllers/ember-flexberry-dummy-comment-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-comment-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-comment-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-comment-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-comment-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-comment-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-comment-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-comment-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-localization-edit');\n  test('controllers/ember-flexberry-dummy-localization-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-localization-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-localization-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-localization-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-localization-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-localization-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-localization-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-localization-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-localization-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-localization-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-localization-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-suggestion-edit');\n  test('controllers/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/ember-flexberry-dummy-suggestion-type-edit');\n  test('controllers/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-type-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-type-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/ember-flexberry-dummy-suggestion-type-list.js should pass jscs', function () {\n    ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-list.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/ember-flexberry-dummy-suggestion-type-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/ember-flexberry-dummy-suggestion-type-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/ember-flexberry-dummy-suggestion-type-list.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/integration-examples/edit-form');\n  test('controllers/integration-examples/edit-form/readonly-mode.js should pass jscs', function () {\n    ok(true, 'controllers/integration-examples/edit-form/readonly-mode.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/readonly-mode.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/integration-examples/edit-form/readonly-mode.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/integration-examples/edit-form/readonly-mode.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/validation.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/integration-examples/edit-form');\n  test('controllers/integration-examples/edit-form/validation.js should pass jscs', function () {\n    ok(true, 'controllers/integration-examples/edit-form/validation.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/integration-examples/edit-form/validation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/integration-examples/edit-form/validation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/integration-examples/edit-form/validation.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/log-service-examples/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers/log-service-examples');\n  test('controllers/log-service-examples/settings-example.js should pass jscs', function () {\n    ok(true, 'controllers/log-service-examples/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/log-service-examples/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/log-service-examples/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/log-service-examples/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/controllers/sitemap-node.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - controllers');\n  test('controllers/sitemap-node.js should pass jscs', function () {\n    ok(true, 'controllers/sitemap-node.js should pass jscs.');\n  });\n});","define('dummy/tests/controllers/sitemap-node.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - controllers/sitemap-node.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/sitemap-node.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-dropdown/conditional-render-example');\n  test('enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-dropdown/empty-value-example');\n  test('enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/empty-value-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-dropdown/settings-example');\n  test('enums/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-dropdown/settings-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-dropdown/settings-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/components-examples/flexberry-groupedit/shared');\n  test('enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs', function () {\n    ok(true, 'enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-gender.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums');\n  test('enums/ember-flexberry-dummy-gender.js should pass jscs', function () {\n    ok(true, 'enums/ember-flexberry-dummy-gender.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-gender.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/ember-flexberry-dummy-gender.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/ember-flexberry-dummy-gender.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-vote-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums');\n  test('enums/ember-flexberry-dummy-vote-type.js should pass jscs', function () {\n    ok(true, 'enums/ember-flexberry-dummy-vote-type.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/ember-flexberry-dummy-vote-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/ember-flexberry-dummy-vote-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/ember-flexberry-dummy-vote-type.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/integration-examples/edit-form/readonly-mode');\n  test('enums/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/readonly-mode/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/integration-examples/edit-form/readonly-mode/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/integration-examples/edit-form/readonly-mode/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - enums/integration-examples/edit-form/validation');\n  test('enums/integration-examples/edit-form/validation/enumeration.js should pass jscs', function () {\n    ok(true, 'enums/integration-examples/edit-form/validation/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/enums/integration-examples/edit-form/validation/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - enums/integration-examples/edit-form/validation/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'enums/integration-examples/edit-form/validation/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/destroy-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/destroy-app.js should pass jscs', function () {\n    ok(true, 'helpers/destroy-app.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/destroy-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/ember-i18n/test-helpers', ['exports', 'ember'], function (exports, _ember) {\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember['default'].Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember['default'].Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = (function () {\n    if (typeof QUnit !== 'undefined' && typeof ok === 'function') {\n      return function (element, key, text) {\n        ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  })();\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n      }\n    });\n  };\n});","define('dummy/tests/helpers/module-for-acceptance.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/module-for-acceptance.js should pass jscs', function () {\n    ok(true, 'helpers/module-for-acceptance.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _dummyResolver, _dummyConfigEnvironment) {\n\n  var resolver = _dummyResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/resolver.js should pass jscs', function () {\n    ok(true, 'helpers/resolver.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/start-app.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/start-app.js should pass jscs', function () {\n    ok(true, 'helpers/start-app.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/start-app.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/to-safe-string.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/to-safe-string.js should pass jscs', function () {\n    ok(true, 'helpers/to-safe-string.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/to-safe-string.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/to-safe-string.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-safe-string.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/to-string.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - helpers');\n  test('helpers/to-string.js should pass jscs', function () {\n    ok(true, 'helpers/to-string.js should pass jscs.');\n  });\n});","define('dummy/tests/helpers/to-string.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers/to-string.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/to-string.js should pass jshint.');\n  });\n});","define('dummy/tests/helpers/validate-properties', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n  exports.testValidPropertyValues = testValidPropertyValues;\n  exports.testInvalidPropertyValues = testInvalidPropertyValues;\n\n  var run = _ember['default'].run;\n\n  function validateValues(object, propertyName, values, isTestForValid) {\n    var promise = null;\n    var validatedValues = [];\n\n    values.forEach(function (value) {\n      function handleValidation(errors) {\n        var hasErrors = object.get('errors.' + propertyName + '.firstObject');\n        if (hasErrors && !isTestForValid || !hasErrors && isTestForValid) {\n          validatedValues.push(value);\n        }\n      }\n\n      run(object, 'set', propertyName, value);\n\n      var objectPromise = null;\n      run(function () {\n        objectPromise = object.validate().then(handleValidation, handleValidation);\n      });\n\n      // Since we are setting the values in a different run loop as we are validating them,\n      // we need to chain the promises so that they run sequentially. The wrong value will\n      // be validated if the promises execute concurrently\n      promise = promise ? promise.then(objectPromise) : objectPromise;\n    });\n\n    return promise.then(function () {\n      return validatedValues;\n    });\n  }\n\n  function testPropertyValues(propertyName, values, isTestForValid, context) {\n    var validOrInvalid = isTestForValid ? 'Valid' : 'Invalid';\n    var testName = validOrInvalid + ' ' + propertyName;\n\n    (0, _emberQunit.test)(testName, function (assert) {\n      var object = this.subject();\n\n      if (context && typeof context === 'function') {\n        context(object);\n      }\n\n      // Use QUnit.dump.parse so null and undefined can be printed as literal 'null' and\n      // 'undefined' strings in the assert message.\n      var valuesString = QUnit.dump.parse(values).replace(/\\n(\\s+)?/g, '').replace(/,/g, ', ');\n      var assertMessage = 'Expected ' + propertyName + ' to have ' + validOrInvalid.toLowerCase() + ' values: ' + valuesString;\n\n      return validateValues(object, propertyName, values, isTestForValid).then(function (validatedValues) {\n        assert.deepEqual(validatedValues, values, assertMessage);\n      });\n    });\n  }\n\n  function testValidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, true, context);\n  }\n\n  function testInvalidPropertyValues(propertyName, values, context) {\n    testPropertyValues(propertyName, values, false, context);\n  }\n});","define('dummy/tests/integration/components/flexberry-datetime-picker-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-datepicker', 'Integration | Component | Flexberry datepicker', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n')\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 24\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-datepicker', ['loc', [null, [1, 0], [1, 24]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-datepicker', [], [], 0, null, ['loc', [null, [2, 4], [4, 29]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    //Component does not support template block usage.\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/flexberry-datetime-picker-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-datetime-picker-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-datetime-picker-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-datetime-picker-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-datetime-picker-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-datetime-picker-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-field', 'Integration | Component | flexberry field', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 19\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-field', ['loc', [null, [1, 0], [1, 19]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'flexberry-field', [], [], 0, null, ['loc', [null, [2, 4], [4, 24]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-field-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-field-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-field-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-field-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-field-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test', ['exports', 'ember', 'ember-qunit', 'dummy/tests/helpers/start-app', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'ember-flexberry/services/user-settings'], function (exports, _ember, _emberQunit, _dummyTestsHelpersStartApp, _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator, _emberFlexberryServicesUserSettings) {\n\n  var App = undefined;\n\n  (0, _emberQunit.moduleForComponent)('flexberry-groupedit', 'Integration | Component | Flexberry groupedit', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n'),\n        userSettingsService: _ember['default'].inject.service('user-settings')\n      });\n\n      _emberFlexberryServicesUserSettings['default'].reopen({\n        isUserSettingsServiceEnabled: false\n      });\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.set('proj', _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator['default'].projections.get('AggregatorE'));\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 74\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-groupedit', [], ['modelProjection', ['subexpr', '@mut', [['get', 'proj', ['loc', [null, [1, 38], [1, 42]]]]], [], []], 'componentName', 'my-group-edit'], ['loc', [null, [1, 0], [1, 74]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(true);\n  });\n\n  (0, _emberQunit.test)('it properly rerenders', function (assert) {\n    var _this = this;\n\n    var store = App.__container__.lookup('service:store');\n\n    _ember['default'].run(function () {\n      var model = store.createRecord('components-examples/flexberry-groupedit/shared/aggregator');\n      var testComponentName = 'my-test-component-to-count-rerender';\n\n      _this.set('proj', _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator['default'].projections.get('AggregatorE'));\n      _this.set('model', model);\n      _this.set('componentName', testComponentName);\n      _this.set('searchForContentChange', true);\n      _this.render(_ember['default'].HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 7,\n                'column': 10\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('\\n        ');\n            dom.appendChild(el0, el1);\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'flexberry-groupedit', [], ['content', ['subexpr', '@mut', [['get', 'model.details', ['loc', [null, [3, 18], [3, 31]]]]], [], []], 'componentName', ['subexpr', '@mut', [['get', 'componentName', ['loc', [null, [4, 24], [4, 37]]]]], [], []], 'modelProjection', ['subexpr', '@mut', [['get', 'proj.attributes.details', ['loc', [null, [5, 26], [5, 49]]]]], [], []], 'searchForContentChange', ['subexpr', '@mut', [['get', 'searchForContentChange', ['loc', [null, [6, 33], [6, 55]]]]], [], []]], ['loc', [null, [2, 8], [7, 10]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n      assert.equal(_this.$('.object-list-view').find('tr').length, 2);\n\n      // Add record.\n      var detailModel = _this.get('model.details');\n      detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '1' }));\n      detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '2' }));\n\n      wait().then(function () {\n        assert.equal(_this.$('.object-list-view').find('tr').length, 3);\n\n        // Add record.\n        detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '3' }));\n        wait().then(function () {\n          assert.equal(_this.$('.object-list-view').find('tr').length, 4);\n\n          // Delete record.\n          _this.get('model.details').get('firstObject').deleteRecord();\n          wait().then(function () {\n            assert.equal(_this.$('.object-list-view').find('tr').length, 3);\n\n            // Disable search for changes flag and add record.\n            _this.set('searchForContentChange', false);\n            detailModel.addObject(store.createRecord('components-examples/flexberry-groupedit/shared/detail', { text: '4' }));\n            wait().then(function () {\n              assert.equal(_this.$('.object-list-view').find('tr').length, 3);\n            });\n          });\n        });\n      });\n    });\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-groupedit-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-groupedit-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-groupedit-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-groupedit-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-groupedit-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-simpledatetime', 'Integration | Component | flexberry simpledatetime', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 28\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-simpledatetime', ['loc', [null, [1, 0], [1, 28]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.ok(true);\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-simpledatetime-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-simpledatetime-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-simpledatetime-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-simpledatetime-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-simpledatetime-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test', ['exports', 'ember-qunit', 'ember-data'], function (exports, _emberQunit, _emberData) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-validationmessage', 'Integration | Component | flexberry validationmessage', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 52\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['error', 'error sample'], ['loc', [null, [1, 0], [1, 52]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'error sample');\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 31\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['content', 'flexberry-validationmessage', ['loc', [null, [1, 0], [1, 31]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('it color property should pass to classes', function (assert) {\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 49\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['color', 'someColor'], ['loc', [null, [1, 0], [1, 49]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$(':first-child').hasClass('someColor'), true);\n  });\n\n  (0, _emberQunit.test)('it pointing property should pass to classes', function (assert) {\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 56\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['pointing', 'left pointing'], ['loc', [null, [1, 0], [1, 56]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$(':first-child').hasClass('left pointing'), true);\n  });\n\n  (0, _emberQunit.test)('it should throw exception on unknown pointing property', function (assert) {\n    var _this = this;\n\n    assert.throws(function () {\n      _this.render(Ember.HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 64\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['inline', 'flexberry-validationmessage', [], ['pointing', 'some unknown pointing'], ['loc', [null, [1, 0], [1, 64]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    });\n  });\n\n  (0, _emberQunit.test)('it should change visibility based on array error value', function (assert) {\n\n    var errors = _emberData['default'].Errors.create();\n    this.set('error', errors.get('somefield'));\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 43\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['error', ['subexpr', '@mut', [['get', 'error', ['loc', [null, [1, 36], [1, 41]]]]], [], []]], ['loc', [null, [1, 0], [1, 43]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // FIXME: On 06.06.2016 this test started to lead to error.\n    // assert.equal(this.$(':first-child').is(':visible'), false);\n\n    errors.add('somefield', 'somefield is invalid');\n    this.set('error', errors.get('somefield'));\n\n    assert.equal(this.$(':first-child').is(':visible'), true);\n  });\n\n  (0, _emberQunit.test)('it should change visibility based on string error value', function (assert) {\n\n    this.set('error', '');\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 43\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationmessage', [], ['error', ['subexpr', '@mut', [['get', 'error', ['loc', [null, [1, 36], [1, 41]]]]], [], []]], ['loc', [null, [1, 0], [1, 43]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // FIXME: On 06.06.2016 this test started to lead to error.\n    // assert.equal(this.$(':first-child').is(':visible'), false);\n\n    this.set('error', 'alarma there is error here');\n\n    assert.equal(this.$(':first-child').is(':visible'), true);\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-validationmessage-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-validationmessage-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationmessage-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-validationmessage-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-validationmessage-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test', ['exports', 'ember-qunit', 'ember-validations/errors'], function (exports, _emberQunit, _emberValidationsErrors) {\n\n  (0, _emberQunit.moduleForComponent)('flexberry-validationsummary', 'Integration | Component | flexberry validationsummary', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('errors', _emberValidationsErrors['default'].create());\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n\n  (0, _emberQunit.test)('it render error message', function (assert) {\n    var errors = _emberValidationsErrors['default'].create();\n    errors.set('test', ['some validation error message']);\n    this.set('errors', errors);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'some validation error message');\n  });\n\n  (0, _emberQunit.test)('it color property should pass to classes', function (assert) {\n    this.set('errors', _emberValidationsErrors['default'].create());\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 63\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []], 'color', 'someColor'], ['loc', [null, [1, 0], [1, 63]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$(':first-child').hasClass('someColor'), true);\n  });\n\n  (0, _emberQunit.test)('it should throw exception on unset errors property', function (assert) {\n    var _this = this;\n\n    assert.throws(function () {\n      _this.render(Ember.HTMLBars.template((function () {\n        return {\n          meta: {\n            'fragmentReason': {\n              'name': 'missing-wrapper',\n              'problems': ['wrong-type']\n            },\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 1,\n                'column': 0\n              },\n              'end': {\n                'line': 1,\n                'column': 31\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createComment('');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n            var morphs = new Array(1);\n            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n            dom.insertBoundary(fragment, 0);\n            dom.insertBoundary(fragment, null);\n            return morphs;\n          },\n          statements: [['content', 'flexberry-validationsummary', ['loc', [null, [1, 0], [1, 31]]]]],\n          locals: [],\n          templates: []\n        };\n      })()));\n    });\n  });\n\n  (0, _emberQunit.test)('it should be invisible if no errors', function (assert) {\n    this.set('errors', _emberValidationsErrors['default'].create());\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    // FIXME: On 06.06.2016 this test started to lead to error.\n    // assert.equal(this.$(':first-child').is(':visible'), false);\n    assert.equal(false, false);\n  });\n\n  (0, _emberQunit.test)('it should be visible if errors presence', function (assert) {\n    var errors = _emberValidationsErrors['default'].create();\n    errors.set('testProperty', ['validation error message']);\n    this.set('errors', errors);\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 45\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'flexberry-validationsummary', [], ['errors', ['subexpr', '@mut', [['get', 'errors', ['loc', [null, [1, 37], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.equal(this.$(':first-child').is(':visible'), true);\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/flexberry-validationsummary-test.js should pass jscs', function () {\n    ok(true, 'integration/components/flexberry-validationsummary-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/flexberry-validationsummary-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/flexberry-validationsummary-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/flexberry-validationsummary-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('groupedit-toolbar', 'Integration | Component | groupedit toolbar', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    assert.expect(2);\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 48\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'groupedit-toolbar', [], ['componentName', 'someName'], ['loc', [null, [1, 0], [1, 48]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'groupedit-toolbar', [], ['componentName', 'someName'], 0, null, ['loc', [null, [2, 4], [4, 26]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    //Component does not support template block usage.\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/groupedit-toolbar-test.js should pass jscs', function () {\n    ok(true, 'integration/components/groupedit-toolbar-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/groupedit-toolbar-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/groupedit-toolbar-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/groupedit-toolbar-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test', ['exports', 'ember-qunit', 'ember-test-helpers/wait', 'ember'], function (exports, _emberQunit, _emberTestHelpersWait, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('modal-dialog', 'Integration | Component | modal dialog', {\n    integration: true,\n\n    setup: function setup() {\n      var _this = this;\n\n      // detachable need for jquery can do select child components\n      this.set('settings', {\n        detachable: false\n      });\n\n      this.set('created', false);\n      this.set('createdConsumer', function () {\n        _this.set('created', true);\n      });\n\n      _ember['default'].Test.registerWaiter(this, function () {\n        return _this.get('created');\n      });\n    },\n\n    teardown: function teardown() {\n      this.$().modal('hide dimmer');\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    var _this2 = this;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'modal-dialog', [], ['settings', ['subexpr', '@mut', [['get', 'settings', ['loc', [null, [2, 29], [2, 37]]]]], [], []], 'created', ['subexpr', '@mut', [['get', 'createdConsumer', ['loc', [null, [2, 46], [2, 61]]]]], [], []]], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal(_this2.$('.description').text().trim(), 'template block text');\n    });\n  });\n\n  (0, _emberQunit.test)('it should not show actions div if no buttons visible', function (assert) {\n    var _this3 = this;\n\n    this.render(_ember['default'].HTMLBars.template((function () {\n      var child0 = (function () {\n        return {\n          meta: {\n            'fragmentReason': false,\n            'revision': 'Ember@2.4.6',\n            'loc': {\n              'source': null,\n              'start': {\n                'line': 2,\n                'column': 4\n              },\n              'end': {\n                'line': 4,\n                'column': 4\n              }\n            }\n          },\n          isEmpty: false,\n          arity: 0,\n          cachedFragment: null,\n          hasRendered: false,\n          buildFragment: function buildFragment(dom) {\n            var el0 = dom.createDocumentFragment();\n            var el1 = dom.createTextNode('      template block text\\n');\n            dom.appendChild(el0, el1);\n            return el0;\n          },\n          buildRenderNodes: function buildRenderNodes() {\n            return [];\n          },\n          statements: [],\n          locals: [],\n          templates: []\n        };\n      })();\n\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 5,\n              'column': 2\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode('\\n');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode('  ');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);\n          return morphs;\n        },\n        statements: [['block', 'modal-dialog', [], ['settings', ['subexpr', '@mut', [['get', 'settings', ['loc', [null, [2, 29], [2, 37]]]]], [], []], 'created', ['subexpr', '@mut', [['get', 'createdConsumer', ['loc', [null, [2, 46], [2, 61]]]]], [], []], 'useOkButton', false, 'useCloseButton', false], 0, null, ['loc', [null, [2, 4], [4, 21]]]]],\n        locals: [],\n        templates: [child0]\n      };\n    })()));\n\n    return (0, _emberTestHelpersWait['default'])().then(function () {\n      assert.equal(_this3.$('.actions').length, 0);\n    });\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/modal-dialog-test.js should pass jscs', function () {\n    ok(true, 'integration/components/modal-dialog-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/modal-dialog-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/modal-dialog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/modal-dialog-test.js should pass jshint.');\n  });\n});","define(\"dummy/tests/integration/components/object-list-view-cell-test\", [\"exports\"], function (exports) {});\n// TODO: Broken due to miss get helper. Uncomment the test when project will use ember 2.x.\n// import { moduleForComponent, test } from 'ember-qunit';\n// import hbs from 'htmlbars-inline-precompile';\n\n// moduleForComponent('object-list-view-cell', 'Integration | Component | object list view cell', {\n//   integration: true\n// });\n\n// test('it renders', function(assert) {\n//   this.set('myColumn', { propName: 'myProperty' });\n//   this.set('myRecord', { myProperty: 'myValue' });\n//   this.render(hbs`{{object-list-view-cell column=myColumn record=myRecord}}`);\n\n//   assert.equal(this.$().text().trim(), 'myValue');\n// });","define('dummy/tests/integration/components/object-list-view-cell-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/object-list-view-cell-test.js should pass jscs', function () {\n    ok(true, 'integration/components/object-list-view-cell-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/object-list-view-cell-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/object-list-view-cell-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/object-list-view-cell-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/object-list-view-header-cell-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('object-list-view-header-cell', 'Integration | Component | object list view header cell', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('myColumn', { header: 'myHeader' });\n    this.render(Ember.HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 48\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'object-list-view-header-cell', [], ['column', ['subexpr', '@mut', [['get', 'myColumn', ['loc', [null, [1, 38], [1, 46]]]]], [], []]], ['loc', [null, [1, 0], [1, 48]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n\n    assert.equal(this.$().text().trim(), 'myHeader');\n  });\n});","define('dummy/tests/integration/components/object-list-view-header-cell-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/object-list-view-header-cell-test.js should pass jscs', function () {\n    ok(true, 'integration/components/object-list-view-header-cell-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/object-list-view-header-cell-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/object-list-view-header-cell-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/object-list-view-header-cell-test.js should pass jshint.');\n  });\n});","define('dummy/tests/integration/components/object-list-view-test', ['exports', 'ember', 'ember-qunit', 'dummy/models/components-examples/flexberry-groupedit/shared/aggregator', 'ember-flexberry/services/user-settings'], function (exports, _ember, _emberQunit, _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator, _emberFlexberryServicesUserSettings) {\n\n  (0, _emberQunit.moduleForComponent)('object-list-view', 'Integration | Component | object list view', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      _ember['default'].Component.reopen({\n        i18n: _ember['default'].inject.service('i18n'),\n        userSettingsService: _ember['default'].inject.service('user-settings')\n      });\n\n      _emberFlexberryServicesUserSettings['default'].reopen({\n        isUserSettingsServiceEnabled: false\n      });\n    }\n  });\n\n  (0, _emberQunit.test)('columns renders', function (assert) {\n    this.set('proj', _dummyModelsComponentsExamplesFlexberryGroupeditSharedAggregator['default'].projections.get('AggregatorE'));\n    this.render(_ember['default'].HTMLBars.template((function () {\n      return {\n        meta: {\n          'fragmentReason': {\n            'name': 'missing-wrapper',\n            'problems': ['wrong-type']\n          },\n          'revision': 'Ember@2.4.6',\n          'loc': {\n            'source': null,\n            'start': {\n              'line': 1,\n              'column': 0\n            },\n            'end': {\n              'line': 1,\n              'column': 68\n            }\n          }\n        },\n        isEmpty: false,\n        arity: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        buildFragment: function buildFragment(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createComment('');\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {\n          var morphs = new Array(1);\n          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);\n          dom.insertBoundary(fragment, 0);\n          dom.insertBoundary(fragment, null);\n          return morphs;\n        },\n        statements: [['inline', 'object-list-view', [], ['modelProjection', ['subexpr', '@mut', [['get', 'proj', ['loc', [null, [1, 35], [1, 39]]]]], [], []], 'componentName', 'someName'], ['loc', [null, [1, 0], [1, 68]]]]],\n        locals: [],\n        templates: []\n      };\n    })()));\n    assert.notEqual(this.$('thead tr th').length, 0);\n  });\n});","define('dummy/tests/integration/components/object-list-view-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - integration/components');\n  test('integration/components/object-list-view-test.js should pass jscs', function () {\n    ok(true, 'integration/components/object-list-view-test.js should pass jscs.');\n  });\n});","define('dummy/tests/integration/components/object-list-view-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - integration/components/object-list-view-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/object-list-view-test.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/en/translations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/en');\n  test('locales/en/translations.js should pass jscs', function () {\n    ok(true, 'locales/en/translations.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/en/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/en/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/en/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/locales/ru/translations.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - locales/ru');\n  test('locales/ru/translations.js should pass jscs', function () {\n    ok(true, 'locales/ru/translations.js should pass jscs.');\n  });\n});","define('dummy/tests/locales/ru/translations.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - locales/ru/translations.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'locales/ru/translations.js should pass jshint.');\n  });\n});","define('dummy/tests/mixins/edit-form-controller-operations-indication.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - mixins');\n  test('mixins/edit-form-controller-operations-indication.js should pass jscs', function () {\n    ok(true, 'mixins/edit-form-controller-operations-indication.js should pass jscs.');\n  });\n});","define('dummy/tests/mixins/edit-form-controller-operations-indication.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins/edit-form-controller-operations-indication.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/edit-form-controller-operations-indication.js should pass jshint.');\n  });\n});","define('dummy/tests/mixins/edit-form-route-operations-indication.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - mixins');\n  test('mixins/edit-form-route-operations-indication.js should pass jscs', function () {\n    ok(true, 'mixins/edit-form-route-operations-indication.js should pass jscs.');\n  });\n});","define('dummy/tests/mixins/edit-form-route-operations-indication.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - mixins/edit-form-route-operations-indication.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'mixins/edit-form-route-operations-indication.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-checkbox/settings-example');\n  test('models/components-examples/flexberry-checkbox/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-checkbox/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-checkbox/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-checkbox/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-checkbox/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-datepicker/settings-example');\n  test('models/components-examples/flexberry-datepicker/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-datepicker/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-datepicker/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-datepicker/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-datepicker/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-dropdown/conditional-render-example');\n  test('models/components-examples/flexberry-dropdown/conditional-render-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-dropdown/conditional-render-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/conditional-render-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-dropdown/conditional-render-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/conditional-render-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-dropdown/empty-value-example');\n  test('models/components-examples/flexberry-dropdown/empty-value-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-dropdown/empty-value-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/empty-value-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-dropdown/empty-value-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/empty-value-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-dropdown/settings-example');\n  test('models/components-examples/flexberry-dropdown/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-dropdown/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-dropdown/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-dropdown/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-dropdown/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-field/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-field/settings-example');\n  test('models/components-examples/flexberry-field/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-field/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-field/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-field/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-field/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-file/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-file/settings-example');\n  test('models/components-examples/flexberry-file/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-file/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-file/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-file/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-file/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-groupedit/shared');\n  test('models/components-examples/flexberry-groupedit/shared/aggregator.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-groupedit/shared/aggregator.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/aggregator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-groupedit/shared/aggregator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/aggregator.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-groupedit/shared');\n  test('models/components-examples/flexberry-groupedit/shared/detail.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-groupedit/shared/detail.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-groupedit/shared/detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/detail.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-groupedit/shared');\n  test('models/components-examples/flexberry-groupedit/shared/master.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-groupedit/shared/master.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-groupedit/shared/master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-groupedit/shared/master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-groupedit/shared/master.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-simpledatetime/settings-example');\n  test('models/components-examples/flexberry-simpledatetime/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-simpledatetime/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-simpledatetime/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-simpledatetime/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-simpledatetime/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-textarea/settings-example');\n  test('models/components-examples/flexberry-textarea/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-textarea/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textarea/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-textarea/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-textarea/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/components-examples/flexberry-textbox/settings-example');\n  test('models/components-examples/flexberry-textbox/settings-example/base.js should pass jscs', function () {\n    ok(true, 'models/components-examples/flexberry-textbox/settings-example/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/components-examples/flexberry-textbox/settings-example/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/components-examples/flexberry-textbox/settings-example/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/components-examples/flexberry-textbox/settings-example/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-application-user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-application-user.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-application-user.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-application-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-application-user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-application-user.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-comment-vote.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-comment-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-comment-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-comment-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-comment.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-comment.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-comment.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-comment.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-comment.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localization.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-localization.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-localization.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localization.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-localization.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-localization.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-localized-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-localized-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-localized-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-file.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-suggestion-file.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-suggestion-file.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-file.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-suggestion-file.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion-file.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-suggestion-type.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-suggestion.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-suggestion.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-suggestion.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-suggestion.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-suggestion.js should pass jshint.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models');\n  test('models/ember-flexberry-dummy-vote.js should pass jscs', function () {\n    ok(true, 'models/ember-flexberry-dummy-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/models/ember-flexberry-dummy-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/ember-flexberry-dummy-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/ember-flexberry-dummy-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/aggregator.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/aggregator.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/aggregator.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/aggregator.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/aggregator.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/detail.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/detail.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/detail.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/detail.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/detail.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/master-dropdown.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/master-dropdown.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master-dropdown.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/master-dropdown.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/master-dropdown.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/readonly-mode');\n  test('models/integration-examples/edit-form/readonly-mode/master.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/readonly-mode/master.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/readonly-mode/master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/readonly-mode/master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/readonly-mode/master.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/base.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/validation');\n  test('models/integration-examples/edit-form/validation/base.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/validation/base.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/base.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/validation/base.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/base.js should pass jshint.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/master.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - models/integration-examples/edit-form/validation');\n  test('models/integration-examples/edit-form/validation/master.js should pass jscs', function () {\n    ok(true, 'models/integration-examples/edit-form/validation/master.js should pass jscs.');\n  });\n});","define('dummy/tests/models/integration-examples/edit-form/validation/master.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models/integration-examples/edit-form/validation/master.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/integration-examples/edit-form/validation/master.js should pass jshint.');\n  });\n});","define('dummy/tests/resolver.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('resolver.js should pass jscs', function () {\n    ok(true, 'resolver.js should pass jscs.');\n  });\n});","define('dummy/tests/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - resolver.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass jshint.');\n  });\n});","define('dummy/tests/router.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('router.js should pass jscs', function () {\n    ok(true, 'router.js should pass jscs.');\n  });\n});","define('dummy/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - router.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/application.js should pass jscs', function () {\n    ok(true, 'routes/application.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-checkbox');\n  test('routes/components-examples/flexberry-checkbox/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-checkbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-checkbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-checkbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-checkbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-datepicker');\n  test('routes/components-examples/flexberry-datepicker/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-datepicker/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-datepicker/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-datepicker/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-datepicker/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-dropdown');\n  test('routes/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-dropdown/conditional-render-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/conditional-render-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-dropdown/conditional-render-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/conditional-render-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-dropdown');\n  test('routes/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-dropdown/empty-value-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/empty-value-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-dropdown/empty-value-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/empty-value-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-dropdown');\n  test('routes/components-examples/flexberry-dropdown/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-dropdown/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-dropdown/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-dropdown/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-dropdown/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-field/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-field');\n  test('routes/components-examples/flexberry-field/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-field/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-field/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-field/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-field/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-file/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-file');\n  test('routes/components-examples/flexberry-file/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-file/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-file/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-file/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-file/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-groupedit');\n  test('routes/components-examples/flexberry-groupedit/model-update-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-groupedit/model-update-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/model-update-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-groupedit/model-update-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/model-update-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-groupedit');\n  test('routes/components-examples/flexberry-groupedit/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-groupedit/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-groupedit/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-groupedit/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-groupedit/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/customizing-window-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/customizing-window-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/customizing-window-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/customizing-window-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/dropdown-mode-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/dropdown-mode-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/dropdown-mode-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/limit-function-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-block-form-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/lookup-block-form-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/lookup-block-form-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/lookup-in-modal.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/lookup-in-modal.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/lookup-in-modal.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/lookup-in-modal.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-lookup');\n  test('routes/components-examples/flexberry-lookup/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-lookup/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-lookup/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-lookup/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-lookup/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-menu/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-menu');\n  test('routes/components-examples/flexberry-menu/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-menu/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-menu/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-menu/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-menu/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/configurate-rows.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/configurate-rows.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/configurate-rows.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/configurate-rows.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/custom-filter.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/custom-filter.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/custom-filter.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/custom-filter.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/limit-function-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/limit-function-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/limit-function-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/limit-function-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview/on-edit-form');\n  test('routes/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/on-edit-form/user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form/user.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/on-edit-form.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/on-edit-form.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/on-edit-form.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-objectlistview');\n  test('routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-simpledatetime');\n  test('routes/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-simpledatetime/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-simpledatetime/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-simpledatetime/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-simpledatetime/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-textarea');\n  test('routes/components-examples/flexberry-textarea/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-textarea/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textarea/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-textarea/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-textarea/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-textbox');\n  test('routes/components-examples/flexberry-textbox/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-textbox/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-textbox/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-textbox/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-textbox/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/components-examples/flexberry-toggler');\n  test('routes/components-examples/flexberry-toggler/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/components-examples/flexberry-toggler/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/components-examples/flexberry-toggler/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/components-examples/flexberry-toggler/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/components-examples/flexberry-toggler/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-application-user-edit');\n  test('routes/ember-flexberry-dummy-application-user-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-application-user-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-application-user-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-application-user-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-application-user-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-application-user-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-application-user-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-application-user-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-application-user-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-application-user-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-application-user-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-comment-edit');\n  test('routes/ember-flexberry-dummy-comment-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-comment-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-comment-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-comment-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-comment-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-comment-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-comment-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-comment-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-localization-edit');\n  test('routes/ember-flexberry-dummy-localization-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-localization-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-localization-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-localization-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-localization-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-localization-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-localization-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-localization-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-localization-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-localization-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-localization-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-suggestion-edit');\n  test('routes/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/ember-flexberry-dummy-suggestion-type-edit');\n  test('routes/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit/new.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-type-edit/new.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit/new.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-edit.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-type-edit.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-edit.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/ember-flexberry-dummy-suggestion-type-list.js should pass jscs', function () {\n    ok(true, 'routes/ember-flexberry-dummy-suggestion-type-list.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/ember-flexberry-dummy-suggestion-type-list.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/ember-flexberry-dummy-suggestion-type-list.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/ember-flexberry-dummy-suggestion-type-list.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/index.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes');\n  test('routes/index.js should pass jscs', function () {\n    ok(true, 'routes/index.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/index.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/index.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/readonly-mode.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/integration-examples/edit-form');\n  test('routes/integration-examples/edit-form/readonly-mode.js should pass jscs', function () {\n    ok(true, 'routes/integration-examples/edit-form/readonly-mode.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/readonly-mode.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/integration-examples/edit-form/readonly-mode.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/integration-examples/edit-form/readonly-mode.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/validation.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/integration-examples/edit-form');\n  test('routes/integration-examples/edit-form/validation.js should pass jscs', function () {\n    ok(true, 'routes/integration-examples/edit-form/validation.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/integration-examples/edit-form/validation.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/integration-examples/edit-form/validation.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/integration-examples/edit-form/validation.js should pass jshint.');\n  });\n});","define('dummy/tests/routes/log-service-examples/settings-example.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - routes/log-service-examples');\n  test('routes/log-service-examples/settings-example.js should pass jscs', function () {\n    ok(true, 'routes/log-service-examples/settings-example.js should pass jscs.');\n  });\n});","define('dummy/tests/routes/log-service-examples/settings-example.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - routes/log-service-examples/settings-example.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/log-service-examples/settings-example.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/application.js should pass jscs', function () {\n    ok(true, 'serializers/application.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-application-user.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-application-user.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-application-user.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-application-user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-application-user.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-application-user.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-comment-vote.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-comment-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-comment-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-comment-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-comment.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-comment.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-comment.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-comment.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-comment.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localization.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-localization.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-localization.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localization.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-localization.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-localization.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-localized-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-localized-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-localized-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-localized-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-suggestion-file.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-suggestion-file.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-file.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-suggestion-file.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion-file.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-suggestion-type.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-suggestion-type.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-suggestion-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion-type.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-suggestion.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-suggestion.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-suggestion.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-suggestion.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-suggestion.js should pass jshint.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-vote.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - serializers');\n  test('serializers/ember-flexberry-dummy-vote.js should pass jscs', function () {\n    ok(true, 'serializers/ember-flexberry-dummy-vote.js should pass jscs.');\n  });\n});","define('dummy/tests/serializers/ember-flexberry-dummy-vote.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - serializers/ember-flexberry-dummy-vote.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/ember-flexberry-dummy-vote.js should pass jshint.');\n  });\n});","define('dummy/tests/services/store.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - services');\n  test('services/store.js should pass jscs', function () {\n    ok(true, 'services/store.js should pass jscs.');\n  });\n});","define('dummy/tests/services/store.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - services/store.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/store.js should pass jshint.');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/test-helper.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - .');\n  test('test-helper.js should pass jscs', function () {\n    ok(true, 'test-helper.js should pass jscs.');\n  });\n});","define('dummy/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - test-helper.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/components-examples/flexberry-dropdown/conditional-render-example');\n  test('transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/components-examples/flexberry-dropdown/settings-example');\n  test('transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-dropdown/settings-example/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-dropdown/settings-example/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/components-examples/flexberry-groupedit/shared');\n  test('transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/components-examples/flexberry-groupedit/shared/detail-enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-gender.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms');\n  test('transforms/ember-flexberry-dummy-gender.js should pass jscs', function () {\n    ok(true, 'transforms/ember-flexberry-dummy-gender.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-gender.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/ember-flexberry-dummy-gender.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/ember-flexberry-dummy-gender.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-vote-type.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms');\n  test('transforms/ember-flexberry-dummy-vote-type.js should pass jscs', function () {\n    ok(true, 'transforms/ember-flexberry-dummy-vote-type.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/ember-flexberry-dummy-vote-type.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/ember-flexberry-dummy-vote-type.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/ember-flexberry-dummy-vote-type.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/integration-examples/edit-form/readonly-mode');\n  test('transforms/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/integration-examples/edit-form/readonly-mode/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/readonly-mode/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/integration-examples/edit-form/readonly-mode/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/integration-examples/edit-form/readonly-mode/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - transforms/integration-examples/edit-form/validation');\n  test('transforms/integration-examples/edit-form/validation/enumeration.js should pass jscs', function () {\n    ok(true, 'transforms/integration-examples/edit-form/validation/enumeration.js should pass jscs.');\n  });\n});","define('dummy/tests/transforms/integration-examples/edit-form/validation/enumeration.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - transforms/integration-examples/edit-form/validation/enumeration.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/integration-examples/edit-form/validation/enumeration.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'ApplicationAdapter', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('dummy/tests/unit/adapters/application-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/adapters');\n  test('unit/adapters/application-test.js should pass jscs', function () {\n    ok(true, 'unit/adapters/application-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/application-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/application-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/application-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:detail-edit-form', 'Unit | Controller | detail edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/detail-edit-form-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/detail-edit-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/detail-edit-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/detail-edit-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/detail-edit-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test', ['exports', 'ember', 'ember-data', 'ember-qunit', 'dummy/tests/helpers/start-app'], function (exports, _ember, _emberData, _emberQunit, _dummyTestsHelpersStartApp) {\n\n  var App;\n\n  (0, _emberQunit.moduleFor)('controller:edit-form', 'Unit | Controller | edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n    beforeEach: function beforeEach() {\n      App = (0, _dummyTestsHelpersStartApp['default'])();\n    },\n    afterEach: function afterEach() {\n      _ember['default'].run(App, 'destroy');\n      _ember['default'].$.mockjax.clear();\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  (0, _emberQunit.test)('save hasMany relationships recursively', function (assert) {\n    var savedRecords = [];\n\n    var TestModel = _emberData['default'].Model.extend({\n      save: function save() {\n        var _this = this;\n\n        return new _ember['default'].RSVP.Promise(function (resolve) {\n          savedRecords.push(_this);\n          resolve(_this);\n        });\n      }\n    });\n\n    var Model1 = TestModel.extend({\n      hasManyModel2: _emberData['default'].hasMany('model2')\n    });\n\n    var Model2 = TestModel.extend({\n      hasManyModel3: _emberData['default'].hasMany('model3')\n    });\n\n    var Model3 = TestModel.extend({});\n\n    App.register('model:model1', Model1);\n    App.register('model:model2', Model2);\n    App.register('model:model3', Model3);\n\n    var controller = this.subject();\n    var store = App.__container__.lookup('service:store');\n\n    _ember['default'].run(function () {\n      var record = store.createRecord('model1');\n      var model21 = store.createRecord('model2');\n      var model22 = store.createRecord('model2');\n      record.get('hasManyModel2').pushObjects([model21, model22]);\n      var model31 = store.createRecord('model3');\n      model22.get('hasManyModel3').pushObjects([model31]);\n\n      controller.set('model', record);\n      controller._saveHasManyRelationships(record).then(function () {\n        assert.equal(savedRecords[0], model21);\n        assert.equal(savedRecords[1], model22);\n        assert.equal(savedRecords[2], model31);\n      });\n\n      wait();\n    });\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/edit-form-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/edit-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/edit-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/edit-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/edit-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:flexberry-file-view-dialog', 'Unit | Controller | edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/flexberry-file-view-dialog-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/flexberry-file-view-dialog-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/flexberry-file-view-dialog-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/flexberry-file-view-dialog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/flexberry-file-view-dialog-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/list-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:list-form', 'Unit | Controller | list form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('dummy/tests/unit/controllers/list-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/list-form-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/list-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/list-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/list-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/list-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test', ['exports', 'ember-qunit', 'ember', 'sinon'], function (exports, _emberQunit, _ember, _sinon) {\n\n  (0, _emberQunit.moduleFor)('controller:lookup-dialog', 'Unit | Controller | lookup dialog', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  (0, _emberQunit.test)('it shold set selected record to saveTo.propName of saveTo.model', function (assert) {\n    var model = _ember['default'].Object.extend({ makeDirty: function makeDirty() {} }).create();\n    var saveTo = {\n      model: model,\n      propName: 'testProperty'\n    };\n\n    var controller = this.subject();\n    controller.set('saveTo', saveTo);\n\n    _sinon['default'].stub(model, 'makeDirty');\n    _sinon['default'].stub(controller, '_closeModalDialog');\n    var master = _ember['default'].Object.create();\n\n    controller.send('objectListViewRowClick', master);\n\n    assert.equal(model.get('testProperty'), master);\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/controllers');\n  test('unit/controllers/lookup-dialog-test.js should pass jscs', function () {\n    ok(true, 'unit/controllers/lookup-dialog-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/controllers/lookup-dialog-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/controllers/lookup-dialog-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/lookup-dialog-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/initializers/i18n-test', ['exports', 'ember', 'dummy/initializers/i18n', 'qunit'], function (exports, _ember, _dummyInitializersI18n, _qunit) {\n\n  var application = undefined;\n\n  (0, _qunit.module)('Unit | Initializer | i18n', {\n    beforeEach: function beforeEach() {\n      _ember['default'].run(function () {\n        application = _ember['default'].Application.create();\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    _dummyInitializersI18n['default'].initialize(application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('dummy/tests/unit/initializers/i18n-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/initializers');\n  test('unit/initializers/i18n-test.js should pass jscs', function () {\n    ok(true, 'unit/initializers/i18n-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/initializers/i18n-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/initializers/i18n-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/i18n-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test', ['exports', 'ember', 'ember-flexberry/mixins/flexberry-file-controller', 'qunit'], function (exports, _ember, _emberFlexberryMixinsFlexberryFileController, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry file controller');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryFileControllerObject = _ember['default'].Object.extend(_emberFlexberryMixinsFlexberryFileController['default']);\n    var subject = FlexberryFileControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-file-controller-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-file-controller-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-file-controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-file-controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-file-controller-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test', ['exports', 'ember', 'ember-flexberry/mixins/flexberry-groupedit-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsFlexberryGroupeditRoute, _qunit) {\n\n  (0, _qunit.module)('Unit | Mixin | flexberry groupedit route');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var FlexberryGroupeditRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsFlexberryGroupeditRoute['default']);\n    var subject = FlexberryGroupeditRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/flexberry-groupedit-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/flexberry-groupedit-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/flexberry-groupedit-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/flexberry-groupedit-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/flexberry-groupedit-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test', ['exports', 'ember', 'ember-flexberry/mixins/modal-application-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsModalApplicationRoute, _qunit) {\n\n  (0, _qunit.module)('ModalApplicationRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var ModalApplicationRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsModalApplicationRoute['default']);\n    var subject = ModalApplicationRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/modal-application-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/modal-application-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/modal-application-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/modal-application-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/modal-application-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test', ['exports', 'ember', 'ember-flexberry/mixins/paginated-controller', 'qunit'], function (exports, _ember, _emberFlexberryMixinsPaginatedController, _qunit) {\n\n  (0, _qunit.module)('PaginatedControllerMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var PaginatedControllerObject = _ember['default'].Object.extend(_emberFlexberryMixinsPaginatedController['default']);\n    var subject = PaginatedControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/paginated-controller-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/paginated-controller-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/paginated-controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/paginated-controller-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test', ['exports', 'ember', 'ember-flexberry/mixins/paginated-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsPaginatedRoute, _qunit) {\n\n  (0, _qunit.module)('PaginatedRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var PaginatedRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsPaginatedRoute['default']);\n    var subject = PaginatedRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/paginated-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/paginated-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/paginated-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/paginated-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/paginated-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test', ['exports', 'ember', 'ember-flexberry/mixins/reload-list-mixin', 'qunit', 'dummy/tests/helpers/start-app', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryMixinsReloadListMixin, _qunit, _dummyTestsHelpersStartApp, _emberFlexberryModelsBase, _emberFlexberryData) {\n  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;\n  var StringPredicate = _emberFlexberryData.Query.StringPredicate;\n  var ComplexPredicate = _emberFlexberryData.Query.ComplexPredicate;\n\n  (0, _qunit.module)('Unit | Mixin | reload list mixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var ReloadListMixinObject = _ember['default'].Object.extend(_emberFlexberryMixinsReloadListMixin['default']);\n    var subject = ReloadListMixinObject.create();\n    assert.ok(subject);\n  });\n\n  (0, _qunit.test)('it properly generates simple filter predicate', function (assert) {\n    var Model = _emberFlexberryModelsBase['default'].extend({\n      firstName: DS.attr('string')\n    });\n\n    Model.defineProjection('EmployeeE', 'employeeTest', {\n      firstName: _emberFlexberryData.Projection.attr()\n    });\n\n    var modelSerializer = _emberFlexberryData.Serializer.Odata.extend({});\n    var projection = _ember['default'].get(Model, 'projections').EmployeeE;\n\n    var app = (0, _dummyTestsHelpersStartApp['default'])();\n\n    app.register('model:employeeTest', Model);\n    app.register('serializer:employeeTest', modelSerializer);\n    var store = app.__container__.lookup('service:store');\n\n    var ReloadListMixinObject = _ember['default'].Object.extend(_emberFlexberryMixinsReloadListMixin['default']);\n    var objectInstance = ReloadListMixinObject.create();\n    objectInstance.store = store;\n\n    var result = objectInstance._getFilterPredicate(projection, { filter: 'test' });\n    var resultUndefined = objectInstance._getFilterPredicate(projection, { filter: undefined });\n    var resultEmpty = objectInstance._getFilterPredicate(projection, { filter: '' });\n    _ember['default'].run(app, 'destroy');\n\n    assert.equal(typeof result, 'object');\n    assert.equal(result.constructor, StringPredicate);\n    assert.equal(result.attributePath, 'firstName');\n    assert.equal(result.containsValue, 'test');\n\n    assert.equal(resultUndefined, null);\n    assert.equal(resultEmpty, null);\n  });\n\n  (0, _qunit.test)('it properly generates complex filter predicate', function (assert) {\n    var Model0 = _emberFlexberryModelsBase['default'].extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n      dateField: DS.attr('date'),\n      numberField: DS.attr('number')\n    });\n\n    var app = (0, _dummyTestsHelpersStartApp['default'])();\n    app.register('model:employeeTest2', Model0);\n\n    var Model = _emberFlexberryModelsBase['default'].extend({\n      firstName: DS.attr('string'),\n      lastName: DS.attr('string'),\n      dateField: DS.attr('date'),\n      numberField: DS.attr('number'),\n      masterField: DS.belongsTo('employeeTest2', { inverse: null, async: false })\n    });\n\n    app.register('model:employeeTest', Model);\n\n    Model.defineProjection('EmployeeE', 'employeeTest', {\n      firstName: _emberFlexberryData.Projection.attr(),\n      lastName: _emberFlexberryData.Projection.attr(),\n      dateField: _emberFlexberryData.Projection.attr(),\n      numberField: _emberFlexberryData.Projection.attr(),\n      reportsTo: _emberFlexberryData.Projection.belongsTo('employeeTest2', 'Reports To', {\n        firstName: _emberFlexberryData.Projection.attr('Reports To - First Name', {\n          hidden: true\n        })\n      }, {\n        displayMemberPath: 'firstName'\n      })\n    });\n\n    var modelSerializer = _emberFlexberryData.Serializer.Odata.extend({});\n    var modelSerializer0 = _emberFlexberryData.Serializer.Odata.extend({});\n    var projection = _ember['default'].get(Model, 'projections').EmployeeE;\n\n    app.register('serializer:employeeTest2', modelSerializer0);\n    app.register('serializer:employeeTest', modelSerializer);\n    var store = app.__container__.lookup('service:store');\n\n    var ReloadListMixinObject = _ember['default'].Object.extend(_emberFlexberryMixinsReloadListMixin['default']);\n    var objectInstance = ReloadListMixinObject.create();\n    objectInstance.store = store;\n    var result = objectInstance._getFilterPredicate(projection, { filter: '123' });\n    _ember['default'].run(app, 'destroy');\n\n    assert.equal(typeof result, 'object');\n    assert.equal(result.constructor, ComplexPredicate);\n    assert.equal(result.condition, 'or');\n\n    // It counts only string fields.\n    assert.equal(result.predicates.length, 4);\n    assert.equal(result.predicates[0].constructor, StringPredicate);\n    assert.equal(result.predicates[0].attributePath, 'firstName');\n    assert.equal(result.predicates[0].containsValue, '123');\n    assert.equal(result.predicates[2].constructor, SimplePredicate);\n    assert.equal(result.predicates[2].attributePath, 'numberField');\n    assert.equal(result.predicates[2].operator, 'eq');\n    assert.equal(result.predicates[2].value, '123');\n    assert.equal(result.predicates[3].constructor, StringPredicate);\n    assert.equal(result.predicates[3].attributePath, 'reportsTo.firstName');\n    assert.equal(result.predicates[3].containsValue, '123');\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/reload-list-mixin-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/reload-list-mixin-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/reload-list-mixin-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/reload-list-mixin-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/reload-list-mixin-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test', ['exports', 'ember', 'ember-flexberry/mixins/sortable-controller', 'qunit'], function (exports, _ember, _emberFlexberryMixinsSortableController, _qunit) {\n\n  (0, _qunit.module)('SortableControllerMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var SortableControllerObject = _ember['default'].Object.extend(_emberFlexberryMixinsSortableController['default']);\n    var subject = SortableControllerObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/sortable-controller-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/sortable-controller-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-controller-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/sortable-controller-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/sortable-controller-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test', ['exports', 'ember', 'ember-flexberry/mixins/sortable-route', 'qunit'], function (exports, _ember, _emberFlexberryMixinsSortableRoute, _qunit) {\n\n  (0, _qunit.module)('SortableRouteMixin');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var SortableRouteObject = _ember['default'].Object.extend(_emberFlexberryMixinsSortableRoute['default']);\n    var subject = SortableRouteObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/mixins');\n  test('unit/mixins/sortable-route-test.js should pass jscs', function () {\n    ok(true, 'unit/mixins/sortable-route-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/mixins/sortable-route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/mixins/sortable-route-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/sortable-route-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('new-platform-flexberry-flexberry-user-setting', 'Unit | Model | new-platform-flexberry-flexberry-user-setting', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    assert.ok(!!model);\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/models');\n  test('unit/models/new-platform-flexberry-flexberry-user-setting-test.js should pass jscs', function () {\n    ok(true, 'unit/models/new-platform-flexberry-flexberry-user-setting-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/models/new-platform-flexberry-flexberry-user-setting-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models/new-platform-flexberry-flexberry-user-setting-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/new-platform-flexberry-flexberry-user-setting-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', {\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/application-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/application-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/application-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/application-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test', ['exports', 'ember-qunit', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberQunit, _emberFlexberryRoutesEditFormNew) {\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryRoutesEditFormNew['default'].create();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/edit-form-new-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/edit-form-new-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-new-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-form-new-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-form-new-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:edit-form', 'Unit | Route | edit form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/edit-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/edit-form-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/edit-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/edit-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/edit-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/edit-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/list-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:list-form', 'Unit | Route | list form', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/list-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/list-form-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/list-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/list-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/list-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/list-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test', ['exports', 'qunit', 'ember-flexberry/routes/projected-model-form'], function (exports, _qunit, _emberFlexberryRoutesProjectedModelForm) {\n\n  (0, _qunit.module)('route:projected-model-form');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    var route = _emberFlexberryRoutesProjectedModelForm['default'].create();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/routes');\n  test('unit/routes/projected-model-form-test.js should pass jscs', function () {\n    ok(true, 'unit/routes/projected-model-form-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/routes/projected-model-form-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/routes/projected-model-form-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/projected-model-form-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:detail-interaction', 'Unit | Service | detail interaction', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/detail-interaction-test.js should pass jscs', function () {\n    ok(true, 'unit/services/detail-interaction-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/detail-interaction-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/detail-interaction-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/detail-interaction-test.js should pass jshint.');\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:objectlistview-events', 'Unit | Service | objectlistview events', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - unit/services');\n  test('unit/services/objectlistview-events-test.js should pass jscs', function () {\n    ok(true, 'unit/services/objectlistview-events-test.js should pass jscs.');\n  });\n});","define('dummy/tests/unit/services/objectlistview-events-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/services/objectlistview-events-test.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/objectlistview-events-test.js should pass jshint.');\n  });\n});","define('dummy/tests/views/application.jscs-test', ['exports'], function (exports) {\n  'use strict';\n\n  module('JSCS - views');\n  test('views/application.js should pass jscs', function () {\n    ok(true, 'views/application.js should pass jscs.');\n  });\n});","define('dummy/tests/views/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - views/application.js');\n  QUnit.test('should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'views/application.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChhnlhdA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9DA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}