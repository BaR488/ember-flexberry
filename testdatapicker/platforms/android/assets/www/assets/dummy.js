"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('dummy/adapters/application', ['exports', 'ember-flexberry-data', 'dummy/config/environment'], function (exports, _emberFlexberryData, _dummyConfigEnvironment) {
  exports['default'] = _emberFlexberryData.Adapter.Odata.extend(_emberFlexberryData.Projection.AdapterMixin, {
    host: _dummyConfigEnvironment['default'].APP.backendUrls.api
  });
});
define('dummy/adapters/odata', ['exports', 'ember-flexberry-data/adapters/odata'], function (exports, _emberFlexberryDataAdaptersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOdata['default'];
    }
  });
});
define('dummy/adapters/offline', ['exports', 'ember-flexberry-data/adapters/offline'], function (exports, _emberFlexberryDataAdaptersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOffline['default'];
    }
  });
});
define('dummy/app', ['exports', 'ember', 'dummy/resolver', 'ember-load-initializers', 'dummy/config/environment'], function (exports, _ember, _dummyResolver, _emberLoadInitializers, _dummyConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix,
    Resolver: _dummyResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _dummyConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('dummy/browserify', ['exports', 'npm:dexie'], function (exports, _npmDexie) {});
// Requirement of ember-browserify.
// In order to use NPM pacakges inside the addon, we have to import
// them from somewhere in /app directory.
// See: https://github.com/ef4/ember-browserify#using-ember-browserify-in-addons
define('dummy/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'dummy/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _dummyConfigEnvironment) {

  var name = _dummyConfigEnvironment['default'].APP.name;
  var version = _dummyConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('dummy/components/colsconfig-dialog-content', ['exports', 'ember-flexberry/components/colsconfig-dialog-content'], function (exports, _emberFlexberryComponentsColsconfigDialogContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsColsconfigDialogContent['default'];
    }
  });
});
define('dummy/components/css-picker', ['exports', 'ember'], function (exports, _ember) {

  /**
    CSS picker component.
  
    @class CssPickerComponent
    @extends <a href="http://emberjs.com/api/classes/Ember.Component.html">Ember.Component</a>
  */
  exports['default'] = _ember['default'].Component.extend({
    /**
      Items containing possible CSS classes names with flags indicating whether class is selected or not.
       @private
      @property _items
      @type Object[]
    */
    _items: undefined,

    actions: {
      /**
        Handles changes in checkboxes related to CSS classes names.
         @method actions.onChange
      */
      onChange: function onChange() {
        var classNames = _ember['default'].A();
        this.$('input').each(function (index, input) {
          if (input.checked) {
            classNames.pushObject(input.name);
          }
        });

        this.set('value', classNames.join(' '));
      }
    },

    /**
      Items containing possible CSS classes names.
       @property items
      @type Object[]
    */
    items: undefined,

    /**
      Single value combined from selected CSS classes names.
       @property value
      @type String
     */
    value: undefined,

    /**
      Initializes component.
    */
    init: function init() {
      this._super.apply(this, arguments);

      this._generateItems();
      this._checkItems();
    },

    /**
      Observes changes in items collection.
    */
    _itemsDidChange: _ember['default'].observer('items.[]', function () {
      this._generateItems();
      this._checkItems();
    }),

    /**
      Observes changes in value combined from selected CSS classes names.
    */
    _valueDidChange: _ember['default'].observer('value', function () {
      this._checkItems();
    }),

    /**
      Generates items containing possible CSS classes names with flags indicating whether class is selected or not..
       @method _generateItems
    */
    _generateItems: function _generateItems() {
      var items = _ember['default'].A(this.get('items'));

      this.set('_items', items.map(function (item) {
        return {
          name: item,
          checked: false
        };
      }));
    },

    /**
      Changes items flags indicating whether class is selected or not
      (depending on current value combined from selected CSS classes names).
       @method _checkItems
    */
    _checkItems: function _checkItems() {
      var classNames = _ember['default'].A((this.get('value') || '').split(' '));
      this.get('_items').forEach(function (item) {
        _ember['default'].set(item, 'checked', classNames.contains(item.name));
      });
    }
  });
});
/**
  @module ember-flexberry-dummy
*/
define('dummy/components/flexberry-checkbox', ['exports', 'ember-flexberry/components/flexberry-checkbox'], function (exports, _emberFlexberryComponentsFlexberryCheckbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryCheckbox['default'];
});
define('dummy/components/flexberry-datepicker', ['exports', 'ember-flexberry/components/flexberry-datepicker'], function (exports, _emberFlexberryComponentsFlexberryDatepicker) {
  exports['default'] = _emberFlexberryComponentsFlexberryDatepicker['default'];
});
define('dummy/components/flexberry-dropdown', ['exports', 'ember-flexberry/components/flexberry-dropdown'], function (exports, _emberFlexberryComponentsFlexberryDropdown) {
  exports['default'] = _emberFlexberryComponentsFlexberryDropdown['default'];
});
define('dummy/components/flexberry-field', ['exports', 'ember-flexberry/components/flexberry-field'], function (exports, _emberFlexberryComponentsFlexberryField) {
  exports['default'] = _emberFlexberryComponentsFlexberryField['default'];
});
define('dummy/components/flexberry-file', ['exports', 'ember-flexberry/components/flexberry-file'], function (exports, _emberFlexberryComponentsFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsFlexberryFile['default'];
});
define('dummy/components/flexberry-groupedit', ['exports', 'ember-flexberry/components/flexberry-groupedit'], function (exports, _emberFlexberryComponentsFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsFlexberryGroupedit['default'];
});
define('dummy/components/flexberry-lookup', ['exports', 'ember-flexberry/components/flexberry-lookup'], function (exports, _emberFlexberryComponentsFlexberryLookup) {
  exports['default'] = _emberFlexberryComponentsFlexberryLookup['default'];
});
define('dummy/components/flexberry-menu', ['exports', 'ember-flexberry/components/flexberry-menu'], function (exports, _emberFlexberryComponentsFlexberryMenu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenu['default'];
    }
  });
});
define('dummy/components/flexberry-menuitem', ['exports', 'ember-flexberry/components/flexberry-menuitem'], function (exports, _emberFlexberryComponentsFlexberryMenuitem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenuitem['default'];
    }
  });
});
define('dummy/components/flexberry-objectlistview', ['exports', 'ember-flexberry/components/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsFlexberryObjectlistview['default'];
});
define('dummy/components/flexberry-simpledatetime', ['exports', 'ember-flexberry/components/flexberry-simpledatetime'], function (exports, _emberFlexberryComponentsFlexberrySimpledatetime) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberrySimpledatetime['default'];
    }
  });
});
define('dummy/components/flexberry-textarea', ['exports', 'ember-flexberry/components/flexberry-textarea'], function (exports, _emberFlexberryComponentsFlexberryTextarea) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextarea['default'];
});
define('dummy/components/flexberry-textbox', ['exports', 'ember-flexberry/components/flexberry-textbox'], function (exports, _emberFlexberryComponentsFlexberryTextbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextbox['default'];
});
define('dummy/components/flexberry-toggler', ['exports', 'ember-flexberry/components/flexberry-toggler'], function (exports, _emberFlexberryComponentsFlexberryToggler) {
  exports['default'] = _emberFlexberryComponentsFlexberryToggler['default'];
});
define('dummy/components/flexberry-validationmessage', ['exports', 'ember-flexberry/components/flexberry-validationmessage'], function (exports, _emberFlexberryComponentsFlexberryValidationmessage) {
  exports['default'] = _emberFlexberryComponentsFlexberryValidationmessage['default'];
});
define('dummy/components/flexberry-validationsummary', ['exports', 'ember-flexberry/components/flexberry-validationsummary'], function (exports, _emberFlexberryComponentsFlexberryValidationsummary) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryValidationsummary['default'];
    }
  });
});
define('dummy/components/groupedit-toolbar', ['exports', 'ember-flexberry/components/groupedit-toolbar'], function (exports, _emberFlexberryComponentsGroupeditToolbar) {
  exports['default'] = _emberFlexberryComponentsGroupeditToolbar['default'];
});
define('dummy/components/mobile/flexberry-file', ['exports', 'ember-flexberry/components/mobile/flexberry-file'], function (exports, _emberFlexberryComponentsMobileFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryFile['default'];
});
define('dummy/components/mobile/flexberry-groupedit', ['exports', 'ember-flexberry/components/mobile/flexberry-groupedit'], function (exports, _emberFlexberryComponentsMobileFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryGroupedit['default'];
});
define('dummy/components/mobile/flexberry-objectlistview', ['exports', 'ember-flexberry/components/mobile/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsMobileFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryObjectlistview['default'];
});
define('dummy/components/mobile/object-list-view-row', ['exports', 'ember-flexberry/components/mobile/object-list-view-row'], function (exports, _emberFlexberryComponentsMobileObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsMobileObjectListViewRow['default'];
});
define('dummy/components/modal-dialog', ['exports', 'ember-flexberry/components/modal-dialog'], function (exports, _emberFlexberryComponentsModalDialog) {
  exports['default'] = _emberFlexberryComponentsModalDialog['default'];
});
define('dummy/components/number-input', ['exports', 'ember'], function (exports, _ember) {

  /**
    Number input component.
  
    @class NumberInputComponent
    @extends <a href="http://emberjs.com/api/classes/Ember.Component.html">Ember.Component</a>
   */
  exports['default'] = _ember['default'].Component.extend({
    /**
      Override wrapper tag name to disable component's wrapping div.
       @property tagName
      @type String
      @default ''
     */
    tagName: '',

    /**
      Value typed through component's input.
       @property inputValue
      @type String
     */
    inputValue: undefined,

    /**
      Value typed through component's input & converted to number.
       @property value
      @type Number
     */
    value: undefined,

    /**
      Handles changes in inputValue.
     */
    inputValueDidChange: _ember['default'].observer('inputValue', function () {
      var value = parseInt(this.get('inputValue'), 10);
      this.set('value', isNaN(value) ? undefined : value);
    }),

    /**
      Initializes component.
     */
    init: function init() {
      this._super.apply(this, arguments);

      var value = this.get('value');
      if (!_ember['default'].isNone(value)) {
        this.set('inputValue', '' + value);
      }
    }
  });
});
/**
  @module ember-flexberry-dummy
 */
define('dummy/components/object-list-view-cell', ['exports', 'ember-flexberry/components/object-list-view-cell'], function (exports, _emberFlexberryComponentsObjectListViewCell) {
  exports['default'] = _emberFlexberryComponentsObjectListViewCell['default'];
});
define('dummy/components/object-list-view-header-cell', ['exports', 'ember-flexberry/components/object-list-view-header-cell'], function (exports, _emberFlexberryComponentsObjectListViewHeaderCell) {
  exports['default'] = _emberFlexberryComponentsObjectListViewHeaderCell['default'];
});
define('dummy/components/object-list-view-row', ['exports', 'ember-flexberry/components/object-list-view-row'], function (exports, _emberFlexberryComponentsObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsObjectListViewRow['default'];
});
define('dummy/components/object-list-view-single-column-cell', ['exports', 'ember-flexberry/components/object-list-view-single-column-cell'], function (exports, _emberFlexberryComponentsObjectListViewSingleColumnCell) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsObjectListViewSingleColumnCell['default'];
    }
  });
});
define('dummy/components/object-list-view', ['exports', 'ember-flexberry/components/object-list-view'], function (exports, _emberFlexberryComponentsObjectListView) {
  exports['default'] = _emberFlexberryComponentsObjectListView['default'];
});
define('dummy/components/olv-setconfigdialogbutton', ['exports', 'ember-flexberry/components/olv-setconfigdialogbutton'], function (exports, _emberFlexberryComponentsOlvSetconfigdialogbutton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsOlvSetconfigdialogbutton['default'];
    }
  });
});
define('dummy/components/olv-toolbar', ['exports', 'ember-flexberry/components/olv-toolbar'], function (exports, _emberFlexberryComponentsOlvToolbar) {
  exports['default'] = _emberFlexberryComponentsOlvToolbar['default'];
});
define('dummy/components/settings-example', ['exports', 'ember'], function (exports, _ember) {

  /**
    Settings example component.
  
    @class SettingsExampleComponent
    @extends Ember.Component
   */
  exports['default'] = _ember['default'].Component.extend({
    /**
      A hash of controller properties.
       @property controllerProperties
      @type Object
      @default null
     */
    controllerProperties: null,

    /**
      Settings metadata for component used in example.
       @property componentSettingsMetadata
      @type Object
      @default null
     */
    componentSettingsMetadata: null,

    /**
      Template text for component used in example.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: null
  });
});
/**
  @module ember-flexberry-dummy
 */
define('dummy/components/ui-accordion', ['exports', 'semantic-ui-ember/components/ui-accordion'], function (exports, _semanticUiEmberComponentsUiAccordion) {
  exports['default'] = _semanticUiEmberComponentsUiAccordion['default'];
});
define('dummy/components/ui-checkbox', ['exports', 'semantic-ui-ember/components/ui-checkbox'], function (exports, _semanticUiEmberComponentsUiCheckbox) {
  exports['default'] = _semanticUiEmberComponentsUiCheckbox['default'];
});
define('dummy/components/ui-dropdown-item', ['exports', 'semantic-ui-ember/components/ui-dropdown-item'], function (exports, _semanticUiEmberComponentsUiDropdownItem) {
  exports['default'] = _semanticUiEmberComponentsUiDropdownItem['default'];
});
define('dummy/components/ui-dropdown', ['exports', 'semantic-ui-ember/components/ui-dropdown'], function (exports, _semanticUiEmberComponentsUiDropdown) {
  exports['default'] = _semanticUiEmberComponentsUiDropdown['default'];
});
define('dummy/components/ui-embed', ['exports', 'semantic-ui-ember/components/ui-embed'], function (exports, _semanticUiEmberComponentsUiEmbed) {
  exports['default'] = _semanticUiEmberComponentsUiEmbed['default'];
});
define('dummy/components/ui-message', ['exports', 'ember-flexberry/components/ui-message'], function (exports, _emberFlexberryComponentsUiMessage) {
  exports['default'] = _emberFlexberryComponentsUiMessage['default'];
});
define('dummy/components/ui-modal', ['exports', 'semantic-ui-ember/components/ui-modal'], function (exports, _semanticUiEmberComponentsUiModal) {
  exports['default'] = _semanticUiEmberComponentsUiModal['default'];
});
define('dummy/components/ui-nag', ['exports', 'semantic-ui-ember/components/ui-nag'], function (exports, _semanticUiEmberComponentsUiNag) {
  exports['default'] = _semanticUiEmberComponentsUiNag['default'];
});
define('dummy/components/ui-popup', ['exports', 'semantic-ui-ember/components/ui-popup'], function (exports, _semanticUiEmberComponentsUiPopup) {
  exports['default'] = _semanticUiEmberComponentsUiPopup['default'];
});
define('dummy/components/ui-progress', ['exports', 'semantic-ui-ember/components/ui-progress'], function (exports, _semanticUiEmberComponentsUiProgress) {
  exports['default'] = _semanticUiEmberComponentsUiProgress['default'];
});
define('dummy/components/ui-radio', ['exports', 'semantic-ui-ember/components/ui-radio'], function (exports, _semanticUiEmberComponentsUiRadio) {
  exports['default'] = _semanticUiEmberComponentsUiRadio['default'];
});
define('dummy/components/ui-rating', ['exports', 'semantic-ui-ember/components/ui-rating'], function (exports, _semanticUiEmberComponentsUiRating) {
  exports['default'] = _semanticUiEmberComponentsUiRating['default'];
});
define('dummy/components/ui-search', ['exports', 'semantic-ui-ember/components/ui-search'], function (exports, _semanticUiEmberComponentsUiSearch) {
  exports['default'] = _semanticUiEmberComponentsUiSearch['default'];
});
define('dummy/components/ui-shape', ['exports', 'semantic-ui-ember/components/ui-shape'], function (exports, _semanticUiEmberComponentsUiShape) {
  exports['default'] = _semanticUiEmberComponentsUiShape['default'];
});
define('dummy/components/ui-sidebar', ['exports', 'semantic-ui-ember/components/ui-sidebar'], function (exports, _semanticUiEmberComponentsUiSidebar) {
  exports['default'] = _semanticUiEmberComponentsUiSidebar['default'];
});
define('dummy/components/ui-sticky', ['exports', 'semantic-ui-ember/components/ui-sticky'], function (exports, _semanticUiEmberComponentsUiSticky) {
  exports['default'] = _semanticUiEmberComponentsUiSticky['default'];
});
define('dummy/controllers/application', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {

  var version = _dummyConfigEnvironment['default'].APP.version;

  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      /**
        Toggles application sitemap's side bar.
         @method actions.toggleSidebar
      */
      toggleSidebar: function toggleSidebar() {
        _ember['default'].$('.ui.sidebar').sidebar('toggle');
      }
    },

    /**
      Currernt addon version.
       @property addonVersion
      @type String
    */
    addonVersion: version,

    /**
      Link to GitHub commit related to current addon version.
       @property addonVersionHref
      @type String
    */
    addonVersionHref: _ember['default'].computed('addonVersion', function () {
      var addonVersion = this.get('addonVersion');
      var commitSha = addonVersion.split('+')[1];

      return 'https://github.com/Flexberry/ember-flexberry/commit/' + commitSha;
    }),

    /**
      Flag: indicates whether current browser is internet explorer.
       @property browserIsInternetExplorer
      @type Boolean
    */
    browserIsInternetExplorer: _ember['default'].computed(function () {
      var userAgent = window.navigator.userAgent;

      return userAgent.indexOf('MSIE ') > 0 || userAgent.indexOf('Trident/') > 0 || userAgent.indexOf('Edge/') > 0;
    }),

    /**
      Locales supported by application.
       @property locales
      @type String[]
      @default ['ru', 'en']
    */
    locales: ['ru', 'en'],

    /**
      Handles changes in userSettingsService.isUserSettingsServiceEnabled.
       @method _userSettingsServiceChanged
      @private
    */
    _userSettingsServiceChanged: _ember['default'].observer('userSettingsService.isUserSettingsServiceEnabled', function () {
      this.get('target.router').refresh();
    }),

    /**
      Initializes controller.
    */
    init: function init() {
      this._super.apply(this, arguments);

      var i18n = this.get('i18n');
      if (_ember['default'].isNone(i18n)) {
        return;
      }

      // If i18n.locale is long value like 'ru-RU', 'en-GB', ... this code will return short variant 'ru', 'en', etc.
      var shortCurrentLocale = this.get('i18n.locale').split('-')[0];
      var availableLocales = _ember['default'].A(this.get('locales'));

      // Force current locale to be one of available,
      // if browser's current language is not supported by dummy application,
      // or if browser's current locale is long value like 'ru-RU', 'en-GB', etc.
      if (!availableLocales.contains(shortCurrentLocale)) {
        i18n.set('locale', 'en');
      } else {
        i18n.set('locale', shortCurrentLocale);
      }
    },

    /**
      Application sitemap.
       @property sitemap
      @type Object
    */
    sitemap: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');

      return {
        nodes: [{
          link: 'index',
          caption: i18n.t('forms.application.sitemap.index.caption'),
          title: i18n.t('forms.application.sitemap.index.title'),
          children: null
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.application.caption'),
          title: i18n.t('forms.application.sitemap.application.title'),
          children: [{
            link: 'ember-flexberry-dummy-application-user-list',
            caption: i18n.t('forms.application.sitemap.application.application-users.caption'),
            title: i18n.t('forms.application.sitemap.application.application-users.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-localization-list',
            caption: i18n.t('forms.application.sitemap.application.localizations.caption'),
            title: i18n.t('forms.application.sitemap.application.localizations.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-suggestion-list',
            caption: i18n.t('forms.application.sitemap.application.suggestions.caption'),
            title: i18n.t('forms.application.sitemap.application.suggestions.title'),
            children: null
          }, {
            link: 'ember-flexberry-dummy-suggestion-type-list',
            caption: i18n.t('forms.application.sitemap.application.suggestion-types.caption'),
            title: i18n.t('forms.application.sitemap.application.suggestion-types.title'),
            children: null
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.log-service-examples.caption'),
          title: i18n.t('forms.application.sitemap.log-service-examples.title'),
          children: [{
            link: 'i-i-s-caseberry-logging-objects-application-log-l',
            caption: i18n.t('forms.application.sitemap.log-service-examples.application-log.caption'),
            title: i18n.t('forms.application.sitemap.log-service-examples.application-log.title'),
            children: null
          }, {
            link: 'log-service-examples/settings-example',
            caption: i18n.t('forms.application.sitemap.log-service-examples.settings-example.caption'),
            title: i18n.t('forms.application.sitemap.log-service-examples.settings-example.title'),
            children: null
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.components-examples.caption'),
          title: i18n.t('forms.application.sitemap.components-examples.title'),
          children: [{
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.title'),
            children: [{
              link: 'components-examples/flexberry-checkbox/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-checkbox.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.title'),
            children: [{
              link: 'components-examples/flexberry-datepicker/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-datepicker.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.title'),
            children: [{
              link: 'components-examples/flexberry-dropdown/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-dropdown/conditional-render-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.conditional-render-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.conditional-render-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-dropdown/empty-value-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.empty-value-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.empty-value-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-dropdown/items-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.items-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-dropdown.items-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-field.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-field.title'),
            children: [{
              link: 'components-examples/flexberry-field/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-field.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-field.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.title'),
            children: [{
              link: 'components-examples/flexberry-file/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-file.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-file.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.title'),
            children: [{
              link: 'components-examples/flexberry-groupedit/model-update-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.model-update-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.model-update-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-groupedit/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-groupedit.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.title'),
            children: [{
              link: 'components-examples/flexberry-lookup/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/customizing-window-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.customizing-window-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.customizing-window-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/limit-function-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.limit-function-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/lookup-block-form-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-block-form-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-block-form-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/lookup-in-modal',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-in-modal.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.lookup-in-modal.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-lookup/dropdown-mode-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.dropdown-mode-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-lookup.dropdown-mode-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.title'),
            children: [{
              link: 'components-examples/flexberry-menu/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-menu.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.title'),
            children: [{
              link: 'components-examples/flexberry-objectlistview/limit-function-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.limit-function-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.settings-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/toolbar-custom-buttons-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/on-edit-form',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.on-edit-form.title')
            }, {
              link: 'components-examples/flexberry-objectlistview/custom-filter',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.custom-filter.title'),
              children: null
            }, {
              link: 'components-examples/flexberry-objectlistview/configurate-rows',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-objectlistview.configurate-rows.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.title'),
            children: [{
              link: 'components-examples/flexberry-simpledatetime/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-simpledatetime.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.title'),
            children: [{
              link: 'components-examples/flexberry-textarea/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-textarea.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.title'),
            children: [{
              link: 'components-examples/flexberry-textbox/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-textbox.settings-example.title'),
              children: null
            }]
          }, {
            link: null,
            caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.caption'),
            title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.title'),
            children: [{
              link: 'components-examples/flexberry-toggler/settings-example',
              caption: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example.caption'),
              title: i18n.t('forms.application.sitemap.components-examples.flexberry-toggler.settings-example.title'),
              children: null
            }]
          }]
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.integration-examples.caption'),
          title: i18n.t('forms.application.sitemap.integration-examples.title'),
          children: [{
            link: null,
            caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.caption'),
            title: i18n.t('forms.application.sitemap.integration-examples.edit-form.title'),
            children: [{
              link: 'integration-examples/edit-form/readonly-mode',
              caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.readonly-mode.caption'),
              title: i18n.t('forms.application.sitemap.integration-examples.edit-form.readonly-mode.title'),
              children: null
            }, {
              link: 'integration-examples/edit-form/validation',
              caption: i18n.t('forms.application.sitemap.integration-examples.edit-form.validation.caption'),
              title: i18n.t('forms.application.sitemap.integration-examples.edit-form.validation.title'),
              children: null
            }]
          }]
        }]
      };
    })
  });
});
define('dummy/controllers/colsconfig-dialog', ['exports', 'ember-flexberry/controllers/colsconfig-dialog'], function (exports, _emberFlexberryControllersColsconfigDialog) {
  exports['default'] = _emberFlexberryControllersColsconfigDialog['default'];
});
define('dummy/controllers/components-examples/flexberry-checkbox/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-checkbox' component 'label' property.
       @property label
      @type String
     */
    label: undefined,

    /**
      Flag: indicates whether 'flexberry-checkbox' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Component's wrapper CSS classes.
       @property class
      @type String
    */
    'class': '',

    /**
      Template text for 'flexberry-checkbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-checkbox<br>' + '  value=model.flag<br>' + '  label=label<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'boolean',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.flag'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'label',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'label'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['radio', 'slider', 'toggle'],
        bindedControllerPropertieName: 'class'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-datepicker/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Serialized model date.
       @property _serializedModelDate
      @type String
      @private
     */
    _serializedModelDate: undefined,

    /**
      Serialized min date.
       @property _serializedMinDate
      @type String
      @private
     */
    _serializedMinDate: null,

    /**
      Serialized max date.
       @property _serializedMaxDate
      @type String
      @private
     */
    _serializedMaxDate: null,

    /**
      Handles changes in serialized model date.
       @method _serializedModelDateDidChange
      @private
     */
    _serializedModelDateDidChange: _ember['default'].observer('_serializedModelDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedModelDate', 'model.date');
    }),

    /**
      Handles changes in min date.
       @method _serializedMinDateDidChange
      @private
     */
    _serializedMinDateDidChange: _ember['default'].observer('_serializedMinDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedMinDate', 'minDate');
    }),

    /**
      Handles changes in serialized max date.
       @method _serializedMaxDateDidChange
      @private
     */
    _serializedMaxDateDidChange: _ember['default'].observer('_serializedMaxDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedMaxDate', 'maxDate');
    }),

    /**
      Handles changes in model date.
       @method _modelDateDidChange
      @private
     */
    _modelDateDidChange: _ember['default'].observer('model.date', function () {
      _ember['default'].run.once(this, '_changeSerializedDateProperty', '_serializedModelDate', 'model.date');
    }),

    /**
      Handles changes in some of the serialized date properties.
       @method _changeDateProperty
      @param {String} serializedDatePropertyName Name of serialized date property.
      @param {Date} datePropertyName Name of date property which need to be parsed.
      @private
     */
    _changeDateProperty: function _changeDateProperty(serializedDatePropertyName, datePropertyName) {
      var serializedDate = this.get(serializedDatePropertyName);
      if (_ember['default'].typeOf(serializedDate) === 'undefined') {
        return;
      }

      if (serializedDate === '') {
        this.set(datePropertyName, null);
        return;
      }

      var momentDate = this.get('moment').moment(serializedDate);
      if (momentDate.isValid()) {
        this.set(datePropertyName, momentDate.toDate());
      } else {
        this.set(datePropertyName, new Date('invalid'));
      }
    },

    /**
      Handles changes in some of the date properties.
       @method _changeSerializedDateProperty
      @param {String} serializedDatePropertyName Name of serialized date property which need to be changed.
      @param {Date} datePropertyName Name of date property which contains value.
      @private
     */
    _changeSerializedDateProperty: function _changeSerializedDateProperty(serializedDatePropertyName, datePropertyName) {
      var date = this.get(datePropertyName);
      if (date === null || _ember['default'].typeOf(date) === 'undefined') {
        return;
      }

      var momentDate = this.get('moment').moment(date);
      if (momentDate.isValid()) {
        this.set(serializedDatePropertyName, momentDate.format('YYYY-MM-DDTHH:MM'));
      } else {
        this.set(serializedDatePropertyName, '' + new Date('invalid'));
      }
    },

    /**
      Possible date time formats.
       @property _dateTimeFormats
      @type String[]
     */
    _dateTimeFormats: ['DD.MM.YYYY', 'DD-MM-YYYY', 'HH.MM.SS', 'HH-MM-SS', 'DD.MM.YYYY HH.MM.SS', 'DD-MM-YYYY HH-MM-SS'],

    /**
      Default display format.
       @property dateTimeFormat
      @type String
     */
    dateTimeFormat: 'DD.MM.YYYY',
    /**
      Flag: show time in control and time picker inside date picker.
       @property hasTimePicker
      @type Boolean
     */
    hasTimePicker: false,
    /**
      The earliest date a user may select.
       @property minDate
      @type Date
     */
    minDate: null,
    /**
      The latest date a user may select.
       @property maxDate
      @type date
     */
    maxDate: null,
    /**
      Text for 'flexberry-datepicker' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-datepicker.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-datepicker.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-datepicker.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-datepicker' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-datepicker' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-datepicker<br>' + '  dateTimeFormat=dateTimeFormat<br>' + '  hasTimePicker=hasTimePicker<br>' + '  minDate=minDate<br>' + '  maxDate=maxDate<br>' + '  value=model.date<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'dateTimeFormat',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_dateTimeFormats'),
        settingDefaultValue: null,
        bindedControllerPropertieName: 'dateTimeFormat',
        bindedControllerPropertieDisplayName: 'dateTimeFormat'
      });

      componentSettingsMetadata.pushObject({
        settingName: 'hasTimePicker',
        settingType: 'boolean',
        settingDefaultValue: 'false',
        bindedControllerPropertieName: 'hasTimePicker'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'minDate',
        settingType: 'date',
        settingDefaultValue: null,
        bindedControllerPropertieName: '_serializedMinDate',
        bindedControllerPropertieDisplayName: 'minDate'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxDate',
        settingType: 'date',
        settingDefaultValue: null,
        bindedControllerPropertieName: '_serializedMaxDate',
        bindedControllerPropertieDisplayName: 'maxDate'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'date',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: '_serializedModelDate',
        bindedControllerPropertieDisplayName: 'model.date'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-datepicker.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: 'false',
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-dropdown/conditional-render-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Message to be displayed in 'ui-message' component.
       @property infoMessage
      @type String
     */
    infoMessage: _ember['default'].computed('i18n.locale', function () {
      var message = this.get('i18n').t('forms.components-examples.flexberry-dropdown.conditional-render-example.info-message', {
        pageTemplate: new _ember['default'].Handlebars.SafeString('<pre><code>' + '{{#if model.enumeration}}<br>' + '  &lt;span&gt;{{model.enumeration}}&lt;/span&gt;<br>' + '{{else}}<br>' + '  {{flexberry-dropdown<br>' + '    items=(flexberry-enum \"components-examples/flexberry-dropdown/conditional-render-example/enumeration\")<br>' + '    value=model.enumeration<br>' + '  }}<br>' + '{{/if}}' + '</code></pre>')
      });

      return new _ember['default'].Handlebars.SafeString(message);
    })
  });
});
define('dummy/controllers/components-examples/flexberry-dropdown/empty-value-example', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({});
});
define('dummy/controllers/components-examples/flexberry-dropdown/items-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Message to be displayed in 'ui-message' component.
    */
    message: new _ember['default'].Handlebars.SafeString('<pre><code>' + '<strong>itemsArray: </strong>' + '[\"itemsArray1\", \"itemsArray2\", \"itemsArray3\"]' + '<br><br>' + '<strong>itemsObject:</strong> {<br>' + '  itemsObject1: \"itemsObject1\",<br>' + '  itemsObject2: \"itemsObject2\",<br>' + '  itemsObject3: \"itemsObject3\"<br>' + '}' + '</code></pre>'),

    /**
      Items. Type array.
    */
    itemsArray: ['itemsArray1', 'itemsArray2', 'itemsArray3'],

    /**
      Items. Type object.
    */
    itemsObject: {
      itemsObject1: 'itemsObject1',
      itemsObject2: 'itemsObject2',
      itemsObject3: 'itemsObject3'
    },

    value: undefined,

    /**
      Flag indicates whether use `itemsArray` or `itemsObject`.
    */
    usedArray: true,

    /**
      Current items in `flexberry-objectlistview`.
    */
    currentItems: _ember['default'].computed('usedArray', function () {
      var usedArray = this.get('usedArray');
      var currentItems = null;

      if (usedArray) {
        currentItems = this.get('itemsArray');
      } else {
        currentItems = this.get('itemsObject');
      }

      return currentItems;
    }),

    actions: {
      /**
        This action is called when `flexberry-checkox` change its value.
      */
      checked: function checked() {
        var usedArray = this.get('usedArray');
        this.set('usedArray', !usedArray);
      },

      /**
        This action is called when user clicks on reset button.
      */
      resetValue: function resetValue() {
        this.set('value', null);
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-dropdown/settings-example', ['exports', 'ember', 'dummy/enums/components-examples/flexberry-dropdown/settings-example/enumeration', 'ember-flexberry-data/utils/enum-functions', 'ember-i18n'], function (exports, _ember, _dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration, _emberFlexberryDataUtilsEnumFunctions, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Component's wrapper CSS classes.
       @property class
      @type String
    */
    'class': '',

    /**
      Text for 'flexberry-dropdown' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-dropdown.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-dropdown.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-dropdown.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-dropdown' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-dropdown' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-dropdown<br>' + '  items=(flexberry-enum \"components-examples/flexberry-dropdown/settings-example/enumeration\")<br>' + '  value=model.enumeration<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'enumeration',
        settingAvailableItems: (0, _emberFlexberryDataUtilsEnumFunctions.enumCaptions)(_dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration['default']),
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.enumeration'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-dropdown.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['scrolling', 'compact', 'fluid'],
        bindedControllerPropertieName: 'class'
      });
      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-field/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-field' component 'label' property.
       @property label
      @type String
     */
    label: undefined,

    /**
      Text for 'flexberry-field' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-field.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-field.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-field.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-field' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-field' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-field<br>' + '  value=model.text<br>' + '  label=label<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.text'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'label',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'label'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-field.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-file/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-file' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-file.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-file.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-file.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-file' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      File upload URL for 'flexberry-file' component 'uploadUrl' property.
       @property uploadUrl
      @type String
     */
    uploadUrl: null,

    /**
      Max upload file size (in bytes) for 'flexberry-file' component 'maxUploadFileSize' property.
       @property maxUploadFileSize
      @type Number
     */
    maxUploadFileSize: null,

    /**
      Flag for 'flexberry-file' component 'showPreview' property.
       @property showPreview
      @type Boolean
     */
    showPreview: false,

    /**
      Flag for 'flexberry-file' component 'showUploadButton' property.
       @property showUploadButton
      @type Boolean
     */
    showUploadButton: false,

    /**
      Flag for 'flexberry-file' component 'showDownloadButton' property.
       @property showDownloadButton
      @type Boolean
     */
    showDownloadButton: true,

    /**
      Flag for 'flexberry-file' component 'showModalDialogOnUploadError' property.
       @property showModalDialogOnUploadError
      @type Boolean
     */
    showModalDialogOnUploadError: false,

    /**
      Flag for 'flexberry-file' component 'showModalDialogOnDownloadError' property.
       @property showModalDialogOnDownloadError
      @type Boolean
     */
    showModalDialogOnDownloadError: true,

    /**
      Template text for 'flexberry-textbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-file<br>' + '  value=model.file<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  uploadUrl=uploadUrl<br>' + '  maxUploadFileSize=maxUploadFileSize<br>' + '  showPreview=showPreview<br>' + '  showUploadButton=showUploadButton<br>' + '  showDownloadButton=showDownloadButton<br>' + '  showModalDialogOnUploadError=showModalDialogOnUploadError<br>' + '  showModalDialogOnDownloadError=showModalDialogOnDownloadError<br>' + '  class=class<br>' + '  buttonClass=buttonClass<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.file'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-file.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'uploadUrl',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'uploadUrl'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxUploadFileSize',
        settingType: 'number',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'maxUploadFileSize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showPreview',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showPreview'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showUploadButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showUploadButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDownloadButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showDownloadButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showModalDialogOnUploadError',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showModalDialogOnUploadError'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showModalDialogOnDownloadError',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showModalDialogOnDownloadError'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['fluid input', 'transparent input', 'mini input', 'huge input', 'input error'],
        bindedControllerPropertieName: 'class'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'buttonClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['purple basic', 'inverted violet', 'green colored', 'mini', 'huge'],
        bindedControllerPropertieName: 'buttonClass'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/model-update-example', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Counter to mark created records.
       @property _itemsCounter
      @private
      @type Number
      @default 0
    */
    _itemsCounter: 0,

    /**
      Flag indicates that component have to check on model changes and display it.
       @property searchForContentChange
      @type Boolean
      @default true
    */
    searchForContentChange: true,

    actions: {
      /**
        Adds detail to the end of the array.
         @method actions.addDetail.
      */
      addDetail: function addDetail() {
        var store = this.get('store');
        var itemsCounter = this.get('_itemsCounter') + 1;
        var detailModel = this.get('model.details');
        var newRecord = store.createRecord('components-examples/flexberry-groupedit/shared/detail', {
          text: itemsCounter
        });

        detailModel.addObject(newRecord);
        this.set('_itemsCounter', itemsCounter);
      },

      /**
        Removes first element of the detail array.
         @method actions.deleteDetail.
      */
      deleteDetail: function deleteDetail() {
        var recordToDelete = this.get('model.details').get('firstObject');
        if (recordToDelete) {
          recordToDelete.deleteRecord();
        }
      }
    },

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
    */
    getCellComponent: function getCellComponent(attr, bindingPath) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo' && bindingPath === 'master') {
        cellComponent.componentProperties = {
          projection: 'MasterL',
          displayAttributeName: 'text',
          title: 'Master',
          relationName: 'master',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-groupedit/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  var getOwner = _ember['default'].getOwner;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _detailsProjectionName
      @type String
      @private
     */
    _detailsProjectionName: 'DetailE',

    /**
      Array of available detail's model projections.
       @property _detailsProjections
      @type Object[]
     */
    _detailsProjections: _ember['default'].computed('model.details.relationship.belongsToType', function () {
      var detailsModelName = this.get('model.details.relationship.belongsToType');
      var detailsClass = getOwner(this)._lookupFactory('model:' + detailsModelName);

      return _ember['default'].get(detailsClass, 'projections');
    }),

    /**
      Array of available detail's model projections names.
       @property _detailsProjectionsNames
      @type String[]
     */
    _detailsProjectionsNames: _ember['default'].computed('_detailsProjections.[]', function () {
      var detailsProjections = this.get('_detailsProjections');
      if (_ember['default'].isNone(detailsProjections)) {
        return [];
      }

      return Object.keys(detailsProjections);
    }),

    /**
      Model projection for 'flexberry-groupedit' component 'modelProjection' property.
       @property detailsProjection
      @type Object
     */
    detailsProjection: _ember['default'].computed('_detailsProjections.[]', '_detailsProjectionName', function () {
      var detailsProjectionName = this.get('_detailsProjectionName');
      if (_ember['default'].isBlank(detailsProjectionName)) {
        return null;
      }

      var detailsModelName = this.get('model.details.relationship.belongsToType');
      var detailsClass = getOwner(this)._lookupFactory('model:' + detailsModelName);
      var detailsClassProjections = _ember['default'].get(detailsClass, 'projections');
      if (_ember['default'].isNone(detailsClassProjections)) {
        return null;
      }

      return detailsClassProjections[detailsProjectionName];
    }),

    /**
      Text for 'flexberry-groupedit' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-groupedit.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-groupedit.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-groupedit.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-groupedit' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-groupedit' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-groupedit' component 'createNewButton' property.
       @property createNewButton
      @type Boolean
     */
    createNewButton: true,

    /**
      Flag for 'flexberry-groupedit' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: true,

    /**
      Flag for 'flexberry-groupedit' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag for 'flexberry-groupedit' component 'showAsteriskInRow' property.
       @property showAsteriskInRow
      @type Boolean
     */
    showAsteriskInRow: true,

    /**
      Flag for 'flexberry-groupedit' component 'showCheckBoxInRow' property.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: true,

    /**
      Flag for 'flexberry-groupedit' component 'showDeleteButtonInRow' property.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: false,

    /**
      Flag for 'flexberry-groupedit' component 'showDeleteButtonInRow' property.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showEditMenuItemInRow: false,

    /**
      Flag for 'flexberry-groupedit' component 'showDeleteButtonInRow' property.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: false,

    /**
      Text for 'flexberry-groupedit' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type Boolean
     */
    singleColumnHeaderTitle: undefined,

    /**
      Flag for 'flexberry-groupedit' component 'rowClickable' property.
       @property rowClickable
      @type Boolean
     */
    rowClickable: false,

    /**
      Flag for 'flexberry-groupedit' component 'immediateDelete' property.
       @property immediateDelete
      @type Boolean
     */
    immediateDelete: false,

    /**
      Template text for 'flexberry-groupedit' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-groupedit<br>' + '  componentName=\"aggregatorDetailsGroupedit\"<br>' + '  content=model.details<br>' + '  modelProjection=detailsProjection<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  tableStriped=tableStriped<br>' + '  createNewButton=createNewButton<br>' + '  deleteButton=deleteButton<br>' + '  allowColumnResize=allowColumnResize<br>' + '  showAsteriskInRow=showAsteriskInRow<br>' + '  showCheckBoxInRow=showCheckBoxInRow<br>' + '  showDeleteButtonInRow=showDeleteButtonInRow<br>' + '  showEditMenuItemInRow=showEditMenuItemInRow<br>' + '  showDeleteMenuItemInRow=showDeleteMenuItemInRow<br>' + '  singleColumnHeaderTitle=singleColumnHeaderTitle<br>' + '  rowClickable=rowClickable<br>' + '  immediateDelete=immediateDelete<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'componentName',
        settingType: 'string',
        settingValue: 'aggregatorDetailsGroupedit',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'content',
        settingType: 'hasManyArray',
        settingValue: this.get('model.details'),
        settingDefaultValue: null,
        settingIsWithoutUI: true,
        bindedControllerPropertieName: 'model.details'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelProjection',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_detailsProjectionsNames'),
        settingDefaultValue: null,
        bindedControllerPropertieName: '_detailsProjectionName',
        bindedControllerPropertieDisplayName: 'detailsProjection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-groupedit.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'tableStriped',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'tableStriped'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'createNewButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'createNewButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'deleteButton',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'deleteButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'allowColumnResize',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'allowColumnResize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showAsteriskInRow',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showAsteriskInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showCheckBoxInRow',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'showCheckBoxInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showEditMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showEditMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'singleColumnHeaderTitle',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'singleColumnHeaderTitle'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'rowClickable',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'rowClickable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'immediateDelete',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'immediateDelete'
      });

      return componentSettingsMetadata;
    }),

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo' && bindingPath === 'master') {
        cellComponent.componentProperties = {
          projection: 'MasterL',
          displayAttributeName: 'text',
          title: 'Master',
          relationName: 'master',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/customizing-window-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    actions: {
      /**
        This method returns custom properties for lookup window.
        @method getLookupFolvProperties
         @param {Object} options Parameters of lookup that called this method.
        @param {String} [options.projection] Lookup projection.
        @param {String} [options.relationName] Lookup relation name.
        @return {Object} Set of options for lookup window.
       */
      getLookupFolvProperties: function getLookupFolvProperties(options) {
        var methodArgs = _ember['default'].merge({
          projection: undefined,
          relationName: undefined
        }, options);

        if (methodArgs.relationName === 'type') {
          return {
            filterButton: true
          };
        }

        return undefined;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/dropdown-mode-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Current predicate to limit accessible values for lookup in dropdown mode.
       @property lookupCustomLimitPredicate
      @type BasePredicate
      @default undefined
     */
    lookupCustomLimitPredicate: _ember['default'].computed(function () {
      return new StringPredicate('name').contains('Type');
    })
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/limit-function-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Current predicate to limit accessible values for lookup.
       @property lookupCustomLimitPredicate
      @type BasePredicate
      @default undefined
     */
    lookupCustomLimitPredicate: _ember['default'].computed('model.type', function () {
      var currentLookupValue = this.get('model.type');
      if (currentLookupValue) {
        var currentLookupText = this.get('model.type.name');
        return new StringPredicate('name').contains(currentLookupText);
      }

      return undefined;
    }),

    actions: {
      /**
        This method returns custom properties for lookup window.
         @method getLookupFolvProperties
        @param {Object} options Parameters of lookup that called this method.
        @param {String} [options.projection] Lookup projection.
        @param {String} [options.relationName] Lookup relation name.
        @return {Object} Set of options for lookup window.
       */
      getLookupFolvProperties: function getLookupFolvProperties(options) {
        var methodArgs = _ember['default'].merge({
          projection: undefined,
          relationName: undefined
        }, options);

        if (methodArgs.relationName === 'type') {
          return {
            filterButton: true
          };
        }

        return undefined;
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/lookup-block-form-example', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({});
});
define('dummy/controllers/components-examples/flexberry-lookup/lookup-in-modal', ['exports', 'ember', 'ember-flexberry/controllers/edit-form'], function (exports, _ember, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({

    actions: {
      modalWindow: function modalWindow() {
        var repeatWindow = _ember['default'].$('#repeat-window').modal({
          closable: false,
          autofocus: false,
          detachable: false,
          allowMultiple: true,
          context: '#example'
        });
        this.set('repeatWindow', repeatWindow);
        this.get('repeatWindow').modal('refresh').modal('show');
      },

      modalWindowDouble: function modalWindowDouble() {
        var repeatWindow = _ember['default'].$('#repeat-window-double').modal({
          closable: false,
          autofocus: false,
          detachable: false,
          allowMultiple: true,
          context: '#example'
        });
        this.set('repeatWindowdouble', repeatWindow);
        this.get('repeatWindowdouble').modal('refresh').modal('show');
      },

      logOut: function logOut() {
        this.get('repeatWindow').modal('hide');
      },

      logOutDouble: function logOutDouble() {
        this.get('repeatWindowdouble').modal('hide');
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-lookup/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersEditForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property placeholder
      @type String
      @default 't('components.flexberry-lookup.placeholder')'
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-lookup.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-lookup.placeholder'));
      }
    }),
    /**
      Flag indicates whether 'flexberry-lookup' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
    */
    readonly: false,

    /**
      Text for 'flexberry-lookup' component 'placeholder' property.
       @property title
      @type String
      @default 'Master'
    */
    title: 'Master',

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'autocomplete' mode or not.
       @property autocomplete
      @type Boolean
      @default false
    */
    autocomplete: false,

    /**
      Flag indicates whether 'flexberry-lookup' component is in 'dropdown' mode or not.
       @property dropdown
      @type Boolean
      @default false
    */
    dropdown: false,

    /**
      Content for 'flexberry-lookup' component 'chooseText' property.
       @property chooseText
      @type String
      @default 't('components.flexberry-lookup.choose-button-text')'
    */
    chooseText: (0, _emberI18n.translationMacro)('components.flexberry-lookup.choose-button-text'),

    /**
      Content for 'flexberry-lookup' component 'removeText' property.
       @property removeText
      @type String
      @default '<i class="remove icon"></i>'
    */
    removeText: '<i class="remove icon"></i>',

    /**
      Text for 'flexberry-lookup' component 'chooseButtonClass' property.
       @property chooseButtonClass
      @type String
      @default 'purple'
    */
    chooseButtonClass: '',

    /**
      Text for 'flexberry-lookup' component 'removeButtonClass' property.
       @property removeButtonClass
      @type String
      @default 'olive'
    */
    removeButtonClass: '',

    /**
      Template text for 'flexberry-lookup' component.
       @property componentTemplateText
      @type String
    */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-lookup<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  value=model.type<br>' + '  projection="SettingLookupExampleView"<br>' + '  displayAttributeName="name"<br>' + '  title="Master"<br>' + '  relatedModel=model<br>' + '  relationName="type"<br>' + '  choose="showLookupDialog"<br>' + '  remove="removeLookupValue"<br>' + '  autocomplete=autocomplete<br>' + '  dropdown=dropdown<br>' + '  chooseText=chooseText<br>' + '  removeText=removeText<br>' + '  chooseButtonClass=chooseButtonClass<br>' + '  removeButtonClass=removeButtonClass<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
    */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-lookup.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'title',
        settingType: 'string',
        settingDefaultValue: 'Master',
        bindedControllerPropertieName: 'title'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'autocomplete',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'autocomplete'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'dropdown',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'dropdown'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'chooseText',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-lookup.choose-button-text'),
        bindedControllerPropertieName: 'chooseText'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'removeText',
        settingType: 'string',
        settingDefaultValue: '<i class="remove icon"></i>',
        bindedControllerPropertieName: 'removeText'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'chooseButtonClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['blue basic', 'positive', 'teal colored'],
        bindedControllerPropertieName: 'chooseButtonClass'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'removeButtonClass',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['purple basic', 'negative', 'yellow colored'],
        bindedControllerPropertieName: 'removeButtonClass'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-menu/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      onMenuItemClick: function onMenuItemClick(e) {
        var clickedMenu = _ember['default'].$(e.delegateTarget);
        var clickedMenuItem = _ember['default'].$(e.currentTarget);
        if (e.currentTarget) {
          this.set('currentItem', clickedMenuItem.data('flexberry-menuitem.item'));
        } else {
          this.set('currentItem', clickedMenu.data('flexberry-menu'));
        }

        clickedMenu.popup({
          content: 'This menu item has been clicked',
          position: 'top right',
          color: 'teal',
          delay: {
            show: 0,
            hide: 200
          },
          on: 'manual',
          onHidden: function onHidden(e) {
            var owner = _ember['default'].$(e);
            owner.popup('destroy');
          }
        });

        clickedMenu.popup('show');

        window.setTimeout((function () {
          clickedMenu.popup('hide');
        }).bind(this), 3000);
      }
    },

    /**
      Menu items for 'flexberry-menu' component.
       @property items
      @type Object
    */
    items: null,

    /**
      Selected menu item for 'flexberry-menu' component.
       @property currentItem
      @type Object
    */
    currentItem: null,

    /**
      @property collapseMenuOnItemClick
      @type Boolean
      @default true
    */
    collapseMenuOnItemClick: true,

    /**
      @property isVertical
      @type Boolean
      @default false
    */
    isVertical: false,

    /**
      Template text for 'flexberry-menu' component.
       @property componentTemplateText
      @type String
    */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-menu<br>' + '  placeholder=placeholder<br>' + '  class="compact"<br>' + '  items=items<br>' + '  collapseMenuOnItemClick=collapseMenuOnItemClick<br>' + '  onItemClick=(action "onMenuItemClick")<br>' + '}}'),

    /**
      Initializes controller.
       @method init
    */
    init: function init() {
      this._super.apply(this, arguments);

      var i18n = this.get('i18n');
      var itemsLeft = [{
        icon: 'search icon',
        title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
        items: null
      }];

      var itemsRight = [{
        icon: 'setting icon',
        iconAlignment: 'right',
        title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'),
        items: null
      }];

      var itemsSubmenu = [{
        icon: 'list layout icon',
        title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'),
        itemsAlignment: null,
        items: [{
          icon: 'search icon',
          title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
          items: null
        }, {
          icon: 'setting icon',
          iconAlignment: 'right',
          title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'),
          items: null
        }, {
          icon: 'list layout icon',
          title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'),
          itemsAlignment: 'left',
          items: [{
            icon: 'search icon',
            title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
            items: null
          }, {
            icon: 'setting icon',
            iconAlignment: 'right',
            title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'),
            items: null
          }, {
            icon: 'list layout icon',
            title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'),
            itemsAlignment: 'right',
            items: [{
              icon: 'search icon',
              title: i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'),
              items: null
            }]
          }]
        }]
      }];

      this.set('itemsLeft', itemsLeft);
      this.set('itemsRight', itemsRight);
      this.set('itemsSubmenu', itemsSubmenu);
    },

    /**
      Handles changes in i18n.locale.
       @method _menuTitle
      @private
     */
    _menuTitle: _ember['default'].observer('i18n.locale', function () {
      var i18n = this.get('i18n');
      if (typeof this.get('itemsLeft.0.title') === 'object') {
        this.set('itemsLeft.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (typeof this.get('itemsRight.0.title') === 'object') {
        this.set('itemsRight.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (typeof this.get('itemsSubmenu.0.title') === 'object') {
        this.set('itemsSubmenu.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }

      if (typeof this.get('itemsSubmenu.0.items.0.title') === 'object') {
        this.set('itemsSubmenu.0.items.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (typeof this.get('itemsSubmenu.0.items.1.title') === 'object') {
        this.set('itemsSubmenu.0.items.1.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.0.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.1.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.1.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.2.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.2.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }

      if (typeof this.get('itemsSubmenu.0.items.2.items.2.items.0.title') === 'object') {
        this.set('itemsSubmenu.0.items.2.items.2.items.0.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }
    }),

    /**
      Handles changes in currentItem.title.
       @method _titleChanged
      @private
     */
    _titleChanged: _ember['default'].observer('currentItem.title', function () {
      var i18n = this.get('i18n');
      if (this.get('currentItem.title') === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon1').toString()) {
        this.set('currentItem.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon1'));
      }

      if (this.get('currentItem.title') === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon2').toString()) {
        this.set('currentItem.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon2'));
      }

      if (this.get('currentItem.title') === this.get('i18n').t('forms.components-examples.flexberry-menu.settings-example.titleIcon3').toString()) {
        this.set('currentItem.title', i18n.t('forms.components-examples.flexberry-menu.settings-example.titleIcon3'));
      }
    }),

    menuPosition: _ember['default'].computed('isVertical', function () {
      var isVertical = this.get('isVertical');
      if (isVertical === true) {
        return 'ui basic vertical buttons';
      } else {
        return 'ui basic buttons';
      }
    }),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
    */
    componentSettingsMetadata: _ember['default'].computed(function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'icon',
        settingType: 'enumeration',
        settingDefaultValue: 'undefined',
        settingAvailableItems: ['search icon', 'bordered setting icon', 'inverted teal paw icon', 'big green tree icon', 'circular small record icon', 'olive list layout icon'],
        bindedControllerPropertieName: 'currentItem.icon'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'iconAlignment',
        settingType: 'enumeration',
        settingDefaultValue: 'undefined',
        settingAvailableItems: ['left', 'right'],
        bindedControllerPropertieName: 'currentItem.iconAlignment'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'title',
        settingType: 'string',
        settingDefaultValue: 'undefined',
        bindedControllerPropertieName: 'currentItem.title'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'itemsAlignment',
        settingType: 'enumeration',
        settingDefaultValue: 'undefined',
        settingAvailableItems: ['left', 'right'],
        bindedControllerPropertieName: 'currentItem.itemsAlignment'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'collapseMenuOnItemClick',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'collapseMenuOnItemClick'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'isVertical',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'isVertical'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/configurate-rows', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _projectionName
      @type String
      @private
     */
    _projectionName: 'SuggestionL',

    /**
      Array of available model projections.
       @property _projections
      @type Object[]
     */
    _projections: _ember['default'].computed('model.[]', function () {
      var records = this.get('model');
      var modelClass = _ember['default'].get(records, 'length') > 0 ? _ember['default'].get(records, 'firstObject').constructor : {};

      return _ember['default'].get(modelClass, 'projections');
    }),

    /**
      Array of available model projections names.
       @property _projectionsNames
      @type String[]
     */
    _projectionsNames: _ember['default'].computed('_projections.[]', function () {
      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return [];
      }

      return Object.keys(projections);
    }),

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: _ember['default'].computed('_projections.[]', '_projectionName', function () {
      var projectionName = this.get('_projectionName');
      if (_ember['default'].isBlank(projectionName)) {
        return null;
      }

      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return null;
      }

      return projections[projectionName];
    }),

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    /**
      Configurate rows 'flexberry-objectlistview' component by address.
       @property configurateRowByAddress
      @type String
     */
    configurateRowByAddress: 'Street, 20',

    _configurateRowByAddress: _ember['default'].observer('configurateRowByAddress', function () {
      var _this = this;

      var rowConfig = { customClass: '' };

      this.get('records').forEach(function (record, index, records) {
        _this.send('configurateRow', rowConfig, record);
      });
    }),

    /**
      Template text for 'flexberry-objectlistview' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-objectlistview<br>' + '  configurateRow=(action \"configurateRow\")<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'configurateRowByAddress',
        settingType: 'string',
        settingDefaultValue: 'Street, 20',
        bindedControllerPropertieName: 'configurateRowByAddress'
      });

      return componentSettingsMetadata;
    }),

    actions: {
      /**
        Configurate rows on the condition.
      */
      configurateRow: function configurateRow(rowConfig, record) {
        if (record) {
          this.get('records').push(record);
        }

        if (record.get('address') === this.get('configurateRowByAddress')) {
          rowConfig.customClass += 'positive ';
        }
      }
    }

  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/custom-filter', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    actions: {
      componentForFilter: function componentForFilter(type, relation) {
        if (type === 'date') {
          return {
            name: 'flexberry-datepicker'
          };
        }

        return {};
      },

      conditionsByType: function conditionsByType(type) {
        switch (type) {
          case 'file':
            return null;

          case 'date':
          case 'number':
            return ['eq', 'neq', 'le', 'ge'];

          case 'string':
            return ['eq', 'neq', 'like'];

          case 'boolean':
            return ['eq'];

          default:
            return ['eq', 'neq'];
        }
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/limit-function-example', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({});
});
define('dummy/controllers/components-examples/flexberry-objectlistview/on-edit-form/user', ['exports', 'ember', 'ember-flexberry/controllers/edit-form', 'dummy/mixins/edit-form-controller-operations-indication', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryControllersEditForm, _dummyMixinsEditFormControllerOperationsIndication, _emberFlexberryData) {
  var Builder = _emberFlexberryData.Query.Builder;
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_dummyMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'ember-flexberry-dummy-application-user-list'
    */
    parentRoute: 'components-examples/flexberry-objectlistview/on-edit-form',

    store: _ember['default'].inject.service(),

    getCellComponent: null,

    perPageValues: [],

    customContent: _ember['default'].computed('model.name', function () {
      var name = this.get('model.name');
      var builder = new Builder(this.get('store')).from('ember-flexberry-dummy-suggestion').selectByProjection('SuggestionL').where(new StringPredicate('author.name').contains(name));
      return this.get('store').query('ember-flexberry-dummy-suggestion', builder.build());
    })
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/on-edit-form', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
     */
    editFormRoute: 'components-examples/flexberry-objectlistview/on-edit-form/user'
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/list-form', 'ember-i18n'], function (exports, _ember, _emberFlexberryControllersListForm, _emberI18n) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of selected detail's model projection.
       @property _projectionName
      @type String
      @private
     */
    _projectionName: 'SuggestionL',

    /**
      Array of available model projections.
       @property _projections
      @type Object[]
     */
    _projections: _ember['default'].computed('model.[]', function () {
      var records = this.get('model');
      var modelClass = _ember['default'].get(records, 'length') > 0 ? _ember['default'].get(records, 'firstObject').constructor : {};

      return _ember['default'].get(modelClass, 'projections');
    }),

    /**
      Array of available model projections names.
       @property _projectionsNames
      @type String[]
     */
    _projectionsNames: _ember['default'].computed('_projections.[]', function () {
      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return [];
      }

      return Object.keys(projections);
    }),

    /**
      Model projection for 'flexberry-objectlistview' component 'modelProjection' property.
       @property projection
      @type Object
     */
    projection: _ember['default'].computed('_projections.[]', '_projectionName', function () {
      var projectionName = this.get('_projectionName');
      if (_ember['default'].isBlank(projectionName)) {
        return null;
      }

      var projections = this.get('_projections');
      if (_ember['default'].isNone(projections)) {
        return null;
      }

      return projections[projectionName];
    }),

    /**
      Name of related edit form route (for 'flexberry-objectlistview' component 'editFormRoute' property).
       @property editFormRoute
      @type String
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit',

    /**
      Text for 'flexberry-objectlistview' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-objectlistview.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
    **/
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-objectlistview.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-objectlistview.placeholder'));
      }
    }),

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Flag for 'flexberry-objectlistview' component 'tableStriped' property.
       @property tableStriped
      @type Boolean
     */
    tableStriped: true,

    /**
      Flag for 'flexberry-objectlistview' component 'allowColumnResize' property.
       @property allowColumnResize
      @type Boolean
     */
    allowColumnResize: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'createNewButton' mode or not.
       @property createNewButton
      @type Boolean
     */
    createNewButton: false,

    /**
      Flag for 'flexberry-objectlistview' component 'deleteButton' property.
       @property deleteButton
      @type Boolean
     */
    deleteButton: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'enableFilters' mode or not.
       @property enableFilters
      @type Boolean
     */
    enableFilters: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'filterButton' mode or not.
       @property filterButton
      @type Boolean
     */
    filterButton: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'refreshButton' mode or not.
       @property refreshButton
      @type Boolean
     */
    refreshButton: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showCheckBoxInRow' mode or not.
       @property showCheckBoxInRow
      @type Boolean
     */
    showCheckBoxInRow: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteButtonInRow' mode or not.
       @property showDeleteButtonInRow
      @type Boolean
     */
    showDeleteButtonInRow: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showEditMenuItemInRow' mode or not.
       @property showEditMenuItemInRow
      @type Boolean
     */
    showEditMenuItemInRow: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'showDeleteMenuItemInRow' mode or not.
       @property showDeleteMenuItemInRow
      @type Boolean
     */
    showDeleteMenuItemInRow: false,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'rowClickable' mode or not.
       @property rowClickable
      @type Boolean
     */
    rowClickable: true,

    /**
      Flag: indicates whether 'flexberry-objectlistview' component is in 'orderable' mode or not.
       @property orderable
      @type Boolean
     */
    orderable: true,

    /**
      ext for 'flexberry-objectlistview' component 'singleColumnHeaderTitle' property.
       @property singleColumnHeaderTitle
      @type String
     */
    singleColumnHeaderTitle: undefined,

    /**
      Current records.
       @property _records
      @type Object[]
      @protected
      @readOnly
    */
    records: [],

    /**
      Template text for 'flexberry-objectlistview' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-objectlistview<br>' + '  componentName=\"SuggestionsObjectListView\"<br>' + '  colsConfigButton=true<br>' + '  content=model<br>' + '  modelName=\"ember-flexberry-dummy-suggestion\"<br>' + '  editFormRoute=\"ember-flexberry-dummy-suggestion\"<br>' + '  modelProjection=projection<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  tableStriped=tableStriped<br>' + '  allowColumnResize=allowColumnResize<br>' + '  createNewButton=createNewButton<br>' + '  deleteButton=deleteButton<br>' + '  enableFilters=enableFilters<br>' + '  filters=filters<br>' + '  applyFilters=(action "applyFilters")<br>' + '  resetFilters=(action "resetFilters")<br>' + '  refreshButton=refreshButton<br>' + '  filterButton=filterButton<br>' + '  showCheckBoxInRow=showCheckBoxInRow<br>' + '  showDeleteButtonInRow=showDeleteButtonInRow<br>' + '  showEditMenuItemInRow=showEditMenuItemInRow<br>' + '  showDeleteMenuItemInRow=showDeleteMenuItemInRow<br>' + '  rowClickable=rowClickable<br>' + '  orderable=orderable<br>' + '  filterByAnyMatch=(action \"filterByAnyMatch\"")<br>' + '  filterText=filter<br>' + '  sorting=computedSorting<br>' + '  sortByColumn=(action \"sortByColumn\")<br>' + '  addColumnToSorting=(action \"addColumnToSorting\")<br>' + '  pages=pages<br>' + '  perPageValue=perPageValue<br>' + '  perPageValues=perPageValues<br>' + '  hasPreviousPage=hasPreviousPage<br>' + '  hasNextPage=hasNextPage<br>' + '  previousPage=(action \"previousPage\")<br>' + '  gotoPage=(action \"gotoPage\")<br>' + '  nextPage=(action \"nextPage\")<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'componentName',
        settingType: 'string',
        settingValue: 'SuggestionsObjectListView',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'colsConfigButton',
        settingType: 'boolean',
        settingValue: true,
        settingDefaultValue: true,
        bindedControllerPropertieName: 'colsConfigButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'content',
        settingType: 'hasManyArray',
        settingValue: this.get('model'),
        settingDefaultValue: null,
        settingIsWithoutUI: true,
        bindedControllerPropertieName: 'model'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelProjection',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_projectionsNames'),
        settingDefaultValue: null,
        bindedControllerPropertieName: '_projectionName',
        bindedControllerPropertieDisplayName: 'projection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'modelName',
        settingType: 'string',
        settingValue: 'ember-flexberry-dummy-suggestion',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-objectlistview.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'tableStriped',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'tableStriped'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'allowColumnResize',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'allowColumnResize'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'createNewButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'createNewButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'deleteButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'deleteButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'enableFilters',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'enableFilters'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'filterButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'filterButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'refreshButton',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'refreshButton'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showCheckBoxInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showCheckBoxInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteButtonInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteButtonInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showEditMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showEditMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'showDeleteMenuItemInRow',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'showDeleteMenuItemInRow'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'rowClickable',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'rowClickable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'orderable',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'orderable'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'singleColumnHeaderTitle',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'singleColumnHeaderTitle'
      });

      return componentSettingsMetadata;
    }),

    _enableFilters: _ember['default'].observer('enableFilters', function () {
      if (this.get('enableFilters')) {
        this.set('refreshButton', true);
      }
    })
  });
});
define('dummy/controllers/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example', ['exports', 'ember', 'ember-flexberry/controllers/list-form'], function (exports, _ember, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Property to count clicks on user button.
       @property clickCounter
      @type Number
      @default 1
     */
    clickCounter: 1,

    /**
      Property to show user message after click on user button.
       @property messageForUser
      @type String
     */
    messageForUser: undefined,

    /**
      Property to form array of special structures of custom user buttons.
       @property customButtons
      @type Array
     */
    customButtons: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');
      return [{
        buttonName: i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-button-name'),
        buttonAction: 'userButtonActionTest',
        buttonClasses: 'my-test-user-button test-click-button'
      }];
    }),

    actions: {
      /**
        Handler for click on custom user button.
         @method userButtonActionTest
       */
      userButtonActionTest: function userButtonActionTest() {
        var i18n = this.get('i18n');
        var clickCounter = this.get('clickCounter');
        this.set('clickCounter', clickCounter + 1);
        this.set('messageForUser', i18n.t('forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.custom-message').string + ' ' + clickCounter);
      }
    }
  });
});
define('dummy/controllers/components-examples/flexberry-simpledatetime/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Serialized model date.
       @property _serializedModelDate
      @type String
      @private
     */
    _serializedModelDate: undefined,

    /**
      Serialized min date.
       @property _serializedMinDate
      @type String
      @private
     */
    _serializedMinDate: undefined,

    /**
      Serialized max date.
       @property _serializedMaxDate
      @type String
      @private
     */
    _serializedMaxDate: undefined,

    /**
      Handles changes in serialized model date.
       @method _serializedModelDateDidChange
      @private
     */
    _serializedModelDateDidChange: _ember['default'].observer('_serializedModelDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedModelDate', 'model.date');
    }),

    /**
      Handles changes in min date.
       @method _serializedMinDateDidChange
      @private
     */
    _serializedMinDateDidChange: _ember['default'].observer('_serializedMinDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedMinDate', 'min');
    }),

    /**
      Handles changes in serialized max date.
       @method _serializedMaxDateDidChange
      @private
     */
    _serializedMaxDateDidChange: _ember['default'].observer('_serializedMaxDate', function () {
      _ember['default'].run.once(this, '_changeDateProperty', '_serializedMaxDate', 'max');
    }),

    /**
      Handles changes in model date.
       @method _modelDateDidChange
      @private
     */
    _modelDateDidChange: _ember['default'].observer('model.date', function () {
      _ember['default'].run.once(this, '_changeSerializedDateProperty', '_serializedModelDate', 'model.date');
    }),

    /**
      Handles changes in some of the serialized date properties.
       @method _changeDateProperty
      @param {String} serializedDatePropertyName Name of serialized date property.
      @param {Date} datePropertyName Name of date property which need to be parsed.
      @private
     */
    _changeDateProperty: function _changeDateProperty(serializedDatePropertyName, datePropertyName) {
      var serializedDate = this.get(serializedDatePropertyName);
      if (_ember['default'].typeOf(serializedDate) === 'undefined') {
        return;
      }

      if (serializedDate === '') {
        this.set(datePropertyName, null);
        return;
      }

      var momentDate = this.get('moment').moment(serializedDate);
      if (momentDate.isValid()) {
        this.set(datePropertyName, momentDate.toDate());
      } else {
        this.set(datePropertyName, new Date('invalid'));
      }
    },

    /**
      Handles changes in some of the date properties.
       @method _changeSerializedDateProperty
      @param {String} serializedDatePropertyName Name of serialized date property which need to be changed.
      @param {Date} datePropertyName Name of date property which contains value.
      @private
     */
    _changeSerializedDateProperty: function _changeSerializedDateProperty(serializedDatePropertyName, datePropertyName) {
      var date = this.get(datePropertyName);
      if (date === null || _ember['default'].typeOf(date) === 'undefined') {
        return;
      }

      var momentDate = this.get('moment').moment(date);
      if (momentDate.isValid()) {
        this.set(serializedDatePropertyName, momentDate.format('YYYY-MM-DDTHH:MM'));
      } else {
        this.set(serializedDatePropertyName, '' + new Date('invalid'));
      }
    },

    /**
     Minimum value of this component.
      @property min
     @type Date
     */
    min: undefined,
    /**
      Maximum value of this component.
      @property max
     @type Date
     */
    max: undefined,

    /**
      Flag: indicates whether 'flexberry-simpledatetime' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-simpledatetime' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-simpledatetime<br>' + '  type=\"datetime-local\"<br>' + '  value=model.date<br>' + '  min=min<br>' + '  max=max<br>' + '  readonly=readonly<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();

      componentSettingsMetadata.pushObject({
        settingName: 'type',
        settingType: 'string',
        settingValue: 'datetime-local',
        settingDefaultValue: undefined,
        settingIsWithoutUI: true
      });
      componentSettingsMetadata.pushObject({
        settingName: 'min',
        settingType: 'date',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: '_serializedMinDate',
        bindedControllerPropertieDisplayName: 'min'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'max',
        settingType: 'date',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: '_serializedMaxDate',
        bindedControllerPropertieDisplayName: 'max'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'date',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: '_serializedModelDate',
        bindedControllerPropertieDisplayName: 'model.date'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: 'false',
        bindedControllerPropertieName: 'readonly'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-textarea/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-textarea' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-textarea.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-textarea.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-textarea.placeholder'));
      }
    }),

    /**
      Possible selectionDirection values.
       @property _selectionDirections
      @type String[]
     */
    _selectionDirections: ['forward', 'backward', 'none'],

    /**
      Possible wrap values.
       @property _wrapValues
      @type String[]
     */
    _wrapValues: ['soft', 'hard', 'off'],

    /**
      Flag: indicates whether 'flexberry-textarea' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
      @default false
     */
    readonly: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component is required for complete or not.
       @property required
      @type Boolean
      @default false
     */
    required: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component is in 'disabled' mode or not.
       @property disabled
      @type Boolean
      @default false
     */
    disabled: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component should be autofocused on page open or not.
       @property autofocus
      @type Boolean
      @default false
     */
    autofocus: false,

    /**
      Flag: indicates whether 'flexberry-textarea' component is in 'spellcheck' mode or not.
       @property spellcheck
      @type Boolean
      @default true
     */
    spellcheck: true,

    /**
      Number of columns for 'textarea' element.
       @property cols
      @type Number
      @default 20
     */
    cols: 20,

    /**
      Number of rows for 'textarea' element.
       @property rows
      @type Number
      @default 8
     */
    rows: 8,

    /**
      Wrap value for 'textarea' element.
       @property wrap
      @type String
      @default 'soft'
     */
    wrap: 'soft',

    /**
      Template text for 'flexberry-textarea' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{textarea<br>' + '  value=model.text<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '  required=required<br>' + '  rows=rows<br>' + '  cols=cols<br>' + '  disabled=disabled<br>' + '  maxlength=maxlength<br>' + '  selectionStart=selectionStart<br>' + '  selectionEnd=selectionEnd<br>' + '  selectionDirection=selectionDirection<br>' + '  wrap=wrap<br>' + '  autofocus=autofocus<br>' + '  spellcheck=spellcheck<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.text'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-textarea.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['fluid input', 'mini input', 'huge input'],
        bindedControllerPropertieName: 'class'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'required',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'required'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'rows',
        settingType: 'number',
        settingDefaultValue: 8,
        bindedControllerPropertieName: 'rows'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'cols',
        settingType: 'number',
        settingDefaultValue: 20,
        bindedControllerPropertieName: 'cols'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'disabled',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'disabled'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'maxlength',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'maxlength'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'selectionStart',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'selectionStart'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'selectionEnd',
        settingType: 'number',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'selectionEnd'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'selectionDirection',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_selectionDirections'),
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'selectionDirection',
        bindedControllerPropertieDisplayName: 'selectionDirection'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'wrap',
        settingType: 'enumeration',
        settingAvailableItems: this.get('_wrapValues'),
        settingDefaultValue: 'soft',
        bindedControllerPropertieName: 'wrap',
        bindedControllerPropertieDisplayName: 'wrap'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'autofocus',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'autofocus'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'spellcheck',
        settingType: 'boolean',
        settingDefaultValue: true,
        bindedControllerPropertieName: 'spellcheck'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-textbox/settings-example', ['exports', 'ember', 'ember-i18n'], function (exports, _ember, _emberI18n) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-textbox' component 'placeholder' property.
       @property placeholder
      @type String
     */
    placeholder: (0, _emberI18n.translationMacro)('components.flexberry-textbox.placeholder'),
    /**
      Handles changes in placeholder.
       @method _placeholderChanged
      @private
     */
    _placeholderChanged: _ember['default'].observer('placeholder', function () {
      if (this.get('placeholder') === this.get('i18n').t('components.flexberry-textbox.placeholder').toString()) {
        this.set('placeholder', (0, _emberI18n.translationMacro)('components.flexberry-textbox.placeholder'));
      }
    }),
    /**
      Flag: indicates whether 'flexberry-textbox' component is in 'readonly' mode or not.
       @property readonly
      @type Boolean
     */
    readonly: false,

    /**
      Template text for 'flexberry-textbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{flexberry-textbox<br>' + '  value=model.text<br>' + '  placeholder=placeholder<br>' + '  readonly=readonly<br>' + '  class=class<br>' + '}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed('i18n.locale', function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'value',
        settingType: 'string',
        settingDefaultValue: undefined,
        bindedControllerPropertieName: 'model.text'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'placeholder',
        settingType: 'string',
        settingDefaultValue: this.get('i18n').t('components.flexberry-textbox.placeholder'),
        bindedControllerPropertieName: 'placeholder'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'readonly',
        settingType: 'boolean',
        settingDefaultValue: false,
        bindedControllerPropertieName: 'readonly'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'class',
        settingType: 'css',
        settingDefaultValue: '',
        settingAvailableItems: ['fluid input', 'transparent input', 'mini input', 'huge input', 'input error'],
        bindedControllerPropertieName: 'class'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/components-examples/flexberry-toggler/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
      Text for 'flexberry-togggler' component 'caption' property.
       @property caption
      @type String
     */
    caption: '',

    /**
      Text for 'flexberry-togggler' component 'expandedCaption' property.
       @property expandedCaption
      @type String
     */
    expandedCaption: null,

    /**
      Text for 'flexberry-togggler' component 'collapsedCaption' property.
       @property collapsedCaption
      @type String
     */
    collapsedCaption: null,

    /**
      Template text for 'flexberry-textbox' component.
       @property componentTemplateText
      @type String
     */
    componentTemplateText: new _ember['default'].Handlebars.SafeString('{{#flexberry-toggler<br>' + '  caption=caption<br>' + '  expandedCaption=expandedCaption<br>' + '  collapsedCaption=collapsedCaption<br>' + '}}<br>' + '  {{t "forms.components-examples.flexberry-toggler.settings-example.togglerContent"}}<br>' + '{{/flexberry-toggler}}'),

    /**
      Component settings metadata.
       @property componentSettingsMetadata
      @type Object[]
     */
    componentSettingsMetadata: _ember['default'].computed(function () {
      var componentSettingsMetadata = _ember['default'].A();
      componentSettingsMetadata.pushObject({
        settingName: 'caption',
        settingType: 'string',
        settingDefaultValue: '',
        bindedControllerPropertieName: 'caption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'expandedCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'expandedCaption'
      });
      componentSettingsMetadata.pushObject({
        settingName: 'collapsedCaption',
        settingType: 'string',
        settingDefaultValue: null,
        bindedControllerPropertieName: 'collapsedCaption'
      });

      return componentSettingsMetadata;
    })
  });
});
define('dummy/controllers/detail-edit-form', ['exports', 'ember-flexberry/controllers/detail-edit-form'], function (exports, _emberFlexberryControllersDetailEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersDetailEditForm['default'];
    }
  });
});
define('dummy/controllers/edit-form', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersEditForm['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-application-user-edit'], function (exports, _dummyControllersEmberFlexberryDummyApplicationUserEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummyApplicationUserEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'dummy/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _dummyMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_dummyMixinsEditFormControllerOperationsIndication['default'], {
    /**
     Route name for transition after close edit form.
      @property parentRoute
     @type String
     @default 'ember-flexberry-dummy-application-user-list'
    */
    parentRoute: 'ember-flexberry-dummy-application-user-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-application-user-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-application-user-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-comment-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-comment-edit'], function (exports, _dummyControllersEmberFlexberryDummyCommentEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummyCommentEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-comment-edit', ['exports', 'ember-flexberry/controllers/detail-edit-form', 'dummy/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersDetailEditForm, _dummyMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersDetailEditForm['default'].extend(_dummyMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo') {
        if (model.modelName === 'ember-flexberry-dummy-comment-vote' && bindingPath === 'applicationUser') {
          cellComponent.componentProperties = {
            projection: 'ApplicationUserL',
            displayAttributeName: 'name',
            title: 'Application user',
            relationName: 'applicationUser',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-localization-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-localization-edit'], function (exports, _dummyControllersEmberFlexberryDummyLocalizationEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummyLocalizationEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-localization-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'dummy/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _dummyMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_dummyMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-localization-list'
    */
    parentRoute: 'ember-flexberry-dummy-localization-list'
  });
});
define('dummy/controllers/ember-flexberry-dummy-localization-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-localization-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-localization-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-suggestion-edit'], function (exports, _dummyControllersEmberFlexberryDummySuggestionEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummySuggestionEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'dummy/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _dummyMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_dummyMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-list'
     */
    parentRoute: 'ember-flexberry-dummy-suggestion-list',

    /**
      Name of model.comments edit route.
       @property commentsEditRoute
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
     */
    commentsEditRoute: 'ember-flexberry-dummy-comment-edit',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo') {
        if (model.modelName === 'ember-flexberry-dummy-comment' && bindingPath === 'author') {
          cellComponent.componentProperties = {
            projection: 'ApplicationUserL',
            displayAttributeName: 'name',
            title: 'Author',
            relationName: 'author',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        } else if (model.modelName === 'ember-flexberry-dummy-vote' && bindingPath === 'applicationUser') {
          cellComponent.componentProperties = {
            projection: 'ApplicationUserL',
            displayAttributeName: 'name',
            title: 'Application user',
            relationName: 'applicationUser',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-edit'
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-edit/new', ['exports', 'dummy/controllers/ember-flexberry-dummy-suggestion-type-edit'], function (exports, _dummyControllersEmberFlexberryDummySuggestionTypeEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _dummyControllersEmberFlexberryDummySuggestionTypeEdit['default'];
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-edit', ['exports', 'ember-flexberry/controllers/edit-form', 'dummy/mixins/edit-form-controller-operations-indication'], function (exports, _emberFlexberryControllersEditForm, _dummyMixinsEditFormControllerOperationsIndication) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend(_dummyMixinsEditFormControllerOperationsIndication['default'], {
    /**
      Route name for transition after close edit form.
       @property parentRoute
      @type String
      @default 'ember-flexberry-dummy-application-user-list'
     */
    parentRoute: 'ember-flexberry-dummy-suggestion-type-list',

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo') {
        if (model.modelName === 'ember-flexberry-dummy-localized-suggestion-type' && bindingPath === 'localization') {
          cellComponent.componentProperties = {
            projection: 'LocalizationL',
            displayAttributeName: 'name',
            title: 'Localization',
            relationName: 'localization',
            choose: 'showLookupDialog',
            remove: 'removeLookupValue'
          };
        }
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/ember-flexberry-dummy-suggestion-type-list', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
     */
    editFormRoute: 'ember-flexberry-dummy-suggestion-type-edit'
  });
});
define('dummy/controllers/flexberry-file-view-dialog', ['exports', 'ember-flexberry/controllers/flexberry-file-view-dialog'], function (exports, _emberFlexberryControllersFlexberryFileViewDialog) {
  exports['default'] = _emberFlexberryControllersFlexberryFileViewDialog['default'];
});
define('dummy/controllers/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('dummy/controllers/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('dummy/controllers/integration-examples/edit-form/readonly-mode', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    /**
      Flag: indicates whether the form is in readonly mode or not.
       @property readonly
      @type Boolean
      @default true
     */
    readonly: true,

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {DS.Model} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
     */
    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);

      if (attr.kind === 'belongsTo' && bindingPath === 'master') {
        cellComponent.componentProperties = {
          projection: 'MasterL',
          displayAttributeName: 'text',
          title: 'Master',
          relationName: 'master',
          choose: 'showLookupDialog',
          remove: 'removeLookupValue'
        };
      }

      return cellComponent;
    }
  });
});
define('dummy/controllers/integration-examples/edit-form/validation', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({});
});
define('dummy/controllers/list-form', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersListForm['default'];
    }
  });
});
define('dummy/controllers/log-service-examples/settings-example', ['exports', 'ember', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _ember, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL) {
  exports['default'] = _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL['default'].extend({
    /**
      Object list view custom buttons, which will be used to imitate different log service events.
       @property objectListViewCustomButtons
      @type Object[]
    */
    objectListViewCustomButtons: _ember['default'].computed('i18n.locale', function () {
      return [{
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.throw-exception-button-caption'),
        buttonAction: 'onThrowExceptionButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.reject-rsvp-promise-button-caption'),
        buttonAction: 'onRejectRsvpPromiseButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-assert-button-caption'),
        buttonAction: 'onEmberAssertButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-error-button-caption'),
        buttonAction: 'onEmberLoggerErrorButtonClick',
        buttonClasses: 'small red'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-warn-button-caption'),
        buttonAction: 'onEmberLoggerWarnButtonClick',
        buttonClasses: 'small orange'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-deprecate-button-caption'),
        buttonAction: 'onEmberDeprecateButtonClick',
        buttonClasses: 'small yellow'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-log-button-caption'),
        buttonAction: 'onEmberLoggerLogButtonClick',
        buttonClasses: 'small green'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-info-button-caption'),
        buttonAction: 'onEmberLoggerInfoButtonClick',
        buttonClasses: 'small teal'
      }, {
        buttonName: this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-debug-button-caption'),
        buttonAction: 'onEmberLoggerDebugButtonClick',
        buttonClasses: 'small blue'
      }];
    }),

    actions: {
      /**
        Handles throw exception button click.
        Emulates exception thrown somewhere in application.
         @method actions.onThrowExceptionButtonClick
        @public
      */
      onThrowExceptionButtonClick: function onThrowExceptionButtonClick() {
        var _this = this;

        setTimeout(function () {
          _this.send('refreshList');
        }, 5000);
        throw new Error(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.throw-exception-button-message'));
      },

      /**
        Handles throw exception button click.
        Emulates exception thrown somewhere in application.
         @method actions.onRejectRsvpPromiseButtonClick
        @public
      */
      onRejectRsvpPromiseButtonClick: function onRejectRsvpPromiseButtonClick() {
        var _this2 = this;

        new _ember['default'].RSVP.Promise(function (resolve, reject) {
          setTimeout(function () {
            reject(_ember['default'].Logger.error(_this2._generateUniqueMessagePrefix() + _this2.get('i18n').t('forms.log-service-examples.settings-example.reject-rsvp-promise-button-message')));
          }, 0);
        })['catch'](function (error) {
          _this2.send('refreshList');
        });
      },

      /**
        Handles ember assert button click.
        Emulates failed Ember.assert call happened somewhere in application.
         @method actions.onEmberAssertButtonClick
        @public
      */
      onEmberAssertButtonClick: function onEmberAssertButtonClick() {
        var _this3 = this;

        setTimeout(function () {
          _this3.send('refreshList');
        }, 3000);
        _ember['default'].assert(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-assert-button-message'), false).then(function (result) {
          _this3.send('refreshList');
        });
      },

      /**
        Handles ember logger error button click.
        Emulates Ember.Logger.error call happened somewhere in application.
         @method actions.onEmberLoggerErrorButtonClick
        @public
      */
      onEmberLoggerErrorButtonClick: function onEmberLoggerErrorButtonClick() {
        var _this4 = this;

        _ember['default'].Logger.error(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-error-button-message')).then(function (result) {
          _this4.send('refreshList');
        });
      },

      /**
        Handles ember logger warn button click.
        Emulates Ember.Logger.warn call happened somewhere in application.
         @method actions.onEmberLoggerWarnButtonClick
        @public
      */
      onEmberLoggerWarnButtonClick: function onEmberLoggerWarnButtonClick() {
        var _this5 = this;

        _ember['default'].Logger.warn(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-warn-button-message')).then(function (result) {
          _this5.send('refreshList');
        });
      },

      /**
        Handles ember deprecate button click.
        Emulates Ember.deprecate call happened somewhere in application.
         @method actions.onEmberDeprecateButtonClick
        @public
      */
      onEmberDeprecateButtonClick: function onEmberDeprecateButtonClick() {
        _ember['default'].deprecate(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-deprecate-button-message'), false, { id: '0', until: '0' });
        this.send('refreshList');
      },

      /**
        Handles ember logger log button click.
        Emulates Ember.Logger.log call happened somewhere in application.
         @method actions.onEmberLoggerLogButtonClick
        @public
      */
      onEmberLoggerLogButtonClick: function onEmberLoggerLogButtonClick() {
        var _this6 = this;

        _ember['default'].Logger.log(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-log-button-message')).then(function (result) {
          _this6.send('refreshList');
        });
      },

      /**
        Handles ember logger info button click.
        Emulates Ember.Logger.info call happened somewhere in application.
         @method actions.onEmberLoggerInfoButtonClick
        @public
      */
      onEmberLoggerInfoButtonClick: function onEmberLoggerInfoButtonClick() {
        var _this7 = this;

        _ember['default'].Logger.info(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-info-button-message')).then(function (result) {
          _this7.send('refreshList');
        });
      },

      /**
        Handles ember logger debug button click.
        Emulates Ember.Logger.debug call happened somewhere in application.
         @method actions.onEmberLoggerDebugButtonClick
        @public
      */
      onEmberLoggerDebugButtonClick: function onEmberLoggerDebugButtonClick() {
        var _this8 = this;

        _ember['default'].Logger.debug(this._generateUniqueMessagePrefix() + this.get('i18n').t('forms.log-service-examples.settings-example.ember-logger-debug-button-message')).then(function (result) {
          _this8.send('refreshList');
        });
      }
    },

    /**
      Method to get type and attributes of a component,
      which will be embeded in object-list-view cell.
       @method getCellComponent.
      @param {Object} attr Attribute of projection property related to current table cell.
      @param {String} bindingPath Path to model property related to current table cell.
      @param {Object} modelClass Model class of data record related to current table row.
      @return {Object} Object containing name & properties of component, which will be used to render current table cell.
      { componentName: 'my-component',  componentProperties: { ... } }.
    */
    getCellComponent: function getCellComponent(attr, bindingPath, modelClass) {
      var cellComponent = this._super.apply(this, arguments);
      cellComponent.componentProperties = {
        dateFormat: 'DD.MM.YYYY, hh:mm:ss'
      };

      return cellComponent;
    },

    /**
      Generates unique message prefix to avoid possible lost of same messages.
      If several message have same content logging service send only first to avoid possible loop on error sending stage.
       @method _generateUniqueMessagePrefix
      @return {String} Unique message prefix.
      @private
    */
    _generateUniqueMessagePrefix: function _generateUniqueMessagePrefix() {
      return '№' + _ember['default'].generateGuid(null, '') + ': ';
    }
  });
});
define('dummy/controllers/lookup-dialog', ['exports', 'ember-flexberry/controllers/lookup-dialog'], function (exports, _emberFlexberryControllersLookupDialog) {
  exports['default'] = _emberFlexberryControllersLookupDialog['default'];
});
define('dummy/controllers/sitemap-node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      hideSidebar: function hideSidebar() {
        _ember['default'].$('.ui.sidebar').sidebar('hide');
      }
    }
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/colsconfig-dialog-content.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/colsconfig-dialog-content.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/colsconfig-dialog-content.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/colsconfig-dialog-content.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/colsconfig-dialog-content.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/colsconfig-dialog-content.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-base-component.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-base-component.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-base-component.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-base-component.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-base-component.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-base-component.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-checkbox.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-checkbox.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-checkbox.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-checkbox.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-checkbox.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-checkbox.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-datepicker.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-datepicker.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-datepicker.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-datepicker.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-datepicker.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-datepicker.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-dropdown.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-dropdown.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-dropdown.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-dropdown.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-dropdown.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-dropdown.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-field.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-field.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-field.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-field.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-field.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-field.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-file.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-file.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-file.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-file.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-file.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-file.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-groupedit.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-groupedit.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-groupedit.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-groupedit.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-groupedit.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-groupedit.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-lookup.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-lookup.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-lookup.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-lookup.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-lookup.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-lookup.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-menu.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-menu.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-menu.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-menu.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-menu.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-menu.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-menuitem.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-menuitem.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-menuitem.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-menuitem.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-menuitem.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-menuitem.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-objectlistview.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-objectlistview.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-objectlistview.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-objectlistview.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-objectlistview.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-objectlistview.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-simpledatetime.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-simpledatetime.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-simpledatetime.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-simpledatetime.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-simpledatetime.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-simpledatetime.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-textarea.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-textarea.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-textarea.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-textarea.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-textarea.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-textarea.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-textbox.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-textbox.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-textbox.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-textbox.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-textbox.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-textbox.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-toggler.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-toggler.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-toggler.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-toggler.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-toggler.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-toggler.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-validationmessage.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-validationmessage.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-validationmessage.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-validationmessage.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-validationmessage.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-validationmessage.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-validationsummary.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/flexberry-validationsummary.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/flexberry-validationsummary.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/flexberry-validationsummary.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/flexberry-validationsummary.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/flexberry-validationsummary.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/groupedit-toolbar.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/groupedit-toolbar.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/groupedit-toolbar.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/groupedit-toolbar.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/groupedit-toolbar.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/groupedit-toolbar.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/flexberry-file.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components/mobile');
  test('modules/ember-flexberry/components/mobile/flexberry-file.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/mobile/flexberry-file.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/flexberry-file.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/mobile/flexberry-file.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/mobile/flexberry-file.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/flexberry-groupedit.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components/mobile');
  test('modules/ember-flexberry/components/mobile/flexberry-groupedit.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/mobile/flexberry-groupedit.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/flexberry-groupedit.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/mobile/flexberry-groupedit.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/mobile/flexberry-groupedit.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/flexberry-objectlistview.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components/mobile');
  test('modules/ember-flexberry/components/mobile/flexberry-objectlistview.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/mobile/flexberry-objectlistview.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/flexberry-objectlistview.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/mobile/flexberry-objectlistview.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/mobile/flexberry-objectlistview.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/object-list-view-row.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components/mobile');
  test('modules/ember-flexberry/components/mobile/object-list-view-row.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/mobile/object-list-view-row.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/object-list-view-row.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/mobile/object-list-view-row.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/mobile/object-list-view-row.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/object-list-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components/mobile');
  test('modules/ember-flexberry/components/mobile/object-list-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/mobile/object-list-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/mobile/object-list-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/mobile/object-list-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/mobile/object-list-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/modal-dialog.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/modal-dialog.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/modal-dialog.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/modal-dialog.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/modal-dialog.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/modal-dialog.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-cell.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/object-list-view-cell.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/object-list-view-cell.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-cell.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/object-list-view-cell.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/object-list-view-cell.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-header-cell.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/object-list-view-header-cell.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/object-list-view-header-cell.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-header-cell.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/object-list-view-header-cell.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/object-list-view-header-cell.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-row.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/object-list-view-row.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/object-list-view-row.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-row.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/object-list-view-row.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/object-list-view-row.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-single-column-cell.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/object-list-view-single-column-cell.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/object-list-view-single-column-cell.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view-single-column-cell.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/object-list-view-single-column-cell.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/object-list-view-single-column-cell.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/object-list-view.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/object-list-view.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/object-list-view.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/object-list-view.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/object-list-view.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/olv-setconfigdialogbutton.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/olv-setconfigdialogbutton.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/olv-setconfigdialogbutton.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/olv-setconfigdialogbutton.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/olv-setconfigdialogbutton.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/olv-setconfigdialogbutton.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/olv-toolbar.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/olv-toolbar.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/olv-toolbar.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/olv-toolbar.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/olv-toolbar.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/olv-toolbar.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/ui-message.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/components');
  test('modules/ember-flexberry/components/ui-message.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/components/ui-message.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/components/ui-message.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/components/ui-message.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/components/ui-message.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/colsconfig-dialog.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/colsconfig-dialog.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/colsconfig-dialog.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/colsconfig-dialog.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/colsconfig-dialog.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/colsconfig-dialog.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/detail-edit-form.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/detail-edit-form.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/detail-edit-form.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/detail-edit-form.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/detail-edit-form.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/detail-edit-form.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/edit-form.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/edit-form.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/edit-form.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/edit-form.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/edit-form.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/edit-form.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/flexberry-file-view-dialog.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/flexberry-file-view-dialog.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/flexberry-file-view-dialog.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/flexberry-file-view-dialog.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/flexberry-file-view-dialog.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/flexberry-file-view-dialog.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/list-form.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/list-form.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/list-form.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/list-form.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/list-form.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/list-form.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/lookup-dialog.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/controllers');
  test('modules/ember-flexberry/controllers/lookup-dialog.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/controllers/lookup-dialog.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/controllers/lookup-dialog.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/controllers/lookup-dialog.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/controllers/lookup-dialog.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/helpers/flexberry-enum.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/helpers');
  test('modules/ember-flexberry/helpers/flexberry-enum.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/helpers/flexberry-enum.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/helpers/flexberry-enum.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/helpers/flexberry-enum.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/helpers/flexberry-enum.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/i18n.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/initializers');
  test('modules/ember-flexberry/initializers/i18n.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/initializers/i18n.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/i18n.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/initializers/i18n.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/initializers/i18n.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/log.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/initializers');
  test('modules/ember-flexberry/initializers/log.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/initializers/log.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/log.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/initializers/log.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/initializers/log.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/moment.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/initializers');
  test('modules/ember-flexberry/initializers/moment.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/initializers/moment.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/moment.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/initializers/moment.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/initializers/moment.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/user-settings.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/initializers');
  test('modules/ember-flexberry/initializers/user-settings.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/initializers/user-settings.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/initializers/user-settings.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/initializers/user-settings.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/initializers/user-settings.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/device.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/instance-initializers');
  test('modules/ember-flexberry/instance-initializers/device.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/instance-initializers/device.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/device.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/instance-initializers/device.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/instance-initializers/device.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/i18n.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/instance-initializers');
  test('modules/ember-flexberry/instance-initializers/i18n.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/instance-initializers/i18n.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/i18n.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/instance-initializers/i18n.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/instance-initializers/i18n.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/log.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/instance-initializers');
  test('modules/ember-flexberry/instance-initializers/log.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/instance-initializers/log.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/log.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/instance-initializers/log.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/instance-initializers/log.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/moment.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/instance-initializers');
  test('modules/ember-flexberry/instance-initializers/moment.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/instance-initializers/moment.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/instance-initializers/moment.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/instance-initializers/moment.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/instance-initializers/moment.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/locales/en/translations.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/locales/en');
  test('modules/ember-flexberry/locales/en/translations.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/locales/en/translations.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/locales/en/translations.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/locales/en/translations.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/locales/en/translations.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/locales/ru/translations.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/locales/ru');
  test('modules/ember-flexberry/locales/ru/translations.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/locales/ru/translations.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/locales/ru/translations.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/locales/ru/translations.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/locales/ru/translations.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/colsconfig-dialog-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/colsconfig-dialog-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/colsconfig-dialog-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/colsconfig-dialog-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/colsconfig-dialog-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/colsconfig-dialog-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/errorable-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/errorable-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/errorable-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/errorable-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/errorable-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/errorable-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-file-compatible-component.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-file-compatible-component.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-file-compatible-component.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-file-compatible-component.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-file-compatible-component.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-file-compatible-component.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-file-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-file-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-file-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-file-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-file-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-file-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-groupedit-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-groupedit-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-groupedit-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-groupedit-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-groupedit-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-groupedit-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-lookup-compatible-component.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-lookup-compatible-component.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-lookup-compatible-component.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-lookup-compatible-component.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-lookup-compatible-component.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-lookup-compatible-component.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-lookup.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-lookup.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-lookup.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-lookup.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-lookup.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-lookup.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-objectlistview-hierarchical-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-objectlistview-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/flexberry-objectlistview-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/flexberry-objectlistview-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/flexberry-objectlistview-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/flexberry-objectlistview-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/flexberry-objectlistview-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/limited-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/limited-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/limited-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/limited-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/limited-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/limited-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/limited-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/limited-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/limited-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/limited-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/limited-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/limited-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/modal-application-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/modal-application-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/modal-application-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/modal-application-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/modal-application-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/modal-application-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/olv-toolbar-mixin.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/olv-toolbar-mixin.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/olv-toolbar-mixin.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/olv-toolbar-mixin.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/olv-toolbar-mixin.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/olv-toolbar-mixin.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/paginated-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/paginated-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/paginated-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/paginated-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/paginated-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/paginated-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/paginated-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/paginated-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/paginated-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/paginated-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/paginated-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/paginated-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/reload-list-mixin.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/reload-list-mixin.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/reload-list-mixin.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/reload-list-mixin.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/reload-list-mixin.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/reload-list-mixin.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/sortable-column.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/sortable-column.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/sortable-column.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/sortable-column.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/sortable-column.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/sortable-column.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/sortable-controller.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/sortable-controller.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/sortable-controller.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/sortable-controller.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/sortable-controller.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/sortable-controller.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/sortable-route.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/mixins');
  test('modules/ember-flexberry/mixins/sortable-route.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/mixins/sortable-route.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/mixins/sortable-route.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/mixins/sortable-route.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/mixins/sortable-route.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/models/base.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/models');
  test('modules/ember-flexberry/models/base.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/models/base.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/models/base.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/models/base.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/models/base.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/models');
  test('modules/ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/models/new-platform-flexberry-flexberry-user-setting.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/models');
  test('modules/ember-flexberry/models/new-platform-flexberry-flexberry-user-setting.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/models/new-platform-flexberry-flexberry-user-setting.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/models/new-platform-flexberry-flexberry-user-setting.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/models/new-platform-flexberry-flexberry-user-setting.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/models/new-platform-flexberry-flexberry-user-setting.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/objects/validation-data.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/objects');
  test('modules/ember-flexberry/objects/validation-data.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/objects/validation-data.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/objects/validation-data.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/objects/validation-data.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/objects/validation-data.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/resolver.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry');
  test('modules/ember-flexberry/resolver.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/resolver.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/resolver.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/resolver.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/resolver.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/edit-form-new.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/routes');
  test('modules/ember-flexberry/routes/edit-form-new.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/routes/edit-form-new.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/edit-form-new.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/routes/edit-form-new.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/routes/edit-form-new.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/edit-form.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/routes');
  test('modules/ember-flexberry/routes/edit-form.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/routes/edit-form.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/edit-form.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/routes/edit-form.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/routes/edit-form.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/routes');
  test('modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/routes');
  test('modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/list-form.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/routes');
  test('modules/ember-flexberry/routes/list-form.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/routes/list-form.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/list-form.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/routes/list-form.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/routes/list-form.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/projected-model-form.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/routes');
  test('modules/ember-flexberry/routes/projected-model-form.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/routes/projected-model-form.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/routes/projected-model-form.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/routes/projected-model-form.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/routes/projected-model-form.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/serializers');
  test('modules/ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/serializers');
  test('modules/ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/cols-config-menu.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/services');
  test('modules/ember-flexberry/services/cols-config-menu.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/services/cols-config-menu.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/cols-config-menu.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/services/cols-config-menu.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/services/cols-config-menu.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/detail-interaction.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/services');
  test('modules/ember-flexberry/services/detail-interaction.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/services/detail-interaction.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/detail-interaction.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/services/detail-interaction.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/services/detail-interaction.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/device.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/services');
  test('modules/ember-flexberry/services/device.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/services/device.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/device.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/services/device.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/services/device.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/log.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/services');
  test('modules/ember-flexberry/services/log.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/services/log.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/log.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/services/log.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/services/log.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/objectlistview-events.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/services');
  test('modules/ember-flexberry/services/objectlistview-events.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/services/objectlistview-events.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/objectlistview-events.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/services/objectlistview-events.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/services/objectlistview-events.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/user-settings.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/services');
  test('modules/ember-flexberry/services/user-settings.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/services/user-settings.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/services/user-settings.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/services/user-settings.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/services/user-settings.js should pass jshint.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/validators/local/datetime.jscs-test', ['exports'], function (exports) {
  module('JSCS - modules/ember-flexberry/validators/local');
  test('modules/ember-flexberry/validators/local/datetime.js should pass jscs', function () {
    ok(true, 'modules/ember-flexberry/validators/local/datetime.js should pass jscs.');
  });
});
define('dummy/ember-flexberry/tests/modules/ember-flexberry/validators/local/datetime.jshint', ['exports'], function (exports) {
  QUnit.module('JSHint - modules/ember-flexberry/validators/local/datetime.js');
  QUnit.test('should pass jshint', function (assert) {
    assert.expect(1);
    assert.ok(true, 'modules/ember-flexberry/validators/local/datetime.js should pass jshint.');
  });
});
define('dummy/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/enums/components-examples/flexberry-dropdown/empty-value-example/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: '',
    Value2: 'Enum value №1',
    Value3: 'Enum value №2',
    Value4: 'Enum value №3'
  });
});
define('dummy/enums/components-examples/flexberry-dropdown/settings-example/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3',
    Value4: 'Enum value №4',
    Value5: 'Enum value №5',
    Value6: 'Enum value №6',
    Value7: 'Enum value №7',
    Value8: 'Enum value №8',
    Value9: 'Enum value №9'
  });
});
define('dummy/enums/components-examples/flexberry-groupedit/shared/detail-enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/enums/ember-flexberry-dummy-gender', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Male: 'Male',
    Female: 'Female',
    Unknown: 'Unknown'
  });
});
define('dummy/enums/ember-flexberry-dummy-vote-type', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Like: 'Like',
    Dislike: 'Dislike'
  });
});
define('dummy/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('dummy/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('dummy/enums/integration-examples/edit-form/readonly-mode/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/enums/integration-examples/edit-form/validation/enumeration', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Value1: 'Enum value №1',
    Value2: 'Enum value №2',
    Value3: 'Enum value №3'
  });
});
define('dummy/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/flexberry-enum', ['exports', 'ember-flexberry/helpers/flexberry-enum'], function (exports, _emberFlexberryHelpersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersFlexberryEnum['default'];
    }
  });
});
define('dummy/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/moment-calendar', ['exports', 'ember-moment/helpers/moment-calendar'], function (exports, _emberMomentHelpersMomentCalendar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar['default'];
    }
  });
  Object.defineProperty(exports, 'momentCalendar', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar.momentCalendar;
    }
  });
});
define('dummy/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('dummy/helpers/moment-format', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentFormat) {
  exports['default'] = _emberMomentHelpersMomentFormat['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/moment-from-now', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentFromNow) {
  exports['default'] = _emberMomentHelpersMomentFromNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/moment-to-now', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentHelpersMomentToNow) {
  exports['default'] = _emberMomentHelpersMomentToNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_dummyConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('dummy/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('dummy/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('dummy/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('dummy/helpers/t', ['exports', 'ember-i18n/helper'], function (exports, _emberI18nHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nHelper['default'];
    }
  });
});
define('dummy/helpers/to-safe-string', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  /**
    Calls [Ember.Handlebars.SafeString] with the provided string.
    This is a convenient way to render JS variables values and HTML-tags.
  
    @method toSafeString
    @for Ember.Templates.helpers
    @param {*} value Value to be formatted as safe string.
    @see {Ember.Handlebars.SafeString}
    @public
  */
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var value = _ref2[0];

      return new _ember['default'].Handlebars.SafeString(value);
    }
  });
});
define('dummy/helpers/to-string', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  /**
    Casts given value into string.
    This is a convenient way to render JS variables values as their string representations.
  
    @method toString
    @for Ember.Templates.helpers
    @param {*} value Value to be casted into string.
    @public
  */
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var value = _ref2[0];

      return '' + value;
    }
  });
});
define('dummy/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('dummy/initializers/allow-link-action', ['exports', 'ember-link-action/initializers/allow-link-action'], function (exports, _emberLinkActionInitializersAllowLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction.initialize;
    }
  });
});
define('dummy/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'dummy/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _dummyConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_dummyConfigEnvironment['default'].APP.name, _dummyConfigEnvironment['default'].APP.version)
  };
});
define('dummy/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('dummy/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.ArrayController.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define("dummy/initializers/ember-i18n", ["exports", "dummy/instance-initializers/ember-i18n"], function (exports, _dummyInstanceInitializersEmberI18n) {
  exports["default"] = {
    name: _dummyInstanceInitializersEmberI18n["default"].name,

    initialize: function initialize() {
      var application = arguments[1] || arguments[0]; // depending on Ember version
      if (application.instanceInitializer) {
        return;
      }

      _dummyInstanceInitializersEmberI18n["default"].initialize(application);
    }
  };
});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_dummyConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _dummyConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_dummyConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('dummy/initializers/flexberry-enum', ['exports', 'ember-flexberry-data/initializers/flexberry-enum'], function (exports, _emberFlexberryDataInitializersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum.initialize;
    }
  });
});
define('dummy/initializers/i18n', ['exports', 'ember-flexberry/initializers/i18n'], function (exports, _emberFlexberryInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n.initialize;
    }
  });
});
define('dummy/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/local-store', ['exports', 'ember-flexberry-data/initializers/local-store'], function (exports, _emberFlexberryDataInitializersLocalStore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore.initialize;
    }
  });
});
define('dummy/initializers/log', ['exports', 'ember-flexberry/initializers/log'], function (exports, _emberFlexberryInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog.initialize;
    }
  });
});
define('dummy/initializers/moment', ['exports', 'ember-flexberry/initializers/moment'], function (exports, _emberFlexberryInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment.initialize;
    }
  });
});
define('dummy/initializers/offline-globals', ['exports', 'ember-flexberry-data/initializers/offline-globals'], function (exports, _emberFlexberryDataInitializersOfflineGlobals) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals.initialize;
    }
  });
});
define('dummy/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/syncer', ['exports', 'ember-flexberry-data/initializers/syncer'], function (exports, _emberFlexberryDataInitializersSyncer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersSyncer['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersSyncer.initialize;
    }
  });
});
define('dummy/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('dummy/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('dummy/initializers/user-settings', ['exports', 'ember-flexberry/initializers/user-settings'], function (exports, _emberFlexberryInitializersUserSettings) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings.initialize;
    }
  });
});
define('dummy/instance-initializers/device', ['exports', 'ember-flexberry/instance-initializers/device'], function (exports, _emberFlexberryInstanceInitializersDevice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice.initialize;
    }
  });
});
define("dummy/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define("dummy/instance-initializers/ember-i18n", ["exports", "ember", "ember-i18n/stream", "ember-i18n/legacy-helper", "dummy/config/environment"], function (exports, _ember, _emberI18nStream, _emberI18nLegacyHelper, _dummyConfigEnvironment) {
  exports["default"] = {
    name: 'ember-i18n',

    initialize: function initialize(appOrAppInstance) {
      if (_emberI18nLegacyHelper["default"] != null) {
        (function () {
          // Used for Ember < 1.13
          var i18n = appOrAppInstance.container.lookup('service:i18n');

          i18n.localeStream = new _emberI18nStream["default"](function () {
            return i18n.get('locale');
          });

          _ember["default"].addObserver(i18n, 'locale', i18n, function () {
            this.localeStream.value(); // force the stream to be dirty
            this.localeStream.notify();
          });

          _ember["default"].HTMLBars._registerHelper('t', _emberI18nLegacyHelper["default"]);
        })();
      }
    }
  };
});
define('dummy/instance-initializers/i18n', ['exports', 'ember-flexberry/instance-initializers/moment'], function (exports, _emberFlexberryInstanceInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment.initialize;
    }
  });
});
define('dummy/instance-initializers/log', ['exports', 'ember-flexberry/instance-initializers/log'], function (exports, _emberFlexberryInstanceInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog.initialize;
    }
  });
});
define('dummy/instance-initializers/moment', ['exports', 'ember-flexberry/instance-initializers/i18n'], function (exports, _emberFlexberryInstanceInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n.initialize;
    }
  });
});
define('dummy/locales/en/translations', ['exports', 'ember', 'ember-flexberry/locales/en/translations'], function (exports, _ember, _emberFlexberryLocalesEnTranslations) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesEnTranslations['default']);

  _ember['default'].$.extend(true, translations, {
    'models': {
      'ember-flexberry-dummy-suggestion': {
        'projections': {
          'SuggestionL': {
            'address': {
              'caption': 'Address'
            },
            'text': {
              'caption': 'Text'
            },
            'date': {
              'caption': 'Date'
            },
            'votes': {
              'caption': 'Votes'
            },
            'author': {
              'caption': 'Author',
              'eMail': {
                'caption': 'Email'
              }
            }
          },
          'SuggestionE': {
            'userVotes': {
              'voteType': {
                'caption': 'Vote Type'
              },
              'applicationUser': {
                'caption': 'Application User',
                'eMail': {
                  'caption': 'Email'
                }
              }
            }
          }
        }
      }
    },

    'application-name': 'Test stand for ember-flexberry',

    'forms': {
      'loading': {
        'spinner-caption': 'Loading stuff, please have a cold beer...'
      },
      'index': {
        'greeting': 'Welcome to ember-flexberry test stand!'
      },

      'application': {
        'header': {
          'menu': {
            'sitemap-button': {
              'caption': '',
              'title': 'Menu'
            },
            'user-settings-service-checkbox': {
              'caption': 'Use service to save user settings'
            },
            'language-dropdown': {
              'caption': 'Application language',
              'placeholder': 'Choose language'
            }
          }
        },

        'footer': {
          'application-name': 'Test stand for ember-flexberry',
          'application-version': {
            'caption': 'Addon version {{version}}',
            'title': 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          }
        },

        'sitemap': {
          'application-name': {
            'caption': 'Test stand for ember-flexberry',
            'title': ''
          },
          'application-version': {
            'caption': 'Addon version {{version}}',
            'title': 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          },
          'index': {
            'caption': 'Home',
            'title': ''
          },
          'application': {
            'caption': 'Application',
            'title': '',
            'application-users': {
              'caption': 'Application users',
              'title': ''
            },
            'localizations': {
              'caption': 'Localizations',
              'title': ''
            },
            'suggestion-types': {
              'caption': 'Suggestion types',
              'title': ''
            },
            'suggestions': {
              'caption': 'Suggestions',
              'title': ''
            }
          },
          'log-service-examples': {
            'caption': 'Log service',
            'title': '',
            'application-log': {
              'caption': 'Application log',
              'title': ''
            },
            'settings-example': {
              'caption': 'Settings example',
              'title': ''
            }
          },
          'components-examples': {
            'caption': 'Components examples',
            'title': '',
            'flexberry-checkbox': {
              'caption': 'flexberry-checkbox',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-datepicker': {
              'caption': 'flexberry-datepicker',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-dropdown': {
              'caption': 'flexberry-dropdown',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'conditional-render-example': {
                'caption': 'Conditional render example',
                'title': ''
              },
              'empty-value-example': {
                'caption': 'Example dropdown with empty value',
                'title': ''
              },
              'items-example': {
                'caption': 'Example values of the items',
                'title': ''
              }
            },
            'flexberry-field': {
              'caption': 'flexberry-field',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-file': {
              'caption': 'flexberry-file',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-groupedit': {
              'caption': 'flexberry-groupedit',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'model-update-example': {
                'caption': 'Model update example',
                'title': ''
              }
            },
            'flexberry-lookup': {
              'caption': 'flexberry-lookup',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'customizing-window-example': {
                'caption': 'Window customization',
                'title': ''
              },
              'limit-function-example': {
                'caption': 'Limit function example',
                'title': ''
              },
              'lookup-block-form-example': {
                'caption': 'Lookup block form example',
                'title': ''
              },
              'lookup-in-modal': {
                'caption': 'Lookup in modal window',
                'title': ''
              },
              'dropdown-mode-example': {
                'caption': 'Dropdown mode example',
                'title': ''
              }
            },
            'flexberry-menu': {
              'caption': 'flexberry-menu',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-objectlistview': {
              'caption': 'flexberry-objectlistview',
              'title': '',
              'limit-function-example': {
                'caption': 'Limit function example',
                'title': ''
              },
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              },
              'toolbar-custom-buttons-example': {
                'caption': 'Custom buttons on toolbar',
                'title': ''
              },
              'on-edit-form': {
                'caption': 'Placement on edit form',
                'title': ''
              },
              'custom-filter': {
                'caption': 'Custom filter',
                'title': ''
              },
              'configurate-rows': {
                'caption': 'Configurate rows',
                'title': ''
              }
            },
            'flexberry-simpledatetime': {
              'caption': 'flexberry-simpledatetime',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-textarea': {
              'caption': 'flexberry-textarea',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-textbox': {
              'caption': 'flexberry-textbox',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            },
            'flexberry-toggler': {
              'caption': 'flexberry-toggler',
              'title': '',
              'settings-example': {
                'caption': 'Settings example',
                'title': ''
              }
            }
          },
          'integration-examples': {
            'caption': 'Integration examples',
            'title': '',
            'edit-form': {
              'caption': 'Edit form',
              'title': '',
              'readonly-mode': {
                'caption': 'Readonly mode',
                'title': ''
              },
              'validation': {
                'caption': 'Validation',
                'title': ''
              }
            }
          }
        }
      },

      'edit-form': {
        'save-success-message-caption': 'Save operation succeed',
        'save-success-message': 'Object saved',
        'save-error-message-caption': 'Save operation failed',
        'delete-success-message-caption': 'Delete operation succeed',
        'delete-success-message': 'Object deleted',
        'delete-error-message-caption': 'Delete operation failed'
      },

      'ember-flexberry-dummy-application-user-edit': {
        'caption': 'Application user',
        'name-caption': 'Name',
        'eMail-caption': 'E-Mail',
        'phone1-caption': 'Phone1',
        'phone2-caption': 'Phone2',
        'phone3-caption': 'Phone3',
        'activated-caption': 'Activated',
        'vK-caption': 'VK',
        'facebook-caption': 'Facebook',
        'twitter-caption': 'Twitter',
        'birthday-caption': 'Birthday',
        'gender-caption': 'Gender',
        'vip-caption': 'VIP',
        'karma-caption': 'Karma',
        'name-validation-message-caption': 'Name is required',
        'eMail-validation-message-caption': 'E-Mail is required'
      },

      'ember-flexberry-dummy-comment-edit': {
        'caption': 'Comment',
        'text-caption': 'Text',
        'votes-caption': 'Votes',
        'moderated-caption': 'Moderated',
        'author-caption': 'Author',
        'userVotes-caption': 'User votes',
        'date-caption': 'Date',
        'author-validation-message-caption': 'Author is required'
      },

      'ember-flexberry-dummy-localization-edit': {
        'caption': 'Localization',
        'name-caption': 'Name',
        'name-validation-message-caption': 'Name is required'
      },

      'ember-flexberry-dummy-suggestion-edit': {
        'caption': 'Suggestion',
        'address-caption': 'Address',
        'text-caption': 'Text',
        'date-caption': 'Date',
        'votes-caption': 'Votes',
        'moderated-caption': 'Moderated',
        'type-caption': 'Type',
        'author-caption': 'Author',
        'editor1-caption': 'Editor',
        'files-caption': 'Files',
        'userVotes-caption': 'User votes',
        'comments-caption': 'Comments',
        'type-validation-message-caption': 'Type is required',
        'author-validation-message-caption': 'Author is required',
        'editor-validation-message-caption': 'Editor is required'
      },

      'ember-flexberry-dummy-suggestion-type-edit': {
        'caption': 'Suggestion type',
        'name-caption': 'Name',
        'moderated-caption': 'Moderated',
        'parent-caption': 'Parent',
        'localized-types-caption': 'Localized types',
        'name-validation-message-caption': 'Name is required'
      },

      'ember-flexberry-dummy-application-user-list': {
        'caption': 'Application users'
      },

      'ember-flexberry-dummy-localization-list': {
        'caption': 'Localizations'
      },

      'ember-flexberry-dummy-suggestion-list': {
        'caption': 'Suggestions'
      },

      'ember-flexberry-dummy-suggestion-type-list': {
        'caption': 'Suggestion types'
      },

      'log-service-examples': {
        'settings-example': {
          'caption': 'Log service. Settings example',
          'setting-column-header-caption': 'Log service setting',
          'settings-value-column-header-caption': 'Setting current value',
          'throw-exception-button-caption': 'Throw exception',
          'reject-rsvp-promise-button-caption': 'Reject promise',
          'ember-assert-button-caption': 'assert',
          'ember-logger-error-button-caption': 'Error',
          'ember-logger-warn-button-caption': 'Warn',
          'ember-deprecate-button-caption': 'Deprecate',
          'ember-logger-log-button-caption': 'Log',
          'ember-logger-info-button-caption': 'Info',
          'ember-logger-debug-button-caption': 'Debug',
          'throw-exception-button-message': 'Exception thrown',
          'reject-rsvp-promise-button-message': 'Promise rejected',
          'ember-assert-button-message': 'Ember.assert called',
          'ember-logger-error-button-message': 'Ember.Logger.error called',
          'ember-logger-warn-button-message': 'Ember.Logger.warn called',
          'ember-deprecate-button-message': 'Ember.deprecate called',
          'ember-logger-log-button-message': 'Ember.Logger.log called',
          'ember-logger-info-button-message': 'Ember.logger.info called',
          'ember-logger-debug-button-message': 'Ember.Logger.debug called'
        }
      },

      'components-examples': {
        'flexberry-checkbox': {
          'settings-example': {
            'caption': 'Flexberry-checkbox. Settings example'
          }
        },
        'flexberry-datepicker': {
          'settings-example': {
            'caption': 'Flexberry-datepicker. Settings example'
          }
        },
        'flexberry-dropdown': {
          'settings-example': {
            'caption': 'Flexberry-dropdown. Settings example'
          },
          'conditional-render-example': {
            'caption': 'Flexberry-dropdown. Conditional render example',
            'info-caption': 'Use case description',
            'info-message': 'The page template looks like following:' + '{{pageTemplate}}' + 'So, once the value is selected, the component will be rendered as &lt;span&gt;selected value&lt;/span&gt;,<br>' + 'after that check browser\'s console, it must be free from \"Semantic-UI\" and other errors.'
          },
          'empty-value-example': {
            'caption': 'Flexberry-dropdown. Example dropdown with empty value',
            'message': 'When you open the form in the Dropdown should not be empty. Should be: Enum value №2.',
            'enumeration-caption': 'Dropdown with empty value'
          },
          'items-example': {
            'caption': 'Flexberry-dropdown. Example values of the items',
            'checkbox-caption': 'use the itemsObject'
          }
        },
        'flexberry-field': {
          'settings-example': {
            'caption': 'Flexberry-field. Settings example'
          }
        },
        'flexberry-file': {
          'settings-example': {
            'caption': 'Flexberry-file. Settings example'
          }
        },
        'flexberry-groupedit': {
          'settings-example': {
            'caption': 'Flexberry-groupedit. Settings example'
          },
          'model-update-example': {
            'caption': 'Flexberry-groupedit. Model update example',
            'addDetailButton': 'Add detail',
            'removeDetailButton': 'Remove detail'
          }
        },
        'flexberry-lookup': {
          'settings-example': {
            'caption': 'Flexberry-lookup. Settings example'
          },
          'customizing-window-example': {
            'caption': 'Flexberry-lookup. Window customization',
            'titleLookup': 'Master'
          },
          'limit-function-example': {
            'caption': 'Flexberry-lookup. Limit function example',
            'titleLookup': 'Master'
          },
          'lookup-block-form-example': {
            'caption': 'Flexberry-lookup. Lookup block form example',
            'message': 'This test only works on the mobile site. To start a mobile version should be:',
            'paragraph1': 'Go to developer mode (press "F12").',
            'paragraph2': 'Enable mobile site (press "Ctrl + Shift + M" in Chrome and Firefox)',
            'paragraph3': 'Refresh page (press "F5")'
          },
          'lookup-in-modal': {
            'caption': 'Flexberry-lookup. Lookup in modal window',
            'captionModal': 'Custom modal window №1',
            'captionModalDouble': 'Custom modal window №2',
            'buttonModal': 'Modal window №1',
            'buttonModalDouble': 'Modal window №2',
            'buttonClose': 'Close'
          },
          'dropdown-mode-example': {
            'caption': 'Flexberry-lookup. Dropdown mode example'
          }
        },
        'flexberry-menu': {
          'settings-example': {
            'caption': 'Flexberry-menu. Settings example',
            'titleIcon1': 'Left side aligned icon',
            'titleIcon2': 'Right side aligned icon',
            'titleIcon3': 'Submenu'
          }
        },
        'flexberry-objectlistview': {
          'limit-function-example': {
            'caption': 'Flexberry-objectlistview. Limit function example'
          },
          'settings-example': {
            'caption': 'Flexberry-objectlistview. Settings example'
          },
          'toolbar-custom-buttons-example': {
            'caption': 'Flexberry-objectlistview. Custom buttons on toolbar',
            'custom-message': 'Hello!',
            'custom-button-name': 'Send hello'
          },
          'on-edit-form': {
            'caption': 'Flexberry-objectlistview. FlexberryObjectlistview custom data sample'
          },
          'custom-filter': {
            'caption': 'Flexberry-objectlistview. Custom filter'
          },
          'configurate-rows': {
            'caption': 'Flexberry-objectlistview. Configurate rows'
          }
        },
        'flexberry-simpledatetime': {
          'settings-example': {
            'caption': 'Flexberry-simpledatetime. Settings example'
          }
        },
        'flexberry-textarea': {
          'settings-example': {
            'caption': 'Flexberry-textarea. Settings example'
          }
        },
        'flexberry-textbox': {
          'settings-example': {
            'caption': 'Flexberry-textbox. Settings example'
          }
        },
        'flexberry-toggler': {
          'settings-example': {
            'caption': 'Flexberry-toggler. Settings example',
            'togglerContent': 'Some expandable/collapsable content'
          }
        }
      },
      'integration-examples': {
        'edit-form': {
          'readonly-mode': {
            'caption': 'Integration examples. Readonly mode',
            'readonly-flag-management-segment-caption': 'Form\'s readonly-mode management',
            'readonly-flag-value-segment-caption': 'Controller\'s \'readonly\' property value',
            'readonly-flag-caption': 'Form is in readonly mode',
            'flag-caption': 'Flag',
            'number-caption': 'Number',
            'text-caption': 'Text',
            'long-text-caption': 'Long text',
            'date-caption': 'Date',
            'time-caption': 'Time',
            'enumeration-caption': 'Enumeration',
            'file-caption': 'File',
            'master-caption': 'Master',
            'master-dropdown-caption': 'Master in dropdown mode'
          },
          'validation': {
            'caption': 'Integration examples. Validation',
            'flag-caption': 'Flag',
            'number-caption': 'Number',
            'text-caption': 'Text',
            'long-text-caption': 'Long text',
            'date-caption': 'Date',
            'enumeration-caption': 'Enumeration',
            'file-caption': 'File',
            'master-caption': 'Master'
          }
        }
      }
    },

    'components': {
      'settings-example': {
        'component-template-caption': 'Component template',
        'controller-properties-caption': 'Controller properties',
        'component-current-settings-caption': 'Component current settings values',
        'component-default-settings-caption': 'Component default settings values',
        'component-with-applied-settings-caption': 'Component with it\'s current settings applied'
      }
    }
  });

  exports['default'] = translations;
});
define('dummy/locales/ru/translations', ['exports', 'ember', 'ember-flexberry/locales/ru/translations'], function (exports, _ember, _emberFlexberryLocalesRuTranslations) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesRuTranslations['default']);

  _ember['default'].$.extend(true, translations, {
    'models': {
      'ember-flexberry-dummy-suggestion': {
        'projections': {
          'SuggestionL': {
            'address': {
              'caption': 'Адрес'
            },
            'text': {
              'caption': 'Текст'
            },
            'date': {
              'caption': 'Дата'
            },
            'votes': {
              'caption': 'Голоса'
            },
            'author': {
              'caption': 'Автор',
              'eMail': {
                'caption': 'Почта'
              }
            }
          },
          'SuggestionE': {
            'address': {
              'caption': 'Адрес'
            },
            'userVotes': {
              'voteType': {
                'caption': 'Тип голосования'
              },
              'applicationUser': {
                'caption': 'Пользователь',
                'eMail': {
                  'caption': 'Почта'
                }
              }
            }
          }
        }
      }
    },

    'application-name': 'Тестовый стенд ember-flexberry',

    'forms': {
      'loading': {
        'spinner-caption': 'Данные загружаются, пожалуйста подождите...'
      },
      'index': {
        'greeting': 'Добро пожаловать на тестовый стенд ember-flexberry!'
      },

      'application': {
        'header': {
          'menu': {
            'sitemap-button': {
              'caption': '',
              'title': 'Меню'
            },
            'user-settings-service-checkbox': {
              'caption': 'Использовать сервис сохранения пользовательских настроек'
            },
            'language-dropdown': {
              'caption': 'Язык приложения',
              'placeholder': 'Выберите язык'
            }
          }
        },

        'footer': {
          'application-name': 'Тестовый стенд ember-flexberry',
          'application-version': {
            'caption': 'Версия аддона {{version}}',
            'title': 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          }
        },

        'sitemap': {
          'application-name': {
            'caption': 'Тестовый стенд ember-flexberry',
            'title': ''
          },
          'application-version': {
            'caption': 'Версия аддона {{version}}',
            'title': 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          },
          'index': {
            'caption': 'Главная',
            'title': ''
          },
          'application': {
            'caption': 'Приложение',
            'title': '',
            'application-users': {
              'caption': 'Пользователи приложения',
              'title': ''
            },
            'localizations': {
              'caption': 'Локализация',
              'title': ''
            },
            'suggestion-types': {
              'caption': 'Типы предложений',
              'title': ''
            },
            'suggestions': {
              'caption': 'Предложения',
              'title': ''
            }
          },
          'log-service-examples': {
            'caption': 'Сервис логирования',
            'title': '',
            'application-log': {
              'caption': 'Лог приложения',
              'title': ''
            },
            'settings-example': {
              'caption': 'Пример работы с настройками',
              'title': ''
            }
          },
          'components-examples': {
            'caption': 'Примеры компонентов',
            'title': '',
            'flexberry-checkbox': {
              'caption': 'flexberry-checkbox',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-datepicker': {
              'caption': 'flexberry-datepicker',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-dropdown': {
              'caption': 'flexberry-dropdown',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'conditional-render-example': {
                'caption': 'Пример условного рендеринга',
                'title': ''
              },
              'empty-value-example': {
                'caption': 'Пример dropdown-а с пустым значением',
                'title': ''
              },
              'items-example': {
                'caption': 'Пример элементов значений',
                'title': ''
              }
            },
            'flexberry-field': {
              'caption': 'flexberry-field',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-file': {
              'caption': 'flexberry-file',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-groupedit': {
              'caption': 'flexberry-groupedit',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'model-update-example': {
                'caption': 'Обновление модели',
                'title': ''
              }
            },
            'flexberry-lookup': {
              'caption': 'flexberry-lookup',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'customizing-window-example': {
                'caption': 'Настройка окна',
                'title': ''
              },
              'limit-function-example': {
                'caption': 'Функция ограничения',
                'title': ''
              },
              'lookup-block-form-example': {
                'caption': 'Лукап в блочной форме',
                'title': ''
              },
              'lookup-in-modal': {
                'caption': 'Лукап в модальном окне',
                'title': ''
              },
              'dropdown-mode-example': {
                'caption': 'Режим dropdown',
                'title': ''
              }
            },
            'flexberry-menu': {
              'caption': 'flexberry-menu',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-objectlistview': {
              'caption': 'flexberry-objectlistview',
              'title': '',
              'limit-function-example': {
                'caption': 'Функция ограничения',
                'title': ''
              },
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              },
              'toolbar-custom-buttons-example': {
                'caption': 'Пользовательские кнопки',
                'title': ''
              },
              'on-edit-form': {
                'caption': 'Размещение на форме редактирования',
                'title': ''
              },
              'custom-filter': {
                'caption': 'Настройка фильтра',
                'title': ''
              },
              'configurate-rows': {
                'caption': 'Раскраска строк',
                'title': ''
              }
            },
            'flexberry-simpledatetime': {
              'caption': 'flexberry-simpledatetime',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-textarea': {
              'caption': 'flexberry-textarea',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-textbox': {
              'caption': 'flexberry-textbox',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            },
            'flexberry-toggler': {
              'caption': 'flexberry-toggler',
              'title': '',
              'settings-example': {
                'caption': 'Пример работы с настройками',
                'title': ''
              }
            }
          },
          'integration-examples': {
            'caption': 'Примеры интеграции',
            'title': '',
            'edit-form': {
              'caption': 'Форма редактирования',
              'title': '',
              'readonly-mode': {
                'caption': 'Режим только для чтения',
                'title': ''
              },
              'validation': {
                'caption': 'Валидация',
                'title': ''
              }
            }
          }
        }
      },

      'edit-form': {
        'save-success-message-caption': 'Сохранение завершилось успешно',
        'save-success-message': 'Объект сохранен',
        'save-error-message-caption': 'Ошибка сохранения',
        'delete-success-message-caption': 'Удаление завершилось успешно',
        'delete-success-message': 'Объект удален',
        'delete-error-message-caption': 'Ошибка удаления'
      },

      'ember-flexberry-dummy-application-user-edit': {
        'caption': 'Пользователь приложения',
        'name-caption': 'Имя',
        'eMail-caption': 'E-mail',
        'phone1-caption': 'Номер телефона 1',
        'phone2-caption': 'Номер телефона 2',
        'phone3-caption': 'Номер телефона 3',
        'activated-caption': 'Учетная запись активирована',
        'vK-caption': 'VK',
        'facebook-caption': 'Facebook',
        'twitter-caption': 'Twitter',
        'birthday-caption': 'Дата рождения',
        'gender-caption': 'Пол',
        'vip-caption': 'VIP',
        'karma-caption': 'Карма',
        'name-validation-message-caption': 'Заполните поле "Имя"',
        'eMail-validation-message-caption': 'Заполните поле "E-mail"'
      },

      'ember-flexberry-dummy-comment-edit': {
        'caption': 'Комментарий',
        'text-caption': 'Текст комментария',
        'votes-caption': 'Количество голосов',
        'moderated-caption': 'Одобрено',
        'author-caption': 'Автор',
        'userVotes-caption': 'Голоса пользователей',
        'date-caption': 'Дата',
        'author-validation-message-caption': 'Заполните поле "Автор"'
      },

      'ember-flexberry-dummy-localization-edit': {
        'caption': 'Локализация',
        'name-caption': 'Наименование',
        'name-validation-message-caption': 'Заполните наименование'
      },

      'ember-flexberry-dummy-suggestion-edit': {
        'caption': 'Предложение',
        'address-caption': 'Адрес',
        'text-caption': 'Описание',
        'date-caption': 'Дата',
        'votes-caption': 'Количество голосов',
        'moderated-caption': 'Одобрено',
        'type-caption': 'Тип предложения',
        'author-caption': 'Автор предложения',
        'editor1-caption': 'Редактор предложения',
        'files-caption': 'Прикрепленные файлы',
        'userVotes-caption': 'Голоса пользователей',
        'comments-caption': 'Комментарии',
        'type-validation-message-caption': 'Заполните тип предложения',
        'author-validation-message-caption': 'Заполните поле "Автор"',
        'editor-validation-message-caption': 'Заполните поле "Редактор"'
      },

      'ember-flexberry-dummy-suggestion-type-edit': {
        'caption': 'Тип предложения',
        'name-caption': 'Наименование',
        'moderated-caption': 'Одобрено',
        'parent-caption': 'Иерархия',
        'localized-types-caption': 'Локализация типа',
        'name-validation-message-caption': 'Заполните наименование'
      },

      'ember-flexberry-dummy-application-user-list': {
        'caption': 'Пользователи приложения'
      },

      'ember-flexberry-dummy-localization-list': {
        'caption': 'Локализация'
      },

      'ember-flexberry-dummy-suggestion-list': {
        'caption': 'Предложения'
      },

      'ember-flexberry-dummy-suggestion-type-list': {
        'caption': 'Типы предложений'
      },

      'log-service-examples': {
        'settings-example': {
          'caption': 'Сервис логирования. Пример работы с настройками',
          'setting-column-header-caption': 'Настройка сервиса логирования',
          'settings-value-column-header-caption': 'Текущее значение настройки',
          'throw-exception-button-caption': 'Бросить исключение',
          'reject-rsvp-promise-button-caption': 'Отклонить promise',
          'ember-assert-button-caption': 'assert',
          'ember-logger-error-button-caption': 'Error',
          'ember-logger-warn-button-caption': 'Warn',
          'ember-deprecate-button-caption': 'Deprecate',
          'ember-logger-log-button-caption': 'Log',
          'ember-logger-info-button-caption': 'Info',
          'ember-logger-debug-button-caption': 'Debug',
          'throw-exception-button-message': 'Брошено исключение',
          'reject-rsvp-promise-button-message': 'Promise отклонен',
          'ember-assert-button-message': 'Вызван метод Ember.assert',
          'ember-logger-error-button-message': 'Вызван метод Ember.Logger.error',
          'ember-logger-warn-button-message': 'Вызван метод Ember.Logger.warn',
          'ember-deprecate-button-message': 'Вызван метод Ember.deprecate',
          'ember-logger-log-button-message': 'Вызван метод Ember.Logger.log',
          'ember-logger-info-button-message': 'Вызван метод Ember.logger.info',
          'ember-logger-debug-button-message': 'Вызван метод Ember.Logger.debug'
        }
      },

      'components-examples': {
        'flexberry-checkbox': {
          'settings-example': {
            'caption': 'Flexberry-checkbox. Пример работы с настройками'
          }
        },
        'flexberry-datepicker': {
          'settings-example': {
            'caption': 'Flexberry-datepicker. Пример работы с настройками'
          }
        },
        'flexberry-dropdown': {
          'settings-example': {
            'caption': 'Flexberry-dropdown. Пример работы с настройками'
          },
          'conditional-render-example': {
            'caption': 'Flexberry-dropdown. Пример условного рендеринга',
            'info-caption': 'Описание варианта использования',
            'info-message': 'Шаблон страницы выглядит следующим образом:' + '{{pageTemplate}}' + 'После того как какое-либо значение будет выбрано, компонент будет заменен на ' + '&lt;span&gt;selected value&lt;/span&gt;,<br>' + 'после этого следует проверить консоль браузера, она должна быть чиста от ошибок \"Semantic-UI\" и прочих ошибок.'
          },
          'empty-value-example': {
            'caption': 'Flexberry-dropdown. Пример dropdown-а с пустым значением',
            'message': 'При открытии формы в dropdown-е должно быть не пустое значение. Должно быть Enum value №2.',
            'enumeration-caption': 'Dropdown с пустым значением'
          },
          'items-example': {
            'caption': 'Flexberry-dropdown. Пример значений элементов',
            'checkbox-caption': 'использовать itemsObject'
          }
        },
        'flexberry-field': {
          'settings-example': {
            'caption': 'Flexberry-field. Пример работы с настройками'
          }
        },
        'flexberry-file': {
          'settings-example': {
            'caption': 'Flexberry-file. Пример работы с настройками'
          }
        },
        'flexberry-groupedit': {
          'settings-example': {
            'caption': 'Flexberry-groupedit. Пример работы с настройками'
          },
          'model-update-example': {
            'caption': 'Flexberry-groupedit. Обновление модели',
            'addDetailButton': 'Добавить детейл',
            'removeDetailButton': 'Удалить детейл'
          }
        },
        'flexberry-lookup': {
          'settings-example': {
            'caption': 'Flexberry-lookup. Пример работы с настройками'
          },
          'customizing-window-example': {
            'caption': 'Flexberry-lookup. Настройка окна',
            'titleLookup': 'Мастер'
          },
          'limit-function-example': {
            'caption': 'Flexberry-lookup. Функция ограничения',
            'titleLookup': 'Мастер'
          },
          'lookup-block-form-example': {
            'caption': 'Flexberry-lookup. Лукап в блочной форме',
            'message': 'Данный тест работает только в мобильной версии сайта. Чтобы запустить мобильную версию нужно:',
            'paragraph1': 'Перейти в режим разработчика (нажать “F12”).',
            'paragraph2': 'Включить мобильную версию сайта (нажать “Ctrl+Shift+M” в Chrome и Firefox)',
            'paragraph3': 'Обновить страницу (нажать “F5”)'
          },
          'lookup-in-modal': {
            'caption': 'Flexberry-lookup. Лукап в модальном окне',
            'captionModal': 'Кастомное модальное окно №1',
            'captionModalDouble': 'Кастомное модальное окно №2',
            'buttonModal': 'Модальное окно №1',
            'buttonModalDouble': 'Модальное окно №2',
            'buttonClose': 'Закрыть'
          },
          'dropdown-mode-example': {
            'caption': 'Flexberry-lookup. Режим dropdown'
          }
        },
        'flexberry-menu': {
          'settings-example': {
            'caption': 'Flexberry-menu. Пример работы с настройками',
            'titleIcon1': 'Значок выравнен по левому краю',
            'titleIcon2': 'Значок выравнен по правому краю',
            'titleIcon3': 'Подменю'
          }
        },
        'flexberry-objectlistview': {
          'limit-function-example': {
            'caption': 'Flexberry-objectlistview. Функция ограничения'
          },
          'settings-example': {
            'caption': 'Flexberry-objectlistview. Пример работы с настройками'
          },
          'toolbar-custom-buttons-example': {
            'caption': 'Flexberry-objectlistview. Пользовательские кнопки',
            'custom-message': 'Привет!',
            'custom-button-name': 'Передать привет'
          },
          'on-edit-form': {
            'caption': 'Flexberry-objectlistview. FlexberryObjectlistview пример произвольных данных'
          },
          'custom-filter': {
            'caption': 'Flexberry-objectlistview. Настройка фильтра'
          },
          'configurate-rows': {
            'caption': 'Flexberry-objectlistview. Раскраска строк'
          }
        },
        'flexberry-simpledatetime': {
          'settings-example': {
            'caption': 'Flexberry-simpledatetime. Пример работы с настройками'
          }
        },
        'flexberry-textarea': {
          'settings-example': {
            'caption': 'Flexberry-textarea. Пример работы с настройками'
          }
        },
        'flexberry-textbox': {
          'settings-example': {
            'caption': 'Flexberry-textbox. Пример работы с настройками'
          }
        },
        'flexberry-toggler': {
          'settings-example': {
            'caption': 'Flexberry-toggler. Пример работы с настройками',
            'togglerContent': 'Некоторое  сворачивающееся/разворачивающееся содержание'
          }
        }
      },
      'integration-examples': {
        'edit-form': {
          'readonly-mode': {
            'caption': 'Integration examples. Режим только для чтения',
            'readonly-flag-management-segment-caption': 'Управление режимом только для чтения формы',
            'readonly-flag-value-segment-caption': 'Значения свойства \'readonly\' контроллера',
            'readonly-flag-caption': 'Форма находится в режиме только для чтения',
            'flag-caption': 'Флаг',
            'number-caption': 'Число',
            'text-caption': 'Текст',
            'long-text-caption': 'Длинный текст',
            'date-caption': 'Дата',
            'time-caption': 'Время',
            'enumeration-caption': 'Перечисление',
            'file-caption': 'Файл',
            'master-caption': 'Мастер',
            'master-dropdown-caption': 'Мастер в режиме dropdown-а'
          },
          'validation': {
            'caption': 'Integration examples. Валидация',
            'flag-caption': 'Флаг',
            'number-caption': 'Число',
            'text-caption': 'Текст',
            'long-text-caption': 'Длинный текст',
            'date-caption': 'Дата',
            'enumeration-caption': 'Перечисление',
            'file-caption': 'Файл',
            'master-caption': 'Мастер'
          }
        }
      }
    },

    'components': {
      'settings-example': {
        'component-template-caption': 'Шаблон компонента',
        'controller-properties-caption': 'Свойства контроллера',
        'component-current-settings-caption': 'Текущие настройки компонента',
        'component-default-settings-caption': 'Настройки компонента по умолчанию',
        'component-with-applied-settings-caption': 'Компонент с примененными текущими настройками'
      }
    }
  });

  exports['default'] = translations;
});
define('dummy/mixins/edit-form-controller-operations-indication', ['exports', 'ember'], function (exports, _ember) {

  /**
    Edit forms controllers mixin which handles save/delete operations indication.
  
    @class EditFormControllerOperationsIndicationMixin
  */
  exports['default'] = _ember['default'].Mixin.create({
    actions: {
      /**
        Handler for success ui-message component 'onShow' action.
         @method actions.onSuccessMessageShow
       */
      onSuccessMessageShow: function onSuccessMessageShow() {},

      /**
        Handler for success ui-message component 'onHide' action.
         @method actions.onSuccessMessageHide
       */
      onSuccessMessageHide: function onSuccessMessageHide() {
        this.set('showFormSuccessMessage', undefined);
      },

      /**
        Handler for error ui-message component 'onShow' action.
         @method actions.onErrorMessageShow
       */
      onErrorMessageShow: function onErrorMessageShow() {},

      /**
        Handler for error ui-message component 'onHide' action.
         @method actions.onErrorMessageHide
       */
      onErrorMessageHide: function onErrorMessageHide() {
        this.set('showFormErrorMessage', undefined);
      }
    },

    /**
      Latest operation type ('save' or 'delete').
       @property latestOperationType.
      @type String
     */
    latestOperationType: undefined,

    /**
      Flag: indicates whether asynchronous operation is in progress or not.
       @property showFormSpinner.
      @type Boolean
     */
    showFormSpinner: undefined,

    /**
      Flag: indicates whether asynchronous operation succeed or not.
       @property showFormSuccessMessage.
      @type Boolean
     */
    showFormSuccessMessage: undefined,

    /**
      Success message caption related to current locale and operation type.
       @property formSuccessMessageCaption.
      @type String
     */
    formSuccessMessageCaption: _ember['default'].computed('i18n.locale', 'latestOperationType', function () {
      var i18n = this.get('i18n');
      if (this.get('latestOperationType') === 'save') {
        return i18n.t('forms.edit-form.save-success-message-caption');
      }

      return i18n.t('forms.edit-form.delete-success-message-caption');
    }),

    /**
      Success message related to current locale and operation type.
       @property formSuccessMessage.
      @type String
     */
    formSuccessMessage: _ember['default'].computed('i18n.locale', 'latestOperationType', function () {
      var i18n = this.get('i18n');
      var message = null;
      if (this.get('latestOperationType') === 'save') {
        message = i18n.t('forms.edit-form.save-success-message');
      } else {
        message = i18n.t('forms.edit-form.delete-success-message');
      }

      return new _ember['default'].Handlebars.SafeString('<ul><li>' + message + '</li></ul>');
    }),

    /**
      Flag: indicates whether asynchronous operation failed or not.
       @property showFormErrorMessage.
      @type Boolean
     */
    showFormErrorMessage: undefined,

    /**
      Error message caption related to current locale and operation type.
       @property formErrorMessageCaption.
      @type String
     */
    formErrorMessageCaption: _ember['default'].computed('i18n.locale', 'latestOperationType', function () {
      var i18n = this.get('i18n');
      if (this.get('latestOperationType') === 'save') {
        return i18n.t('forms.edit-form.save-error-message-caption');
      }

      return i18n.t('forms.edit-form.delete-error-message-caption');
    }),

    /**
      Success message related to current locale and operation type.
       @property formErrorMessage
      @type String
     */
    formErrorMessage: _ember['default'].computed('errorMessages.[]', function () {
      var message = '';
      var errorMessages = this.get('errorMessages');
      if (_ember['default'].isArray(errorMessages)) {
        errorMessages.forEach(function (currentErrorMessage) {
          message += '<li>' + currentErrorMessage + '</li>';
        });
      }

      return new _ember['default'].Handlebars.SafeString('<ul>' + message + '</ul>');
    }),

    /**
      Form semantic ui class related to it's current state ('loading', 'success', 'error').
       @property formState.
      @type String
     */
    formState: _ember['default'].computed('showFormSpinner', 'showFormSuccessMessage', 'showFormErrorMessage', function () {
      if (this.get('showFormSpinner') === true) {
        return 'loading';
      }

      if (this.get('showFormSuccessMessage') === true) {
        return 'success';
      }

      if (this.get('showFormErrorMessage') === true) {
        return 'error';
      }

      return '';
    }),

    /**
      This method will be invoked before save operation will be called.
       @method onSaveActionStarted.
     */
    onSaveActionStarted: function onSaveActionStarted() {
      this._super.apply(this, arguments);

      this.set('showFormSpinner', true);
      this.set('latestOperationType', 'save');
    },

    /**
      This method will be invoked when save operation successfully completed.
       @method onSaveActionFulfilled.
     */
    onSaveActionFulfilled: function onSaveActionFulfilled() {
      this._super.apply(this, arguments);

      this.set('showFormSuccessMessage', true);
      this.set('showFormErrorMessage', false);
    },

    /**
      This method will be invoked when save operation completed, but failed.
       @method onSaveActionRejected.
      @param {Object} errorData Data about save operation fail.
     */
    onSaveActionRejected: function onSaveActionRejected(errorData) {
      this._super.apply(this, arguments);

      this.set('showFormSuccessMessage', false);
      this.set('showFormErrorMessage', true);
    },

    /**
      This method will be invoked always when save operation completed,
      regardless of save promise's state (was it fulfilled or rejected).
       @method onSaveActionAlways.
      @param {Object} data Data about completed save operation.
     */
    onSaveActionAlways: function onSaveActionAlways(data) {
      this._super.apply(this, arguments);

      this.set('showFormSpinner', false);
    },

    /**
      This method will be invoked before delete operation will be called.
       @method onDeleteActionStarted.
     */
    onDeleteActionStarted: function onDeleteActionStarted() {
      this._super.apply(this, arguments);

      this.set('showFormSpinner', true);
      this.set('latestOperationType', 'delete');
    },

    /**
      This method will be invoked when delete operation successfully completed.
       @method onDeleteActionFulfilled.
     */
    onDeleteActionFulfilled: function onDeleteActionFulfilled() {
      this._super.apply(this, arguments);

      this.set('showFormSuccessMessage', true);
      this.set('showFormErrorMessage', false);
    },

    /**
      This method will be invoked when delete operation completed, but failed.
       @method onDeleteActionRejected.
      @param {Object} errorData Data about delete operation fail.
     */
    onDeleteActionRejected: function onDeleteActionRejected(errorData) {
      this._super.apply(this, arguments);

      this.set('showFormSuccessMessage', false);
      this.set('showFormErrorMessage', true);
    },

    /**
      This method will be invoked always when delete operation completed,
      regardless of delete promise's state (was it fulfilled or rejected).
       @method onDeleteActionAlways.
      @param {Object} data Data about completed delete operation.
     */
    onDeleteActionAlways: function onDeleteActionAlways(data) {
      this._super.apply(this, arguments);

      this.set('showFormSpinner', false);
    },

    /**
      This method will be invoked before close method will be called.
       @method onDeleteActionStarted.
     */
    onCloseActionStarted: function onCloseActionStarted() {
      this.set('showFormSpinner', undefined);
      this.set('showFormSuccessMessage', undefined);
      this.set('showFormErrorMessage', undefined);
      this.set('latestOperationType', undefined);
    }
  });
});
/**
  @module ember-flexberry-dummy
*/
define('dummy/mixins/edit-form-route-operations-indication', ['exports', 'ember'], function (exports, _ember) {

  /**
    Edit forms routes mixin which handles save/delete operations indication.
  
    @class EditFormRouteOperationsIndicationMixin
  */
  exports['default'] = _ember['default'].Mixin.create({
    /**
      Resets routes controller, clears save/delete operations messages.
    */
    resetController: function resetController(controller, isExisting, transition) {
      this._super.apply(this, arguments);

      controller.set('showFormSuccessMessage', false);
      controller.set('showFormErrorMessage', false);
    }
  });
});
/**
  @module ember-flexberry-dummy
*/
define('dummy/mixins/link-action', ['exports', 'ember-link-action/mixins/link-action'], function (exports, _emberLinkActionMixinsLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionMixinsLinkAction['default'];
    }
  });
});
define('dummy/models/components-examples/flexberry-checkbox/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    flag: _emberData['default'].attr('boolean')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-checkbox/settings-example/base', {
    flag: _emberFlexberryData.Projection.attr('Flag')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-datepicker/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    date: _emberData['default'].attr('date')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-datepicker/settings-example/base', {
    date: _emberFlexberryData.Projection.attr('Date')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-dropdown/conditional-render-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    enumeration: _emberData['default'].attr('components-examples/flexberry-dropdown/conditional-render-example/enumeration')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-dropdown/conditional-render-example/enumeration', {
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-dropdown/empty-value-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    enumeration: _emberData['default'].attr('components-examples/flexberry-dropdown/empty-value-example/enumeration')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-dropdown/empty-value-example/base', {
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });
  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-dropdown/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    enumeration: _emberData['default'].attr('components-examples/flexberry-dropdown/settings-example/enumeration')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-dropdown/settings-example/base', {
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-field/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-field/settings-example/base', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-file/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    file: _emberData['default'].attr('file')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-file/settings-example/base', {
    file: _emberFlexberryData.Projection.attr('file')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-groupedit/shared/aggregator', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    details: _emberData['default'].hasMany('components-examples/flexberry-groupedit/shared/detail', {
      inverse: 'aggregator',
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('AggregatorE', 'components-examples/flexberry-groupedit/shared/aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Text', {
          hidden: true
        })
      }, {
        displayMemberPath: 'text'
      })
    })
  });

  // Projection for testing displaying changes on GE after manual model update.
  Model.defineProjection('ManualModelUpdateView', 'components-examples/flexberry-groupedit/shared/aggregator', {
    details: _emberFlexberryData.Projection.hasMany('components-examples/flexberry-groupedit/shared/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Text', {
          hidden: true
        })
      }, {
        displayMemberPath: 'text'
      })
    })
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-groupedit/shared/detail', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    // Inversed relationship for aggregator.details.
    // It's not a property for flexberry-lookup component.
    aggregator: _emberData['default'].belongsTo('components-examples/flexberry-groupedit/shared/aggregator', {
      inverse: 'details',
      async: false
    }),

    flag: _emberData['default'].attr('boolean'),
    text: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('components-examples/flexberry-groupedit/shared/detail-enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('components-examples/flexberry-groupedit/shared/master', {
      inverse: null,
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('DetailE', 'components-examples/flexberry-groupedit/shared/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    text: _emberFlexberryData.Projection.attr('Text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('components-examples/flexberry-groupedit/shared/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    })
  });

  // Edit form short projection.
  Model.defineProjection('DetailShortE', 'components-examples/flexberry-groupedit/shared/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    text: _emberFlexberryData.Projection.attr('Text'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  // Edit form ultra short projection.
  Model.defineProjection('DetailUltraShortE', 'components-examples/flexberry-groupedit/shared/detail', {
    enumeration: _emberFlexberryData.Projection.attr('Enumeration')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-groupedit/shared/master', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    text: _emberData['default'].attr('string')
  });

  Model.defineProjection('MasterL', 'components-examples/flexberry-groupedit/shared/master', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-simpledatetime/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    date: _emberData['default'].attr('date')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-flexberry-simpledatetime/settings-example/base', {
    date: _emberFlexberryData.Projection.attr('Date')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-textarea/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-textarea/settings-example/base', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/components-examples/flexberry-textbox/settings-example/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'components-examples/flexberry-textbox/settings-example/base', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-application-user', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    name: _emberData['default'].attr('string'),
    eMail: _emberData['default'].attr('string'),
    phone1: _emberData['default'].attr('string'),
    phone2: _emberData['default'].attr('string'),
    phone3: _emberData['default'].attr('string'),
    activated: _emberData['default'].attr('boolean'),
    vK: _emberData['default'].attr('string'),
    facebook: _emberData['default'].attr('string'),
    twitter: _emberData['default'].attr('string'),
    birthday: _emberData['default'].attr('date'),
    gender: _emberData['default'].attr('ember-flexberry-dummy-gender'),
    vip: _emberData['default'].attr('boolean'),
    karma: _emberData['default'].attr('decimal'),

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      },
      eMail: {
        presence: {
          message: 'User email is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('ApplicationUserE', 'ember-flexberry-dummy-application-user', {
    name: _emberFlexberryData.Projection.attr('Name'),
    eMail: _emberFlexberryData.Projection.attr('E-mail'),
    phone1: _emberFlexberryData.Projection.attr('Phone1'),
    phone2: _emberFlexberryData.Projection.attr('Phone2'),
    phone3: _emberFlexberryData.Projection.attr('Phone3'),
    activated: _emberFlexberryData.Projection.attr('Activated'),
    vK: _emberFlexberryData.Projection.attr('VK'),
    facebook: _emberFlexberryData.Projection.attr('Facebook'),
    twitter: _emberFlexberryData.Projection.attr('Twitter'),
    birthday: _emberFlexberryData.Projection.attr('Birthday'),
    gender: _emberFlexberryData.Projection.attr('Gender'),
    vip: _emberFlexberryData.Projection.attr('Vip'),
    karma: _emberFlexberryData.Projection.attr('Karma')
  });

  // List form projection.
  Model.defineProjection('ApplicationUserL', 'ember-flexberry-dummy-application-user', {
    name: _emberFlexberryData.Projection.attr('Name'),
    eMail: _emberFlexberryData.Projection.attr('E-mail'),
    activated: _emberFlexberryData.Projection.attr('Activated'),
    birthday: _emberFlexberryData.Projection.attr('Birthday'),
    gender: _emberFlexberryData.Projection.attr('Gender'),
    karma: _emberFlexberryData.Projection.attr('Karma')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-comment-vote', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    // Inversed relationship for ember-flexberry-dummy-comment.userVotes.
    // It's not a property for flexberry-lookup component.
    comment: _emberData['default'].belongsTo('ember-flexberry-dummy-comment', {
      inverse: 'userVotes',
      async: false
    }),
    voteType: _emberData['default'].attr('ember-flexberry-dummy-vote-type'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    applicationUser: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // Model validation rules.
    validations: {}
  });

  // Edit form projection.
  Model.defineProjection('CommentVoteE', 'ember-flexberry-dummy-comment-vote', {
    voteType: _emberFlexberryData.Projection.attr('Vote type'),
    applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-comment', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', {
      inverse: 'comments',
      async: false
    }),
    text: _emberData['default'].attr('string'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    author: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    userVotes: _emberData['default'].hasMany('ember-flexberry-dummy-comment-vote', {
      inverse: 'comment',
      async: false
    }),

    // Model validation rules.
    validations: {
      author: {
        presence: {
          message: 'Author is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('CommentE', 'ember-flexberry-dummy-comment', {
    suggestion: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion', 'Suggestion', {
      address: _emberFlexberryData.Projection.attr('Address', {
        hidden: true
      })
    }),
    text: _emberFlexberryData.Projection.attr('Text'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment-vote', 'User votes', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  // Detail's list projection.
  Model.defineProjection('CommentD', 'ember-flexberry-dummy-comment', {
    text: _emberFlexberryData.Projection.attr('Text'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-localization', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    name: _emberData['default'].attr('string'),

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('LocalizationE', 'ember-flexberry-dummy-localization', {
    name: _emberFlexberryData.Projection.attr('Name')
  });

  // List form projection.
  Model.defineProjection('LocalizationL', 'ember-flexberry-dummy-localization', {
    name: _emberFlexberryData.Projection.attr('Name')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    // Inversed relationship for ember-flexberry-dummy-suggestion-type.localizedTypes.
    // It's not a property for flexberry-lookup component.
    suggestionType: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', {
      inverse: 'localizedTypes',
      async: false
    }),
    name: _emberData['default'].attr('string'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    localization: _emberData['default'].belongsTo('ember-flexberry-dummy-localization', {
      inverse: null,
      async: false
    }),

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('LocalizedSuggestionTypeE', 'ember-flexberry-dummy-localized-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion-file', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    // Inversed relationship for ember-flexberry-dummy-suggestion.files.
    // It's not a property for flexberry-lookup component.
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', {
      inverse: 'files',
      async: false
    }),
    order: _emberData['default'].attr('number'),
    file: _emberData['default'].attr('file'),

    // Model validation rules.
    validations: {}
  });

  // Edit form projection.
  Model.defineProjection('SuggestionFileE', 'ember-flexberry-dummy-suggestion-file', {
    order: _emberFlexberryData.Projection.attr('Order'),
    file: _emberFlexberryData.Projection.attr('File')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion-type', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    name: _emberData['default'].attr('string'),
    moderated: _emberData['default'].attr('boolean'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    parent: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    localizedTypes: _emberData['default'].hasMany('ember-flexberry-dummy-localized-suggestion-type', {
      inverse: 'suggestionType',
      async: false
    }),

    // Model validation rules.
    validations: {
      name: {
        presence: {
          message: 'Name is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('SuggestionTypeE', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    localizedTypes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-localized-suggestion-type', 'Localized types', {
      name: _emberFlexberryData.Projection.attr('Name'),
      localization: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-localization', 'Localization', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  // List form projection.
  Model.defineProjection('SuggestionTypeL', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    parent: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Parent', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup example on window customization.
  Model.defineProjection('SettingLookupExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  // Projection for lookup example on window customization.
  Model.defineProjection('CustomizeLookupWindowExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  // Projection for lookup with limit function example.
  Model.defineProjection('LookupWithLimitFunctionExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  // Projection for lookup in dropdown mode example.
  Model.defineProjection('DropDownLookupExampleView', 'ember-flexberry-dummy-suggestion-type', {
    name: _emberFlexberryData.Projection.attr('Name'),
    moderated: _emberFlexberryData.Projection.attr('Moderated')
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-suggestion', ['exports', 'ember', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    address: _emberData['default'].attr('string'),
    text: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),
    commentsCount: _emberData['default'].attr('number'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    type: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion-type', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-lookup component. No inverse relationship here.
    author: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null, async: false
    }),

    // This property is for flexberry-lookup component. No inverse relationship here.
    editor1: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    files: _emberData['default'].hasMany('ember-flexberry-dummy-suggestion-file', {
      inverse: 'suggestion',
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    userVotes: _emberData['default'].hasMany('ember-flexberry-dummy-vote', {
      inverse: 'suggestion',
      async: false
    }),

    // This property is for flexberry-groupedit component.
    // Inverse relationship is necessary here.
    comments: _emberData['default'].hasMany('ember-flexberry-dummy-comment', {
      inverse: 'suggestion',
      async: false
    }),

    // Model validation rules.
    validations: {
      type: {
        presence: {
          message: 'Type is required'
        }
      },
      author: {
        presence: {
          message: 'Author is required'
        }
      },
      editor1: {
        presence: {
          message: 'Editor is required'
        }
      }
    },

    commentsChanged: _ember['default'].on('init', _ember['default'].observer('comments', function () {
      _ember['default'].run.once(this, 'commentsCountCompute');
    })),

    commentsCountCompute: function commentsCountCompute() {
      var result = 0;
      this.get('comments').forEach(function () {
        result++;
      });
      this.set('commentsCount', result);
    }
  });

  // Edit form projection.
  Model.defineProjection('SuggestionE', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address'),
    text: _emberFlexberryData.Projection.attr('Text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    files: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-suggestion-file', 'Files', {
      order: _emberFlexberryData.Projection.attr('Order'),
      file: _emberFlexberryData.Projection.attr('File')
    }),
    userVotes: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-vote', 'User votes', {
      voteType: _emberFlexberryData.Projection.attr('Vote type'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        }),
        eMail: _emberFlexberryData.Projection.attr('Email')
      }, {
        displayMemberPath: 'name'
      })
    }),
    comments: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment', 'Comments', {
      text: _emberFlexberryData.Projection.attr('Text'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  // List form projection.
  Model.defineProjection('SuggestionL', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address'),
    text: _emberFlexberryData.Projection.attr('Text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      }),
      eMail: _emberFlexberryData.Projection.attr('Email')
    }, {
      displayMemberPath: 'name'
    }),
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    }),
    commentsCount: _emberFlexberryData.Projection.attr('Comments Count'),
    comments: _emberFlexberryData.Projection.hasMany('ember-flexberry-dummy-comment', 'Comments', {
      text: _emberFlexberryData.Projection.attr('Text'),
      votes: _emberFlexberryData.Projection.attr('Votes'),
      moderated: _emberFlexberryData.Projection.attr('Moderated'),
      author: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Author', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    })
  });

  // Projection for lookup example on settings example.
  Model.defineProjection('SettingLookupExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup example on window customization.
  Model.defineProjection('CustomizeLookupWindowExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup with limit function example.
  Model.defineProjection('LookupWithLimitFunctionExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup in dropdown mode example.
  Model.defineProjection('DropDownLookupExampleView', 'ember-flexberry-dummy-suggestion', {
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for FlexberryObjectlistviewComponent with limit function example.
  Model.defineProjection('FolvWithLimitFunctionExampleView', 'ember-flexberry-dummy-suggestion', {
    address: _emberFlexberryData.Projection.attr('Address'),
    text: _emberFlexberryData.Projection.attr('Text'),
    votes: _emberFlexberryData.Projection.attr('Votes'),
    moderated: _emberFlexberryData.Projection.attr('Moderated'),
    type: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-suggestion-type', 'Type', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  // Projection for lookup in block form.
  Model.defineProjection('LookupInBlockFormView', 'ember-flexberry-dummy-suggestion', {
    editor1: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Editor', {
      name: _emberFlexberryData.Projection.attr('name', { hidden: true }),
      eMail: _emberFlexberryData.Projection.attr('eMail', { hidden: true }),
      gender: _emberFlexberryData.Projection.attr('gender', { hidden: true })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/ember-flexberry-dummy-vote', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    // Inversed relationship for ember-flexberry-dummy-suggestion.userVotes.
    // It's not a property for flexberry-lookup component.
    suggestion: _emberData['default'].belongsTo('ember-flexberry-dummy-suggestion', {
      inverse: 'userVotes',
      async: false
    }),
    voteType: _emberData['default'].attr('ember-flexberry-dummy-vote-type'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    applicationUser: _emberData['default'].belongsTo('ember-flexberry-dummy-application-user', {
      inverse: null,
      async: false
    }),

    // Model validation rules.
    validations: {}
  });

  // Edit form projection.
  Model.defineProjection('VoteE', 'ember-flexberry-dummy-vote', {
    voteType: _emberFlexberryData.Projection.attr('Vote type'),
    applicationUser: _emberFlexberryData.Projection.belongsTo('ember-flexberry-dummy-application-user', 'Application user', {
      name: _emberFlexberryData.Projection.attr('Name', {
        hidden: true
      })
    }, {
      displayMemberPath: 'name'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('dummy/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('dummy/models/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('dummy/models/integration-examples/edit-form/readonly-mode/aggregator', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    flag: _emberData['default'].attr('boolean'),
    number: _emberData['default'].attr('number'),
    text: _emberData['default'].attr('string'),
    longText: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    time: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('integration-examples/edit-form/validation/enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('integration-examples/edit-form/validation/master', {
      inverse: null,
      async: false
    }),

    // This property is for flexberry-lookup component (in dropdown-mode). No inverse relationship here.
    masterDropdown: _emberData['default'].belongsTo('integration-examples/edit-form/readonly-mode/master-dropdown', {
      inverse: null,
      async: false
    }),

    details: _emberData['default'].hasMany('integration-examples/edit-form/readonly-mode/detail', {
      inverse: 'aggregator',
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('AggregatorE', 'integration-examples/edit-form/readonly-mode/aggregator', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    number: _emberFlexberryData.Projection.attr('Number'),
    text: _emberFlexberryData.Projection.attr('Text'),
    longText: _emberFlexberryData.Projection.attr('Long text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    time: _emberFlexberryData.Projection.attr('Time'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/validation/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    }),
    masterDropdown: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/validation/master-dropdown', 'Master dropdown', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    }),
    details: _emberFlexberryData.Projection.hasMany('integration-examples/edit-form/readonly-mode/detail', 'Details', {
      flag: _emberFlexberryData.Projection.attr('Flag'),
      text: _emberFlexberryData.Projection.attr('Text'),
      date: _emberFlexberryData.Projection.attr('Date'),
      enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
      file: _emberFlexberryData.Projection.attr('File'),
      master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/readonly-mode/master', 'Master', {
        text: _emberFlexberryData.Projection.attr('Name', {
          hidden: true
        })
      }, {
        displayMemberPath: 'name'
      })
    })
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/readonly-mode/detail', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    // Inversed relationship for aggregator.details.
    // It's not a property for flexberry-lookup component.
    aggregator: _emberData['default'].belongsTo('integration-examples/edit-form/readonly-mode/aggregator', {
      inverse: 'details',
      async: false
    }),

    flag: _emberData['default'].attr('boolean'),
    text: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('integration-examples/edit-form/readonly-mode/enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('integration-examples/edit-form/readonly-mode/master', {
      inverse: null,
      async: false
    })
  });

  // Edit form projection.
  Model.defineProjection('DetailE', 'integration-examples/edit-form/readonly-mode/detail', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    text: _emberFlexberryData.Projection.attr('Text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/readonly-mode/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/readonly-mode/master-dropdown', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    text: _emberData['default'].attr('string')
  });

  Model.defineProjection('MasterDropdownL', 'integration-examples/edit-form/readonly-mode/master-dropdown', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/readonly-mode/master', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    text: _emberData['default'].attr('string')
  });

  Model.defineProjection('MasterL', 'integration-examples/edit-form/readonly-mode/master', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/validation/base', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    flag: _emberData['default'].attr('boolean'),
    number: _emberData['default'].attr('number'),
    text: _emberData['default'].attr('string'),
    longText: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    enumeration: _emberData['default'].attr('integration-examples/edit-form/validation/enumeration'),
    file: _emberData['default'].attr('file'),

    // This property is for flexberry-lookup component. No inverse relationship here.
    master: _emberData['default'].belongsTo('integration-examples/edit-form/validation/master', {
      inverse: null,
      async: false
    }),

    // Model validation rules.
    validations: {
      flag: {
        presence: {
          message: 'Flag is required'
        },
        inclusion: {
          'in': [true],
          message: 'Flag must be \'true\' only'
        }
      },
      number: {
        presence: {
          message: 'Number is required'
        },
        numericality: {
          odd: true,
          onlyInteger: true,
          messages: {
            numericality: 'Number is invalid',
            odd: 'Number must be an odd',
            onlyInteger: 'Number must be an integer'
          }
        }
      },
      text: {
        presence: {
          message: 'Text is required'
        },
        allowBlank: false,
        length: {
          minimum: 5,
          messages: {
            tooShort: 'Text length must be >= 5'
          }
        }
      },
      longText: {
        presence: {
          message: 'Long text is required'
        }
      },
      date: {
        datetime: {
          allowBlank: false,
          messages: {
            blank: 'Date is required',
            invalid: 'Date is invalid'
          }
        }
      },
      enumeration: {
        presence: {
          message: 'Enumeration is required'
        }
      },
      file: {
        presence: {
          message: 'File is required'
        }
      },
      master: {
        presence: {
          message: 'Master is required'
        }
      }
    }
  });

  // Edit form projection.
  Model.defineProjection('BaseE', 'integration-examples/edit-form/validation/base', {
    flag: _emberFlexberryData.Projection.attr('Flag'),
    number: _emberFlexberryData.Projection.attr('Number'),
    text: _emberFlexberryData.Projection.attr('Text'),
    longText: _emberFlexberryData.Projection.attr('Long text'),
    date: _emberFlexberryData.Projection.attr('Date'),
    enumeration: _emberFlexberryData.Projection.attr('Enumeration'),
    file: _emberFlexberryData.Projection.attr('File'),
    master: _emberFlexberryData.Projection.belongsTo('integration-examples/edit-form/validation/master', 'Master', {
      text: _emberFlexberryData.Projection.attr('Text', {
        hidden: true
      })
    }, {
      displayMemberPath: 'text'
    })
  });

  exports['default'] = Model;
});
define('dummy/models/integration-examples/edit-form/validation/master', ['exports', 'ember-data', 'ember-flexberry/models/base', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryModelsBase, _emberFlexberryData) {

  var Model = _emberFlexberryModelsBase['default'].extend({
    text: _emberData['default'].attr('string')
  });

  // Edit form projection.
  Model.defineProjection('MasterL', 'integration-examples/edit-form/validation/master', {
    text: _emberFlexberryData.Projection.attr('Text')
  });

  exports['default'] = Model;
});
define('dummy/models/model', ['exports', 'ember-flexberry-data/models/model'], function (exports, _emberFlexberryDataModelsModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsModel['default'];
    }
  });
});
define('dummy/models/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/models/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('dummy/models/offline-model', ['exports', 'ember-flexberry-data/models/offline-model'], function (exports, _emberFlexberryDataModelsOfflineModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsOfflineModel['default'];
    }
  });
});
define('dummy/resolver', ['exports', 'ember-flexberry/resolver'], function (exports, _emberFlexberryResolver) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryResolver['default'];
    }
  });
});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, _ember, _dummyConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _dummyConfigEnvironment['default'].locationType
  });

  Router.map(function () {
    // Edit forms & list forms.
    this.route('ember-flexberry-dummy-application-user-list');
    this.route('ember-flexberry-dummy-application-user-edit', { path: 'ember-flexberry-dummy-application-user-edit/:id' });
    this.route('ember-flexberry-dummy-application-user-edit.new', { path: 'ember-flexberry-dummy-application-user-edit/new' });

    this.route('ember-flexberry-dummy-comment-edit', { path: 'ember-flexberry-dummy-comment-edit/:id' });
    this.route('ember-flexberry-dummy-comment-edit.new', { path: 'ember-flexberry-dummy-comment-edit/new' });

    this.route('ember-flexberry-dummy-localization-list');
    this.route('ember-flexberry-dummy-localization-edit', { path: 'ember-flexberry-dummy-localization-edit/:id' });
    this.route('ember-flexberry-dummy-localization-edit.new', { path: 'ember-flexberry-dummy-localization-edit/new' });

    this.route('ember-flexberry-dummy-suggestion-list');
    this.route('ember-flexberry-dummy-suggestion-edit', { path: 'ember-flexberry-dummy-suggestion-edit/:id' });
    this.route('ember-flexberry-dummy-suggestion-edit.new', { path: 'ember-flexberry-dummy-suggestion-edit/new' });

    this.route('ember-flexberry-dummy-suggestion-type-list');
    this.route('ember-flexberry-dummy-suggestion-type-edit', { path: 'ember-flexberry-dummy-suggestion-type-edit/:id' });
    this.route('ember-flexberry-dummy-suggestion-type-edit.new', { path: 'ember-flexberry-dummy-suggestion-type-edit/new' });

    // Logging.
    this.route('i-i-s-caseberry-logging-objects-application-log-l');
    this.route('i-i-s-caseberry-logging-objects-application-log-e', { path: 'i-i-s-caseberry-logging-objects-application-log-e/:id' });
    this.route('i-i-s-caseberry-logging-objects-application-log-e.new', { path: 'i-i-s-caseberry-logging-objects-application-log-e/new' });
    this.route('log-service-examples/settings-example');

    // Components examples routes (sorted by component's names).
    this.route('components-examples/flexberry-checkbox/settings-example');
    this.route('components-examples/flexberry-datepicker/settings-example');
    this.route('components-examples/flexberry-dropdown/settings-example');
    this.route('components-examples/flexberry-dropdown/conditional-render-example');
    this.route('components-examples/flexberry-dropdown/empty-value-example');
    this.route('components-examples/flexberry-dropdown/items-example');
    this.route('components-examples/flexberry-field/settings-example');
    this.route('components-examples/flexberry-file/settings-example');
    this.route('components-examples/flexberry-groupedit/settings-example');
    this.route('components-examples/flexberry-groupedit/model-update-example');
    this.route('components-examples/flexberry-lookup/settings-example');
    this.route('components-examples/flexberry-lookup/customizing-window-example');
    this.route('components-examples/flexberry-lookup/limit-function-example');
    this.route('components-examples/flexberry-lookup/lookup-block-form-example');
    this.route('components-examples/flexberry-lookup/lookup-in-modal');
    this.route('components-examples/flexberry-lookup/dropdown-mode-example');
    this.route('components-examples/flexberry-menu/settings-example');
    this.route('components-examples/flexberry-objectlistview/settings-example');
    this.route('components-examples/flexberry-objectlistview/toolbar-custom-buttons-example');
    this.route('components-examples/flexberry-objectlistview/limit-function-example');
    this.route('components-examples/flexberry-objectlistview/on-edit-form');
    this.route('components-examples/flexberry-objectlistview/on-edit-form/user', { path: 'components-examples/flexberry-objectlistview/on-edit-form/user/:id' });
    this.route('components-examples/flexberry-objectlistview/custom-filter');
    this.route('components-examples/flexberry-objectlistview/configurate-rows');
    this.route('components-examples/flexberry-simpledatetime/settings-example');
    this.route('components-examples/flexberry-textarea/settings-example');
    this.route('components-examples/flexberry-textbox/settings-example');
    this.route('components-examples/flexberry-toggler/settings-example');

    // Integration examples routes
    this.route('integration-examples/edit-form/readonly-mode');
    this.route('integration-examples/edit-form/validation');
  });

  exports['default'] = Router;
});
define('dummy/routes/application', ['exports', 'ember', 'ember-flexberry/mixins/modal-application-route'], function (exports, _ember, _emberFlexberryMixinsModalApplicationRoute) {
  exports['default'] = _ember['default'].Route.extend(_emberFlexberryMixinsModalApplicationRoute['default'], {});
});
define('dummy/routes/components-examples/flexberry-checkbox/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-checkbox/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-datepicker/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-datepicker/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-dropdown/conditional-render-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-dropdown/conditional-render-example/base', {
        enumeration: null
      });

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-dropdown/empty-value-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-dropdown/empty-value-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-dropdown/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-dropdown/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-field/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-field/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-file/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      return this.get('store').createRecord('components-examples/flexberry-file/settings-example/base', {});
    }
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/model-update-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ManualModelUpdateView'
     */
    modelProjection: 'ManualModelUpdateView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'components-examples/flexberry-groupedit/shared/aggregator'
     */
    modelName: 'components-examples/flexberry-groupedit/shared/aggregator',

    developerUserSettings: { aggregatorDetailsGroupedit: '\n    {\n      "DEFAULT": {\n        "sorting": [\n        {\n          "propName": "Flag",\n          "direction": "desc",\n          "sortPriority": 1\n        }\n        ]\n\n      }\n    }\n  '
    },
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      // Empty aggregator without details.
      return store.createRecord('components-examples/flexberry-groupedit/shared/aggregator', {});
    }
  });
});
define('dummy/routes/components-examples/flexberry-groupedit/settings-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'AggregatorE'
     */
    modelProjection: 'AggregatorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'components-examples/flexberry-groupedit/shared/aggregator'
     */
    modelName: 'components-examples/flexberry-groupedit/shared/aggregator',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      // Empty aggregator without details.
      return store.createRecord('components-examples/flexberry-groupedit/shared/aggregator', {});
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/customizing-window-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'DropDownLookupExampleView'
     */
    modelProjection: 'CustomizeLookupWindowExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/dropdown-mode-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'DropDownLookupExampleView'
     */
    modelProjection: 'DropDownLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/limit-function-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupWithLimitFunctionExampleView'
     */
    modelProjection: 'LookupWithLimitFunctionExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/lookup-block-form-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupInBlockFormView'
     */
    modelProjection: 'LookupInBlockFormView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/lookup-in-modal', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LookupInBlockFormView'
     */
    modelProjection: 'LookupInBlockFormView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-lookup/settings-example', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SettingLookupExampleView'
     */
    modelProjection: 'SettingLookupExampleView',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var base = store.createRecord('ember-flexberry-dummy-suggestion');
      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-menu/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/components-examples/flexberry-objectlistview/configurate-rows', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVSettingExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/custom-filter', ['exports', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  var SimplePredicate = _emberFlexberryData.Query.SimplePredicate;
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
     */
    modelProjection: 'ApplicationUserL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVCustomFilterObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user',

    predicateForFilter: function predicateForFilter(filter) {
      if (filter.type === 'string' && filter.condition === 'like') {
        return new StringPredicate(filter.name).contains(filter.pattern);
      }

      return this._super.apply(this, arguments);
    },

    predicateForAttribute: function predicateForAttribute(attribute, filter) {
      switch (attribute.type) {
        case 'boolean':
          var yes = ['TRUE', 'True', 'true', 'YES', 'Yes', 'yes', 'ДА', 'Да', 'да', '1', '+'];
          var no = ['False', 'False', 'false', 'NO', 'No', 'no', 'НЕТ', 'Нет', 'нет', '0', '-'];

          if (yes.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'true');
          }

          if (no.indexOf(filter) > 0) {
            return new SimplePredicate(attribute.name, 'eq', 'false');
          }

          return null;

        default:
          return this._super.apply(this, arguments);
      }
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/limit-function-example', ['exports', 'ember', 'ember-flexberry/routes/list-form', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryRoutesListForm, _emberFlexberryData) {
  var StringPredicate = _emberFlexberryData.Query.StringPredicate;
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FolvWithLimitFunctionExampleView'
     */
    modelProjection: 'FolvWithLimitFunctionExampleView',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVLimitFunctionExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      It overrides base method and forms the limit predicate for loaded data.
      If there is displayed even number or records per page, records where 'address' attribute contains letter 'S' are filtered.
      If there is displayed odd number or records per page, records where 'address' attribute contains letter 'п' are filtered.
       @public
      @method objectListViewLimitPredicate
      @param {Object} options Method options.
      @param {String} [options.modelName] Type of records to load.
      @param {String} [options.projectionName] Projection name to load data by.
      @param {String} [options.params] Current route query parameters.
      @return {BasePredicate} The predicate to limit loaded data.
     */
    objectListViewLimitPredicate: function objectListViewLimitPredicate(options) {
      var methodOptions = _ember['default'].merge({
        modelName: undefined,
        projectionName: undefined,
        params: undefined
      }, options);

      if (methodOptions.modelName === this.get('modelName') && methodOptions.projectionName === this.get('modelProjection')) {
        var currentPerPageValue = methodOptions.params ? methodOptions.params.perPage : undefined;
        var limitFunction = currentPerPageValue && currentPerPageValue % 2 === 0 ? new StringPredicate('address').contains('S') : new StringPredicate('address').contains('п');
        return limitFunction;
      }

      return undefined;
    }
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/on-edit-form/user', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
     */
    modelProjection: 'ApplicationUserE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/on-edit-form', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
     */
    modelProjection: 'ApplicationUserL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVonEditFormObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/settings-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVSettingExampleObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'FolvWithLimitFunctionExampleView'
     */
    modelProjection: 'FolvWithLimitFunctionExampleView',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVToolbarCustomButtonsExample: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/components-examples/flexberry-simpledatetime/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-simpledatetime/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-textarea/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-textarea/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-textbox/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');

      var base = store.createRecord('components-examples/flexberry-textbox/settings-example/base', {});

      return base;
    }
  });
});
define('dummy/routes/components-examples/flexberry-toggler/settings-example', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('dummy/routes/edit-form', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesEditForm['default'];
    }
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
    */
    modelProjection: 'ApplicationUserE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
    */
    modelName: 'ember-flexberry-dummy-application-user',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-application-user-edit'
    */
    templateName: 'ember-flexberry-dummy-application-user-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-edit', ['exports', 'ember-flexberry/routes/edit-form', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserE'
     */
    modelProjection: 'ApplicationUserE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/ember-flexberry-dummy-application-user-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
     */
    modelProjection: 'ApplicationUserL',

    /**
    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { applicationUserObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-application-user'
     */
    modelName: 'ember-flexberry-dummy-application-user'
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'CommentE'
    */
    modelProjection: 'CommentE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-comment'
    */
    modelName: 'ember-flexberry-dummy-comment',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-comment-edit'
    */
    templateName: 'ember-flexberry-dummy-comment-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-comment-edit', ['exports', 'ember-flexberry/routes/edit-form', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'CommentE'
     */
    modelProjection: 'CommentE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-comment'
     */
    modelName: 'ember-flexberry-dummy-comment'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationE'
    */
    modelProjection: 'LocalizationE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-localization'
    */
    modelName: 'ember-flexberry-dummy-localization',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-localization-edit'
    */
    templateName: 'ember-flexberry-dummy-localization-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-edit', ['exports', 'ember-flexberry/routes/edit-form', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationE'
     */
    modelProjection: 'LocalizationE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-localization'
     */
    modelName: 'ember-flexberry-dummy-localization'
  });
});
define('dummy/routes/ember-flexberry-dummy-localization-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationL'
     */
    modelProjection: 'LocalizationL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { localizationObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-localization'
     */
    modelName: 'ember-flexberry-dummy-localization'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
    */
    modelProjection: 'SuggestionE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
    */
    modelName: 'ember-flexberry-dummy-suggestion',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-suggestion-edit'
    */
    templateName: 'ember-flexberry-dummy-suggestion-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-edit', ['exports', 'ember-flexberry/routes/edit-form', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionE'
     */
    modelProjection: 'SuggestionE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
     Name of model projection to be used as record's properties limitation.
      @property modelProjection
     @type String
     @default 'SuggestionL'
     */
    modelProjection: 'SuggestionL',

    /**
    developerUserSettings.
    Format:
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: {
      SuggestionObjectListView: {}
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion'
     */
    modelName: 'ember-flexberry-dummy-suggestion'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-edit/new', ['exports', 'ember-flexberry/routes/edit-form-new', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditFormNew, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeE'
    */
    modelProjection: 'SuggestionTypeE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
    */
    modelName: 'ember-flexberry-dummy-suggestion-type',

    /**
      Name of template to be rendered.
       @property templateName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type-edit'
    */
    templateName: 'ember-flexberry-dummy-suggestion-type-edit'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-edit', ['exports', 'ember-flexberry/routes/edit-form', 'dummy/mixins/edit-form-route-operations-indication'], function (exports, _emberFlexberryRoutesEditForm, _dummyMixinsEditFormRouteOperationsIndication) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_dummyMixinsEditFormRouteOperationsIndication['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeE'
     */
    modelProjection: 'SuggestionTypeE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/ember-flexberry-dummy-suggestion-type-list', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
     */
    modelProjection: 'SuggestionTypeL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { suggestionTypeObjectListView: {} },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'ember-flexberry-dummy-suggestion-type'
     */
    modelName: 'ember-flexberry-dummy-suggestion-type'
  });
});
define('dummy/routes/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('dummy/routes/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('dummy/routes/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend();
});
define('dummy/routes/integration-examples/edit-form/readonly-mode', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'AggregatorE'
     */
    modelProjection: 'AggregatorE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'integration-examples/edit-form/readonly-mode/aggregator'
     */
    modelName: 'integration-examples/edit-form/readonly-mode/aggregator',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      var store = this.get('store');
      var aggregator = store.createRecord('integration-examples/edit-form/readonly-mode/aggregator', {});
      var detail = store.createRecord('integration-examples/edit-form/readonly-mode/detail', {});
      aggregator.get('details').pushObject(detail);

      return aggregator;
    }
  });
});
define('dummy/routes/integration-examples/edit-form/validation', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'BaseE'
     */
    modelProjection: 'BaseE',

    /**
      Name of model to be used as form's record type.
       @property modelName
      @type String
      @default 'integration-examples/edit-form/validation/base'
     */
    modelName: 'integration-examples/edit-form/validation/base',

    /**
      Returns model related to current route.
       @method model
     */
    model: function model(params) {
      return this.get('store').createRecord('integration-examples/edit-form/validation/base', {});
    }
  });
});
define('dummy/routes/list-form', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesListForm['default'];
    }
  });
});
define('dummy/routes/log-service-examples/settings-example', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL) {
  exports['default'] = _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL['default'].extend({
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationLogL'
    */
    modelProjection: 'ApplicationLogL',

    /**
    developerUserSettings.
    {
    <componentName>: {
      <settingName>: {
          colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
          sorting: [{ propName: <colName>, direction: 'asc'|'desc' }, ... ],
          colsWidths: [ <colName>:<colWidth>, ... ],
        },
        ...
      },
      ...
    }
    For default userSetting use empty name ('').
    <componentName> may contain any of properties: colsOrder, sorting, colsWidth or being empty.
     @property developerUserSettings
    @type Object
    @default {}
    */
    developerUserSettings: { FOLVSettingExample: '\n    {\n      "DEFAULT": {\n        "colsOrder": [\n        {\n          "propName": "timestamp"\n        },\n        {\n          "propName": "category"\n        },\n        {\n          "propName": "machineName"\n        },\n        {\n          "propName": "appDomainName"\n        },\n        {\n          "propName": "processId"\n        },\n        {\n          "propName": "message"\n        },\n        {\n          "propName": "processName",\n          "hide": true\n        },\n        {\n          "propName": "formattedMessage",\n          "hide": true\n        },\n        {\n          "propName": "eventId",\n          "hide": true\n        },\n        {\n          "propName": "priority",\n          "hide": true\n        },\n        {\n          "propName": "severity",\n          "hide": true\n        },\n        {\n          "propName": "title",\n          "hide": true\n        },\n        {\n          "propName": "threadName",\n          "hide": true\n        },\n        {\n          "propName": "win32ThreadId",\n          "hide": true\n        }\n        ],\n        "sorting": [\n        {\n          "propName": "timestamp",\n          "direction": "desc",\n          "sortPriority": 1\n        }\n        ]\n      },\n      "Message": {\n        "colsOrder": [\n        {\n          "propName": "timestamp"\n        },\n        {\n          "propName": "category"\n        },\n        {\n          "propName": "machineName"\n        },\n        {\n          "propName": "appDomainName"\n        },\n        {\n          "propName": "processId"\n        },\n        {\n          "propName": "message"\n        },\n        {\n          "propName": "processName",\n          "hide": true\n        },\n        {\n          "propName": "formattedMessage",\n          "hide": true\n        },\n        {\n          "propName": "eventId",\n          "hide": true\n        },\n        {\n          "propName": "priority",\n          "hide": true\n        },\n        {\n          "propName": "severity",\n          "hide": true\n        },\n        {\n          "propName": "title",\n          "hide": true\n        },\n        {\n          "propName": "threadName",\n          "hide": true\n        },\n        {\n          "propName": "win32ThreadId",\n          "hide": true\n        }\n        ],\n        "sorting": [\n        {\n          "propName": "timestamp",\n          "direction": "desc",\n          "sortPriority": 1\n        }\n        ]\n      },\n      "FormattedMessage": {\n        "colsOrder": [\n        {\n          "propName": "timestamp"\n        },\n        {\n          "propName": "category"\n        },\n        {\n          "propName": "machineName"\n        },\n        {\n          "propName": "appDomainName"\n        },\n        {\n          "propName": "processId"\n        },\n        {\n          "propName": "formattedMessage",\n          "hide": false\n        },\n        {\n          "propName": "message",\n          "hide": true\n        },\n        {\n          "propName": "processName",\n          "hide": true\n        },\n        {\n          "propName": "eventId",\n          "hide": true\n        },\n        {\n          "propName": "priority",\n          "hide": true\n        },\n        {\n          "propName": "severity",\n          "hide": true\n        },\n        {\n          "propName": "title",\n          "hide": true\n        },\n        {\n          "propName": "threadName",\n          "hide": true\n        },\n        {\n          "propName": "win32ThreadId",\n          "hide": true\n        }\n        ],\n        "sorting": [\n        {\n          "propName": "timestamp",\n          "direction": "desc",\n          "sortPriority": 1\n        }\n        ]\n      }\n    }\n    '
    },

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'i-i-s-caseberry-logging-objects-application-log'
    */
    modelName: 'i-i-s-caseberry-logging-objects-application-log'
  });
});
define('dummy/serializers/application', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Serializer.Odata.extend({});
});
define('dummy/serializers/base', ['exports', 'ember-flexberry-data/serializers/base'], function (exports, _emberFlexberryDataSerializersBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersBase['default'];
    }
  });
});
define('dummy/serializers/ember-flexberry-dummy-application-user', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-comment-vote', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      applicationUser: { serialize: 'odata-id', deserialize: 'records' },
      comment: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-comment', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      author: { serialize: 'odata-id', deserialize: 'records' },
      suggestion: { serialize: 'odata-id', deserialize: 'records' },
      userVotes: { serialize: false, deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-localization', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {},

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-localized-suggestion-type', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      localization: { serialize: 'odata-id', deserialize: 'records' },
      suggestionType: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-suggestion-file', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      suggestion: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-suggestion-type', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      parent: { serialize: 'odata-id', deserialize: 'records' },
      localizedTypes: { serialize: false, deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-suggestion', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      editor1: { serialize: 'odata-id', deserialize: 'records' },
      type: { serialize: 'odata-id', deserialize: 'records' },
      author: { serialize: 'odata-id', deserialize: 'records' },
      files: { serialize: false, deserialize: 'records' },
      comments: { serialize: false, deserialize: 'records' },
      userVotes: { serialize: false, deserialize: 'records' }
    },

    serialize: function serialize(snapshot, options) {
      var data = this._super.apply(this, arguments);
      delete data.СommentsCount;
      return data;
    },
    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/ember-flexberry-dummy-vote', ['exports', 'dummy/serializers/application'], function (exports, _dummySerializersApplication) {

  // TODO: ODataSerializer.extend
  exports['default'] = _dummySerializersApplication['default'].extend({
    attrs: {
      applicationUser: { serialize: 'odata-id', deserialize: 'records' },
      suggestion: { serialize: 'odata-id', deserialize: 'records' }
    },

    /**
      Property name in which object identifier is kept.
     */
    primaryKey: '__PrimaryKey'
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('dummy/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('dummy/serializers/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('dummy/serializers/localforage', ['exports', 'ember-localforage-adapter/serializers/localforage'], function (exports, _emberLocalforageAdapterSerializersLocalforage) {
  exports['default'] = _emberLocalforageAdapterSerializersLocalforage['default'];
});
define('dummy/serializers/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('dummy/serializers/odata', ['exports', 'ember-flexberry-data/serializers/odata'], function (exports, _emberFlexberryDataSerializersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOdata['default'];
    }
  });
});
define('dummy/serializers/offline', ['exports', 'ember-flexberry-data/serializers/offline'], function (exports, _emberFlexberryDataSerializersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOffline['default'];
    }
  });
});
define('dummy/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('dummy/services/cols-config-menu', ['exports', 'ember-flexberry/services/cols-config-menu', 'dummy/config/environment'], function (exports, _emberFlexberryServicesColsConfigMenu, _dummyConfigEnvironment) {
  var environment = Ember.get(_dummyConfigEnvironment['default'], 'environment');
  _emberFlexberryServicesColsConfigMenu['default'].reopen({
    environment: environment
  });

  exports['default'] = _emberFlexberryServicesColsConfigMenu['default'];

  // export { default } from 'ember-flexberry/services/cols-config-menu';
});
define('dummy/services/detail-interaction', ['exports', 'ember-flexberry/services/detail-interaction'], function (exports, _emberFlexberryServicesDetailInteraction) {
  exports['default'] = _emberFlexberryServicesDetailInteraction['default'];
});
define('dummy/services/device', ['exports', 'ember-flexberry/services/device'], function (exports, _emberFlexberryServicesDevice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryServicesDevice['default'];
    }
  });
});
define('dummy/services/i18n', ['exports', 'ember-i18n/services/i18n'], function (exports, _emberI18nServicesI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nServicesI18n['default'];
    }
  });
});
define('dummy/services/log', ['exports', 'ember', 'ember-flexberry/services/log', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryServicesLog, _dummyConfigEnvironment) {

  var enabled = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.log.enabled');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      enabled: enabled
    });
  }

  exports['default'] = _emberFlexberryServicesLog['default'];
});
define('dummy/services/moment', ['exports', 'ember', 'dummy/config/environment', 'ember-moment/services/moment'], function (exports, _ember, _dummyConfigEnvironment, _emberMomentServicesMoment) {
  exports['default'] = _emberMomentServicesMoment['default'].extend({
    defaultFormat: _ember['default'].get(_dummyConfigEnvironment['default'], 'moment.outputFormat')
  });
});
define('dummy/services/objectlistview-events', ['exports', 'ember-flexberry/services/objectlistview-events'], function (exports, _emberFlexberryServicesObjectlistviewEvents) {
  exports['default'] = _emberFlexberryServicesObjectlistviewEvents['default'];
});
define('dummy/services/offline-globals', ['exports', 'ember-flexberry-data/services/offline-globals'], function (exports, _emberFlexberryDataServicesOfflineGlobals) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesOfflineGlobals['default'];
    }
  });
});
define('dummy/services/store', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  exports['default'] = _emberData['default'].Store.reopen(_emberFlexberryData.Projection.StoreMixin);
});
define('dummy/services/user-settings', ['exports', 'ember', 'ember-flexberry/services/user-settings', 'dummy/config/environment'], function (exports, _ember, _emberFlexberryServicesUserSettings, _dummyConfigEnvironment) {

  var enabled = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.useUserSettingsService');
  var appName = _ember['default'].get(_dummyConfigEnvironment['default'], 'APP.name');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesUserSettings['default'].reopen({
      isUserSettingsServiceEnabled: enabled,
      appName: appName
    });
  }

  exports['default'] = _emberFlexberryServicesUserSettings['default'];
});
define('dummy/services/user', ['exports', 'ember-flexberry-data/services/user'], function (exports, _emberFlexberryDataServicesUser) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesUser['default'];
    }
  });
});
define('dummy/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define("dummy/templates/application-with-submenu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/application-with-submenu.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "href", "https://github.com/flexberry");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2, "class", "ui centered image");
          dom.setAttribute(el2, "src", "assets/images/flexberry-logo.png");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createAttrMorph(element1, 'href');
          morphs[2] = dom.createAttrMorph(element1, 'title');
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-name.title"], [], ["loc", [null, [5, 11], [5, 67]]]]], ["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [9, 12], [9, 28]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-version.title"], [], ["loc", [null, [11, 11], [11, 70]]]]], ["inline", "t", ["forms.application.sitemap.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [12, 72], [12, 84]]]]], [], []]], ["loc", [null, [12, 4], [12, 86]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [14, 21], [14, 28]]]]], [], ["loc", [null, [14, 2], [14, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/application-with-submenu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example-with-submenu");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui fixed main menu");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "launch icon item");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "sidebar icon");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "right menu");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui main container segment flexberry-content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui close left rail");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ui sticky transition visible");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "flexberry-submenu ui large violet pointing secondary vertical following fluid menu");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [1, 1]);
        var element3 = dom.childAt(element2, [1, 1, 1]);
        var element4 = dom.childAt(element2, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [1, 1, 1]), 1, 1);
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 5, 5);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ui-sidebar", [], ["class", "inverted vertical menu"], 0, null, ["loc", [null, [1, 0], [15, 15]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [20, 11], [20, 37]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [31, 31], [31, 38]]]]], [], ["loc", [null, [31, 12], [31, 40]]]], ["content", "outlet", ["loc", [null, [35, 6], [35, 16]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [36, 6], [36, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "href", "https://github.com/flexberry");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2, "class", "ui centered image");
          dom.setAttribute(el2, "src", "assets/images/flexberry-logo.png");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(fragment, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element2, 'title');
          morphs[1] = dom.createAttrMorph(element3, 'href');
          morphs[2] = dom.createAttrMorph(element3, 'title');
          morphs[3] = dom.createMorphAt(element3, 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-name.title"], [], ["loc", [null, [5, 11], [5, 67]]]]], ["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [9, 12], [9, 28]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-version.title"], [], ["loc", [null, [11, 11], [11, 70]]]]], ["inline", "t", ["forms.application.sitemap.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [12, 72], [12, 84]]]]], [], []]], ["loc", [null, [12, 4], [12, 86]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [14, 21], [14, 28]]]]], [], ["loc", [null, [14, 2], [14, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 16
              },
              "end": {
                "line": 47,
                "column": 16
              }
            },
            "moduleName": "dummy/templates/application.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createTextNode("\n                    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'value');
            morphs[1] = dom.createAttrMorph(element0, 'selected');
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "value", ["get", "locale", ["loc", [null, [44, 34], [44, 40]]]]], ["attribute", "selected", ["subexpr", "eq", [["subexpr", "get", [["get", "i18n", ["loc", [null, [44, 62], [44, 66]]]], "locale"], [], ["loc", [null, [44, 57], [44, 76]]]], ["get", "locale", ["loc", [null, [44, 77], [44, 83]]]]], [], ["loc", [null, [44, 52], [44, 85]]]]], ["content", "locale", ["loc", [null, [45, 20], [45, 30]]]]],
          locals: ["locale"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 12
            },
            "end": {
              "line": 49,
              "column": 12
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("select");
          dom.setAttribute(el1, "class", "ui dropdown");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onchange');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["subexpr", "get", [["get", "i18n", ["loc", [null, [42, 70], [42, 74]]]], "locale"], [], ["loc", [null, [42, 65], [42, 84]]]]], [], ["loc", [null, [42, 60], [42, 85]]]]], ["value", "target.value"], ["loc", [null, [42, 51], [42, 108]]]]], ["block", "each", [["get", "locales", ["loc", [null, [43, 24], [43, 31]]]]], [], 0, null, ["loc", [null, [43, 16], [47, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 12
            },
            "end": {
              "line": 56,
              "column": 12
            }
          },
          "moduleName": "dummy/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["class", "compact", "items", ["subexpr", "@mut", [["get", "locales", ["loc", [null, [52, 22], [52, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "i18n.locale", ["loc", [null, [53, 22], [53, 33]]]]], [], []], "placeholder", ["subexpr", "t", ["forms.application.header.menu.language-dropdown.placeholder"], [], ["loc", [null, [54, 28], [54, 93]]]]], ["loc", [null, [50, 14], [55, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui top attached");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui attached menu");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ui container");
        var el6 = dom.createTextNode("          \n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6, "class", "launch icon item");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "sidebar icon");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          \n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "right item");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        dom.setAttribute(el7, "style", "margin-right: 5px;");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "item");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        dom.setAttribute(el7, "style", "margin-right: 5px;");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-content ui attached segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui main container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "stackable grid container");
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui vertical footer segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui text menu");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("a");
        dom.setAttribute(el5, "class", "brand item");
        dom.setAttribute(el5, "href", "#");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "right menu");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6, "class", "item");
        dom.setAttribute(el6, "target", "_blank");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [1, 1, 1]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element6, [3]);
        var element9 = dom.childAt(element6, [5]);
        var element10 = dom.childAt(element5, [3, 1, 1]);
        var element11 = dom.childAt(element4, [3, 1, 1]);
        var element12 = dom.childAt(element11, [3, 1]);
        var morphs = new Array(14);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element7, 'title');
        morphs[2] = dom.createElementMorph(element7);
        morphs[3] = dom.createMorphAt(element7, 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
        morphs[5] = dom.createMorphAt(element8, 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
        morphs[7] = dom.createMorphAt(element9, 3, 3);
        morphs[8] = dom.createMorphAt(element10, 1, 1);
        morphs[9] = dom.createMorphAt(element10, 3, 3);
        morphs[10] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[11] = dom.createAttrMorph(element12, 'href');
        morphs[12] = dom.createAttrMorph(element12, 'title');
        morphs[13] = dom.createMorphAt(element12, 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ui-sidebar", [], ["class", "inverted vertical menu", "dimPage", false], 0, null, ["loc", [null, [1, 0], [15, 15]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.header.menu.sitemap-button.title"], [], ["loc", [null, [23, 19], [23, 77]]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [21, 13], [21, 39]]]], ["inline", "t", ["forms.application.header.menu.sitemap-button.caption"], [], ["loc", [null, [24, 12], [24, 72]]]], ["inline", "t", ["forms.application.header.menu.user-settings-service-checkbox.caption"], [], ["loc", [null, [29, 14], [29, 90]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "userSettingsService.isUserSettingsServiceEnabled", ["loc", [null, [33, 20], [33, 68]]]]], [], []]], ["loc", [null, [31, 12], [34, 14]]]], ["inline", "t", ["forms.application.header.menu.language-dropdown.caption"], [], ["loc", [null, [38, 14], [38, 77]]]], ["block", "if", [["get", "browserIsInternetExplorer", ["loc", [null, [41, 18], [41, 43]]]]], [], 1, 2, ["loc", [null, [41, 12], [56, 19]]]], ["content", "outlet", ["loc", [null, [64, 12], [64, 22]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [65, 12], [65, 30]]]], ["inline", "t", ["forms.application.footer.application-name"], [], ["loc", [null, [74, 8], [74, 57]]]], ["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [78, 20], [78, 36]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.footer.application-version.title"], [], ["loc", [null, [80, 19], [80, 77]]]]], ["inline", "t", ["forms.application.footer.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [82, 79], [82, 91]]]]], [], []]], ["loc", [null, [82, 12], [82, 93]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "colsconfig-dialog-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "close", "sortByColumnsConfig"], ["loc", [null, [1, 0], [4, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/colsconfig-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/colsconfig-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [9, 2], [9, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/colsconfig-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", "small", "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 8
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "colsConfigHidden", "false");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui icon tiny button");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron up icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui icon tiny button no-margin");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron down icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("select");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "0");
          var el5 = dom.createTextNode("-");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "1");
          var el5 = dom.createTextNode("▲");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "-1");
          var el5 = dom.createTextNode("▼");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "size", "2");
          dom.setAttribute(el4, "type", "input");
          dom.setAttribute(el4, "style", "");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n            ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "size", "2");
          dom.setAttribute(el4, "class", "columnWidth");
          dom.setAttribute(el4, "type", "input");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [0, 0]);
          var element2 = dom.childAt(element0, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [2]);
          var element5 = dom.childAt(element0, [2]);
          var element6 = dom.childAt(element0, [3, 0]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element6, [3]);
          var element9 = dom.childAt(element6, [5]);
          var element10 = dom.childAt(element0, [4]);
          var element11 = dom.childAt(element10, [1]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element0, [5]);
          var element14 = dom.childAt(element13, [1]);
          var element15 = dom.childAt(element14, [1]);
          var morphs = new Array(32);
          morphs[0] = dom.createAttrMorph(element0, 'id');
          morphs[1] = dom.createAttrMorph(element0, 'propName');
          morphs[2] = dom.createAttrMorph(element1, 'id');
          morphs[3] = dom.createAttrMorph(element1, 'class');
          morphs[4] = dom.createElementMorph(element1);
          morphs[5] = dom.createAttrMorph(element2, 'class');
          morphs[6] = dom.createAttrMorph(element3, 'id');
          morphs[7] = dom.createElementMorph(element3);
          morphs[8] = dom.createAttrMorph(element4, 'id');
          morphs[9] = dom.createElementMorph(element4);
          morphs[10] = dom.createAttrMorph(element5, 'class');
          morphs[11] = dom.createMorphAt(element5, 0, 0);
          morphs[12] = dom.createAttrMorph(element6, 'class');
          morphs[13] = dom.createAttrMorph(element6, 'id');
          morphs[14] = dom.createAttrMorph(element6, 'name');
          morphs[15] = dom.createElementMorph(element6);
          morphs[16] = dom.createAttrMorph(element7, 'selected');
          morphs[17] = dom.createAttrMorph(element8, 'selected');
          morphs[18] = dom.createAttrMorph(element9, 'selected');
          morphs[19] = dom.createAttrMorph(element10, 'class');
          morphs[20] = dom.createAttrMorph(element11, 'class');
          morphs[21] = dom.createAttrMorph(element12, 'id');
          morphs[22] = dom.createAttrMorph(element12, 'class');
          morphs[23] = dom.createAttrMorph(element12, 'disabled');
          morphs[24] = dom.createAttrMorph(element12, 'value');
          morphs[25] = dom.createAttrMorph(element12, 'prevValue');
          morphs[26] = dom.createElementMorph(element12);
          morphs[27] = dom.createAttrMorph(element13, 'class');
          morphs[28] = dom.createAttrMorph(element14, 'class');
          morphs[29] = dom.createAttrMorph(element15, 'id');
          morphs[30] = dom.createAttrMorph(element15, 'value');
          morphs[31] = dom.createElementMorph(element15);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "colDesc.trId", ["loc", [null, [17, 20], [17, 32]]]]]]], ["attribute", "propName", ["concat", [["get", "colDesc.propName", ["loc", [null, [17, 48], [17, 64]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.hideId", ["loc", [null, [18, 26], [18, 40]]]]]]], ["attribute", "class", ["concat", ["large ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [18, 62], [18, 74]]]], "hide", "unhide"], [], ["loc", [null, [18, 57], [18, 92]]]], " icon"]]], ["element", "action", ["invertVisibility", ["get", "n", ["loc", [null, [18, 150], [18, 151]]]]], [], ["loc", [null, [18, 122], [18, 153]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [19, 29], [19, 41]]]], "disabled", ""], [], ["loc", [null, [19, 24], [19, 57]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.rowUpId", ["loc", [null, [20, 49], [20, 64]]]]]]], ["element", "action", ["rowUp", ["get", "n", ["loc", [null, [20, 39], [20, 40]]]]], [], ["loc", [null, [20, 22], [20, 42]]]], ["attribute", "id", ["concat", [["get", "colDesc.rowDownId", ["loc", [null, [23, 53], [23, 70]]]]]]], ["element", "action", ["rowDown", ["get", "n", ["loc", [null, [23, 42], [23, 43]]]]], [], ["loc", [null, [23, 23], [23, 45]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [27, 29], [27, 41]]]], "disabled", ""], [], ["loc", [null, [27, 24], [27, 57]]]]]]], ["content", "colDesc.name", ["loc", [null, [27, 59], [27, 75]]]], ["attribute", "class", ["concat", ["ui compact dropdown selection icon button ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [29, 77], [29, 89]]]], "disabled", ""], [], ["loc", [null, [29, 72], [29, 105]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.sortOrderId", ["loc", [null, [29, 114], [29, 133]]]]]]], ["attribute", "name", ["concat", ["sortorder[", ["get", "colDesc.name", ["loc", [null, [29, 155], [29, 167]]]], "]"]]], ["element", "action", ["setSortOrder", ["get", "n", ["loc", [null, [29, 196], [29, 197]]]]], [], ["loc", [null, [29, 172], [29, 199]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderNot", ["loc", [null, [30, 36], [30, 56]]]]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderAsc", ["loc", [null, [31, 36], [31, 56]]]]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderDesc", ["loc", [null, [32, 36], [32, 57]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [35, 29], [35, 41]]]], "disabled", ""], [], ["loc", [null, [35, 24], [35, 57]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [36, 40], [36, 52]]]], "disabled", ""], [], ["loc", [null, [36, 35], [36, 68]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.sortPriorityId", ["loc", [null, [37, 29], [37, 51]]]]]]], ["attribute", "class", ["concat", ["sortPriority ", ["subexpr", "if", [["get", "colDesc.sortOrder", ["loc", [null, [37, 89], [37, 106]]]], "", "hidden"], [], ["loc", [null, [37, 84], [37, 120]]]]]]], ["attribute", "disabled", ["concat", [["subexpr", "if", [["get", "colDesc.sortOrder", ["loc", [null, [37, 137], [37, 154]]]], "", "disabled"], [], ["loc", [null, [37, 132], [37, 170]]]]]]], ["attribute", "value", ["concat", [["get", "colDesc.sortPriority", ["loc", [null, [37, 181], [37, 201]]]]]]], ["attribute", "prevValue", ["concat", [["get", "colDesc.sortPriority", ["loc", [null, [38, 76], [38, 96]]]]]]], ["element", "action", ["setSortPriority", ["get", "n", ["loc", [null, [38, 45], [38, 46]]]]], ["on", "focusOut"], ["loc", [null, [38, 18], [38, 62]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [41, 29], [41, 41]]]], "disabled", ""], [], ["loc", [null, [41, 24], [41, 57]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["subexpr", "or", [["get", "colDesc.hide", ["loc", [null, [42, 42], [42, 54]]]], ["subexpr", "not", [["get", "saveColWidthState", ["loc", [null, [42, 60], [42, 77]]]]], [], ["loc", [null, [42, 55], [42, 78]]]]], [], ["loc", [null, [42, 38], [42, 79]]]], "disabled", ""], [], ["loc", [null, [42, 33], [42, 95]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.columnWidthId", ["loc", [null, [43, 25], [43, 46]]]]]]], ["attribute", "value", ["concat", [["get", "colDesc.columnWidth", ["loc", [null, [43, 88], [43, 107]]]]]]], ["element", "action", ["widthChanged"], ["on", "focusOut"], ["loc", [null, [43, 124], [43, 164]]]]],
        locals: ["colDesc", "n"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-colsconfig content");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "class", "ui unstackable fixed selectable celled table");
        var el3 = dom.createElement("thead");
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "show-columns");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large hide icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "columns-order");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large sort icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "sort-direction");
        var el6 = dom.createElement("nobr");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large sort content ascending icon");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large sort content descending icon");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "sort-priority");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large ordered list icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "column-width");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large text width icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        dom.setAttribute(el3, "id", "colsConfigtableRows");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tfoot");
        dom.setAttribute(el3, "class", "full-width");
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "colspan", "5");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ui action input");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "id", "columnConfigurtionSettingName");
        dom.setAttribute(el7, "type", "input");
        dom.setAttribute(el7, "name", "configName");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "id", "columnConfigurtionButtonSave");
        dom.setAttribute(el7, "class", "ui small button disabled");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "id", "columnConfigurtionButtonUse");
        dom.setAttribute(el6, "class", "ui right floated button disabled");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element16 = dom.childAt(fragment, [0, 1]);
        var element17 = dom.childAt(element16, [0, 0]);
        var element18 = dom.childAt(element17, [0]);
        var element19 = dom.childAt(element17, [1, 0]);
        var element20 = dom.childAt(element17, [2]);
        var element21 = dom.childAt(element17, [3]);
        var element22 = dom.childAt(element17, [4]);
        var element23 = dom.childAt(element17, [5]);
        var element24 = dom.childAt(element16, [2, 0]);
        var element25 = dom.childAt(element24, [0]);
        var element26 = dom.childAt(element25, [1]);
        var element27 = dom.childAt(element26, [1]);
        var element28 = dom.childAt(element26, [3]);
        var element29 = dom.childAt(element25, [3]);
        var morphs = new Array(16);
        morphs[0] = dom.createAttrMorph(element18, 'title');
        morphs[1] = dom.createAttrMorph(element19, 'title');
        morphs[2] = dom.createAttrMorph(element20, 'title');
        morphs[3] = dom.createMorphAt(element20, 0, 0);
        morphs[4] = dom.createAttrMorph(element21, 'title');
        morphs[5] = dom.createAttrMorph(element22, 'title');
        morphs[6] = dom.createAttrMorph(element23, 'title');
        morphs[7] = dom.createMorphAt(dom.childAt(element16, [1]), 1, 1);
        morphs[8] = dom.createAttrMorph(element27, 'placeholder');
        morphs[9] = dom.createAttrMorph(element27, 'value');
        morphs[10] = dom.createElementMorph(element27);
        morphs[11] = dom.createElementMorph(element28);
        morphs[12] = dom.createMorphAt(element28, 1, 1);
        morphs[13] = dom.createElementMorph(element29);
        morphs[14] = dom.createMorphAt(element29, 0, 0);
        morphs[15] = dom.createMorphAt(dom.childAt(element24, [1]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.dont-show-columns"], [], ["loc", [null, [5, 43], [5, 105]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.columns-order"], [], ["loc", [null, [6, 71], [6, 129]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [7, 22], [7, 78]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [7, 80], [7, 136]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-direction"], [], ["loc", [null, [8, 45], [8, 104]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-priority"], [], ["loc", [null, [9, 44], [9, 102]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-width"], [], ["loc", [null, [10, 43], [10, 100]]]]]]], ["block", "each", [["get", "modelForDOM", ["loc", [null, [14, 16], [14, 27]]]]], [], 0, null, ["loc", [null, [14, 8], [48, 9]]]], ["attribute", "placeholder", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.enter-setting-name"], [], ["loc", [null, [55, 27], [55, 90]]]]]]], ["attribute", "value", ["concat", [["get", "settingName", ["loc", [null, [55, 101], [55, 112]]]]]]], ["element", "action", ["setConfigName", ["get", "n", ["loc", [null, [56, 39], [56, 40]]]]], ["on", "focusOut"], ["loc", [null, [56, 14], [56, 56]]]], ["element", "action", ["saveColsSetting"], [], ["loc", [null, [57, 84], [57, 112]]]], ["inline", "t", ["components.colsconfig-dialog-content.save"], [], ["loc", [null, [58, 14], [58, 63]]]], ["element", "action", ["apply"], [], ["loc", [null, [61, 91], [61, 109]]]], ["inline", "t", ["components.colsconfig-dialog-content.use"], [], ["loc", [null, [61, 110], [61, 158]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "saveColWidthState", ["loc", [null, [66, 18], [66, 35]]]]], [], []]], ["loc", [null, [64, 10], [67, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/css-picker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/css-picker.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "checkbox", "name", ["subexpr", "@mut", [["get", "item.name", ["loc", [null, [3, 33], [3, 42]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "item.checked", ["loc", [null, [3, 51], [3, 63]]]]], [], []], "change", ["subexpr", "action", ["onChange"], ["preventDefault", false], ["loc", [null, [3, 71], [3, 111]]]]], ["loc", [null, [3, 4], [3, 113]]]], ["content", "item.name", ["loc", [null, [4, 11], [4, 24]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/css-picker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "_items", ["loc", [null, [1, 8], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [6, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        dom.setAttribute(el1, "class", "flexberry-checkbox-label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "flexberry-checkbox-input", "type", "checkbox", "checked", ["subexpr", "get", [["get", "this", ["loc", [null, [4, 15], [4, 19]]]], "value"], [], ["loc", [null, [4, 10], [4, 28]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["content", "label", ["loc", [null, [7, 2], [7, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-datepicker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-datepicker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "classes", ["loc", [null, [3, 8], [3, 15]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 14], [6, 25]]]]], [], []]], ["loc", [null, [1, 0], [7, 2]]]], ["attribute", "class", ["concat", ["calendar ", ["subexpr", "unless", [["get", "readonly", ["loc", [null, [8, 28], [8, 36]]]], "link"], [], ["loc", [null, [8, 19], [8, 45]]]], " icon"]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "class", "search");
            dom.setAttribute(el1, "autocomplete", "off");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "default text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "placeholder", ["loc", [null, [12, 30], [12, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "text", ["loc", [null, [14, 22], [14, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 6
                },
                "end": {
                  "line": 20,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'data-value');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "data-value", ["concat", [["get", "value", ["loc", [null, [19, 40], [19, 45]]]]]]], ["content", "value", ["loc", [null, [19, 49], [19, 58]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 22,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              dom.setAttribute(el1, "data-value", "_");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "value", ["loc", [null, [21, 41], [21, 50]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 4
              },
              "end": {
                "line": 23,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "value", ["loc", [null, [18, 12], [18, 17]]]]], [], 0, 1, ["loc", [null, [18, 6], [22, 13]]]]],
          locals: ["key", "value"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "dropdown icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [6]), 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "isSearch", ["loc", [null, [7, 8], [7, 16]]]]], [], 0, null, ["loc", [null, [7, 2], [9, 9]]]], ["block", "if", [["get", "showPlaceholder", ["loc", [null, [11, 8], [11, 23]]]]], [], 1, 2, ["loc", [null, [11, 2], [15, 9]]]], ["block", "each-in", [["get", "_items", ["loc", [null, [17, 15], [17, 21]]]]], [], 3, null, ["loc", [null, [17, 4], [23, 16]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-dropdown", [], ["class", ["subexpr", "concat", ["flexberry-dropdown ", ["get", "class", ["loc", [null, [2, 38], [2, 43]]]], " selection", ["subexpr", "if", [["get", "readonly", ["loc", [null, [2, 61], [2, 69]]]], " disabled", ""], [], ["loc", [null, [2, 57], [2, 85]]]]], [], ["loc", [null, [2, 8], [2, 86]]]], "onChange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [3, 11], [3, 30]]]], "onHide", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [4, 9], [4, 30]]]], "onShow", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [5, 9], [5, 30]]]]], 0, null, ["loc", [null, [1, 0], [25, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-field", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-field.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-field.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "label", ["loc", [null, [1, 6], [1, 11]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "flexberry-textbox", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [5, 7], [5, 11]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 8], [6, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [7, 15], [7, 23]]]], "readonly"], [], ["loc", [null, [7, 11], [7, 35]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [8, 11], [8, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [9, 14], [9, 25]]]]], [], []]], ["loc", [null, [4, 0], [10, 2]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "add outline square icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            morphs[1] = dom.createAttrMorph(element6, 'title');
            morphs[2] = dom.createAttrMorph(element6, 'for');
            morphs[3] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-add-button ui icon ", ["get", "buttonClass", ["loc", [null, [14, 51], [14, 62]]]], " ", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [14, 74], [14, 93]]]], "disabled"], [], ["loc", [null, [14, 65], [14, 106]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [15, 14], [15, 64]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [16, 14], [16, 26]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [17, 8], [17, 67]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "trash outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element5, 'class');
            morphs[1] = dom.createAttrMorph(element5, 'title');
            morphs[2] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-remove-button ui icon ", ["get", "buttonClass", ["loc", [null, [23, 54], [23, 65]]]], " ", ["subexpr", "unless", [["get", "_removeButtonIsEnabled", ["loc", [null, [23, 77], [23, 99]]]], "disabled"], [], ["loc", [null, [23, 68], [23, 112]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.remove-button-title"], [], ["loc", [null, [24, 14], [24, 67]]]]], ["element", "action", ["removeButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [25, 8], [25, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 36,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "upload outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            morphs[1] = dom.createAttrMorph(element4, 'title');
            morphs[2] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-upload-button ui icon ", ["get", "buttonClass", ["loc", [null, [31, 54], [31, 65]]]], " ", ["subexpr", "unless", [["get", "_uploadButtonIsEnabled", ["loc", [null, [31, 77], [31, 99]]]], "disabled"], [], ["loc", [null, [31, 68], [31, 112]]]], " ", ["subexpr", "if", [["get", "_uploadIsInProgress", ["loc", [null, [31, 118], [31, 137]]]], "loading"], [], ["loc", [null, [31, 113], [31, 149]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.upload-button-title"], [], ["loc", [null, [32, 14], [32, 67]]]]], ["element", "action", ["uploadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [33, 8], [33, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_addButtonIsVisible", ["loc", [null, [12, 10], [12, 29]]]]], [], 0, null, ["loc", [null, [12, 4], [20, 11]]]], ["block", "if", [["get", "_removeButtonIsVisible", ["loc", [null, [21, 10], [21, 32]]]]], [], 1, null, ["loc", [null, [21, 4], [28, 11]]]], ["block", "if", [["get", "_uploadButtonIsVisible", ["loc", [null, [29, 10], [29, 32]]]]], [], 2, null, ["loc", [null, [29, 4], [36, 11]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "download outline icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createAttrMorph(element3, 'title');
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["flexberry-file-download-button ui icon ", ["get", "buttonClass", ["loc", [null, [40, 54], [40, 65]]]], " ", ["subexpr", "unless", [["get", "_downloadButtonIsEnabled", ["loc", [null, [40, 77], [40, 101]]]], "disabled"], [], ["loc", [null, [40, 68], [40, 114]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.download-button-title"], [], ["loc", [null, [41, 12], [41, 67]]]]], ["element", "action", ["downloadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [42, 6], [42, 70]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 6
              },
              "end": {
                "line": 54,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("img");
            dom.setAttribute(el1, "class", "flexberry-file-image-preview ui small centered image");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            morphs[1] = dom.createAttrMorph(element0, 'alt');
            return morphs;
          },
          statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [52, 16], [52, 43]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [53, 14], [53, 78]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui segment");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element2, 'class');
          return morphs;
        },
        statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [48, 65], [48, 93]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [49, 16], [49, 44]]]]], [], 0, null, ["loc", [null, [49, 6], [54, 17]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [55, 26], [55, 54]]]], "active", ""], [], ["loc", [null, [55, 21], [55, 68]]]], " loader"]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "file icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-file-error-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(fragment, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element7, 'class');
        morphs[1] = dom.createAttrMorph(element8, 'id');
        morphs[2] = dom.createMorphAt(element7, 4, 4);
        morphs[3] = dom.createMorphAt(element7, 6, 6);
        morphs[4] = dom.createMorphAt(element7, 7, 7);
        morphs[5] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[6] = dom.createMorphAt(dom.childAt(element9, [1]), 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element9, [3, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element9, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui ", ["get", "class", ["loc", [null, [1, 17], [1, 22]]]], " action input"]]], ["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 41], [2, 53]]]]], ["inline", "input", [], ["type", "text", "class", "flexberry-file-filename-input", "readonly", "readonly", "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [8, 16], [8, 27]]]]], [], []], "value", ["subexpr", "get", [["get", "this", ["loc", [null, [9, 15], [9, 19]]]], "_fileName"], [], ["loc", [null, [9, 10], [9, 32]]]]], ["loc", [null, [4, 2], [10, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [11, 12], [11, 20]]]]], [], 0, null, ["loc", [null, [11, 2], [37, 13]]]], ["block", "if", [["get", "_downloadButtonIsVisible", ["loc", [null, [38, 8], [38, 32]]]]], [], 1, null, ["loc", [null, [38, 2], [45, 9]]]], ["block", "if", [["subexpr", "and", [["get", "showPreview", ["loc", [null, [47, 11], [47, 22]]]], ["get", "_hasFile", ["loc", [null, [47, 23], [47, 31]]]]], [], ["loc", [null, [47, 6], [47, 32]]]]], [], 2, null, ["loc", [null, [47, 0], [57, 7]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [64, 4], [64, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [68, 6], [68, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [75, 8], [75, 72]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/flexberry-groupedit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-groupedit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "groupedit-toolbar", [], ["componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [4, 14], [4, 25]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [7, 20], [7, 37]]]]], [], []]], ["loc", [null, [1, 0], [8, 2]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [10, 14], [10, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 11], [11, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [12, 14], [12, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [14, 19], [14, 35]]]]], [], []], "headerCellComponent", ["subexpr", "@mut", [["get", "headerCellComponent", ["loc", [null, [15, 22], [15, 41]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [16, 16], [16, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [17, 28], [17, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [18, 26], [18, 49]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [19, 20], [19, 37]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [20, 20], [20, 37]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [21, 24], [21, 45]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [22, 24], [22, 45]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [23, 26], [23, 49]]]]], [], []], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [24, 27], [24, 51]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [25, 15], [25, 27]]]]], [], []], "headerClickable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [26, 18], [26, 27]]]]], [], []], "editOnSeparateRoute", ["subexpr", "@mut", [["get", "editOnSeparateRoute", ["loc", [null, [27, 22], [27, 41]]]]], [], []], "saveBeforeRouteLeave", ["subexpr", "@mut", [["get", "saveBeforeRouteLeave", ["loc", [null, [28, 23], [28, 43]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [29, 10], [29, 17]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [30, 12], [30, 21]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "mainModelProjection", ["loc", [null, [31, 22], [31, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [32, 18], [32, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [33, 10], [33, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [34, 27], [34, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [34, 51], [34, 74]]]], "sortByColumn"], [], ["loc", [null, [34, 23], [34, 90]]]]], [], ["loc", [null, [34, 15], [34, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [35, 33], [35, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [35, 63], [35, 92]]]], "addColumnToSorting"], [], ["loc", [null, [35, 29], [35, 114]]]]], [], ["loc", [null, [35, 21], [35, 115]]]], "action", "groupEditRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [37, 16], [37, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [38, 20], [38, 37]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [39, 19], [39, 35]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [40, 21], [40, 39]]]]], [], []], "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [41, 25], [41, 47]]]]], [], []], "immediateDelete", false, "notUseUserSettings", true], ["loc", [null, [9, 0], [44, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-lookup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 16], [3, 27]]]]], [], []], "class", "search", "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [6, 17], [6, 25]]]], "readonly"], [], ["loc", [null, [6, 13], [6, 37]]]], "needChecksOnValue", false, "isSearch", true], ["loc", [null, [2, 2], [9, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui fluid action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createUnsafeMorphAt(element1, 0, 0);
          morphs[4] = dom.createAttrMorph(element2, 'class');
          morphs[5] = dom.createElementMorph(element2);
          morphs[6] = dom.createUnsafeMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", ["subexpr", "concat", ["lookup-field ", ["subexpr", "if", [["get", "autocomplete", ["loc", [null, [14, 40], [14, 52]]]], "prompt"], [], ["loc", [null, [14, 36], [14, 62]]]]], [], ["loc", [null, [14, 12], [14, 63]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [15, 18], [15, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [16, 12], [16, 24]]]]], [], []], "readonly", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [17, 23], [17, 31]]]], ["subexpr", "not", [["get", "autocomplete", ["loc", [null, [17, 37], [17, 49]]]]], [], ["loc", [null, [17, 32], [17, 50]]]]], [], ["loc", [null, [17, 19], [17, 51]]]], "readonly"], [], ["loc", [null, [17, 15], [17, 63]]]]], ["loc", [null, [12, 4], [18, 6]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [19, 27], [19, 35]]]], " read-only"], [], ["loc", [null, [19, 22], [19, 50]]]], " ", ["get", "chooseButtonClass", ["loc", [null, [19, 53], [19, 70]]]], " button"]]], ["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [19, 99], [19, 109]]]]], [], ["loc", [null, [19, 81], [19, 111]]]], ["content", "chooseText", ["loc", [null, [19, 112], [19, 128]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [20, 27], [20, 35]]]], " read-only"], [], ["loc", [null, [20, 22], [20, 50]]]], " ", ["get", "removeButtonClass", ["loc", [null, [20, 53], [20, 70]]]], " button"]]], ["element", "action", ["remove", ["get", "removeData", ["loc", [null, [20, 99], [20, 109]]]]], [], ["loc", [null, [20, 81], [20, 111]]]], ["content", "removeText", ["loc", [null, [20, 112], [20, 128]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "results");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-lookup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "dropdown", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [22, 7]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [23, 16], [23, 24]]]]], [], ["loc", [null, [23, 11], [23, 25]]]], ["get", "autocomplete", ["loc", [null, [23, 26], [23, 38]]]]], [], ["loc", [null, [23, 6], [23, 39]]]]], [], 2, null, ["loc", [null, [23, 0], [25, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/flexberry-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menu.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-menuitem", [], ["tagName", "", "item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [2, 39], [2, 43]]]]], [], []]], ["loc", [null, [2, 2], [2, 45]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "items", ["loc", [null, [1, 8], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]], ["content", "yield", ["loc", [null, [4, 0], [4, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-menuitem", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "item.title", ["loc", [null, [2, 8], [2, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "item.icon", ["loc", [null, [5, 14], [5, 23]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "item.title", ["loc", [null, [8, 8], [8, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menuitem", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [13, 32], [13, 36]]]]], [], []]], ["loc", [null, [13, 6], [13, 38]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "item.itemsAlignment", ["loc", [null, [11, 19], [11, 38]]]], ["get", "item.itemsAlignment", ["loc", [null, [11, 39], [11, 58]]]]], [], ["loc", [null, [11, 14], [11, 60]]]], " menu"]]], ["block", "each", [["get", "item.items", ["loc", [null, [12, 12], [12, 22]]]]], [], 0, null, ["loc", [null, [12, 4], [14, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-menuitem.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "and", [["get", "titleIsBeforeIcon", ["loc", [null, [1, 11], [1, 28]]]], ["get", "item.title", ["loc", [null, [1, 29], [1, 39]]]]], [], ["loc", [null, [1, 6], [1, 40]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "item.icon", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "titleIsBeforeIcon", ["loc", [null, [7, 16], [7, 33]]]]], [], ["loc", [null, [7, 11], [7, 34]]]], ["get", "item.title", ["loc", [null, [7, 35], [7, 45]]]]], [], ["loc", [null, [7, 6], [7, 46]]]]], [], 2, null, ["loc", [null, [7, 0], [9, 7]]]], ["block", "if", [["get", "hasSubitems", ["loc", [null, [10, 6], [10, 17]]]]], [], 3, null, ["loc", [null, [10, 0], [16, 7]]]], ["content", "yield", ["loc", [null, [17, 0], [17, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/flexberry-objectlistview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 79,
                  "column": 5
                },
                "end": {
                  "line": 81,
                  "column": 5
                }
              },
              "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  		  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "ui button");
              var el2 = dom.createTextNode("...");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 82,
                    "column": 4
                  },
                  "end": {
                    "line": 84,
                    "column": 4
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("  			");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "ui active button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "page.number", ["loc", [null, [83, 38], [83, 53]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 84,
                    "column": 4
                  },
                  "end": {
                    "line": 86,
                    "column": 4
                  }
                },
                "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("  			");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "ui button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["element", "action", [["subexpr", "if", [["get", "this.attrs.gotoPage", ["loc", [null, [85, 44], [85, 63]]]], ["get", "this.attrs.gotoPage", ["loc", [null, [85, 64], [85, 83]]]], "gotoPage"], [], ["loc", [null, [85, 40], [85, 95]]]], ["get", "page.number", ["loc", [null, [85, 96], [85, 107]]]]], [], ["loc", [null, [85, 31], [85, 109]]]], ["content", "page.number", ["loc", [null, [85, 110], [85, 125]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 81,
                  "column": 5
                },
                "end": {
                  "line": 87,
                  "column": 5
                }
              },
              "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "page.isCurrent", ["loc", [null, [82, 10], [82, 24]]]]], [], 0, 1, ["loc", [null, [82, 4], [86, 11]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 78,
                "column": 3
              },
              "end": {
                "line": 88,
                "column": 3
              }
            },
            "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "page.isEllipsis", ["loc", [null, [79, 11], [79, 26]]]]], [], 0, 1, ["loc", [null, [79, 5], [87, 12]]]]],
          locals: ["page"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 0
            },
            "end": {
              "line": 95,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui secondary menu no-margin");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui basic buttons");
          var el3 = dom.createTextNode("\n  	");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          var el4 = dom.createTextNode("«");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  	");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          var el4 = dom.createTextNode("»");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "right menu");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [5]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          morphs[3] = dom.createAttrMorph(element4, 'class');
          morphs[4] = dom.createElementMorph(element4);
          morphs[5] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasPreviousPage", ["loc", [null, [77, 30], [77, 45]]]], "disabled"], [], ["loc", [null, [77, 21], [77, 58]]]], " button"]]], ["element", "action", [["subexpr", "if", [["get", "this.attrs.previousPage", ["loc", [null, [77, 80], [77, 103]]]], ["get", "this.attrs.previousPage", ["loc", [null, [77, 104], [77, 127]]]], "previousPage"], [], ["loc", [null, [77, 76], [77, 143]]]]], [], ["loc", [null, [77, 67], [77, 145]]]], ["block", "each", [["get", "pages", ["loc", [null, [78, 11], [78, 16]]]]], [], 0, null, ["loc", [null, [78, 3], [88, 12]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasNextPage", ["loc", [null, [89, 30], [89, 41]]]], "disabled"], [], ["loc", [null, [89, 21], [89, 54]]]], " button"]]], ["element", "action", [["subexpr", "if", [["get", "this.attrs.nextPage", ["loc", [null, [89, 76], [89, 95]]]], ["get", "this.attrs.nextPage", ["loc", [null, [89, 96], [89, 115]]]], "nextPage"], [], ["loc", [null, [89, 72], [89, 127]]]]], [], ["loc", [null, [89, 63], [89, 129]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [92, 33], [92, 46]]]]], [], []], "value", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [92, 53], [92, 65]]]]], [], []], "class", "compact selection"], ["loc", [null, [92, 6], [92, 93]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 96,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-objectlistview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "olv-toolbar", [], ["class", "ui secondary menu no-margin", "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [3, 18], [3, 33]]]]], [], []], "enableCreateNewButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [4, 29], [4, 37]]]]], [], ["loc", [null, [4, 24], [4, 38]]]], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [5, 16], [5, 29]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [8, 16], [8, 29]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [9, 14], [9, 26]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [10, 10], [10, 17]]]]], [], []], "toggleStateFilters", ["subexpr", "action", ["toggleStateFilters"], [], ["loc", [null, [11, 21], [11, 50]]]], "resetFilters", ["subexpr", "action", [["subexpr", "if", [["get", "resetFilters", ["loc", [null, [12, 29], [12, 41]]]], ["get", "resetFilters", ["loc", [null, [12, 42], [12, 54]]]], "resetFilters"], [], ["loc", [null, [12, 25], [12, 70]]]]], [], ["loc", [null, [12, 17], [12, 71]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "filterText", ["subexpr", "@mut", [["get", "filterText", ["loc", [null, [14, 13], [14, 23]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [15, 14], [15, 25]]]]], [], []], "enableDeleteButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [16, 26], [16, 34]]]]], [], ["loc", [null, [16, 21], [16, 35]]]], "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [17, 16], [17, 29]]]]], [], []], "modelController", ["subexpr", "@mut", [["get", "currentController", ["loc", [null, [18, 18], [18, 35]]]]], [], []], "customButtonAction", "customButtonAction", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [20, 16], [20, 29]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [21, 16], [21, 29]]]]], [], []], "showConfigDialog", "showConfigDialog", "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [23, 20], [23, 37]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "_inHierarchicalMode", ["loc", [null, [24, 21], [24, 40]]]]], [], []], "availableHierarchicalMode", ["subexpr", "@mut", [["get", "_availableHierarchicalMode", ["loc", [null, [25, 28], [25, 54]]]]], [], []], "switchHierarchicalMode", ["subexpr", "action", ["switchHierarchicalMode"], [], ["loc", [null, [26, 25], [26, 58]]]]], ["loc", [null, [1, 0], [27, 2]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [29, 14], [29, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [30, 11], [30, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [31, 14], [31, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [32, 15], [32, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [33, 19], [33, 35]]]]], [], []], "headerCellComponent", ["subexpr", "@mut", [["get", "headerCellComponent", ["loc", [null, [34, 22], [34, 41]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [35, 16], [35, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [36, 28], [36, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [37, 26], [37, 49]]]]], [], []], "showAsteriskInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [38, 30], [38, 38]]]]], [], ["loc", [null, [38, 25], [38, 39]]]], ["get", "showAsteriskInRow", ["loc", [null, [38, 40], [38, 57]]]]], [], ["loc", [null, [38, 20], [38, 58]]]], "showCheckBoxInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [39, 30], [39, 38]]]]], [], ["loc", [null, [39, 25], [39, 39]]]], ["get", "showCheckBoxInRow", ["loc", [null, [39, 40], [39, 57]]]]], [], ["loc", [null, [39, 20], [39, 58]]]], "showDeleteButtonInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [40, 34], [40, 42]]]]], [], ["loc", [null, [40, 29], [40, 43]]]], ["get", "showDeleteButtonInRow", ["loc", [null, [40, 44], [40, 65]]]]], [], ["loc", [null, [40, 24], [40, 66]]]], "showEditMenuItemInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [41, 34], [41, 42]]]]], [], ["loc", [null, [41, 29], [41, 43]]]], ["get", "showEditMenuItemInRow", ["loc", [null, [41, 44], [41, 65]]]]], [], ["loc", [null, [41, 24], [41, 66]]]], "showDeleteMenuItemInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [42, 36], [42, 44]]]]], [], ["loc", [null, [42, 31], [42, 45]]]], ["get", "showDeleteMenuItemInRow", ["loc", [null, [42, 46], [42, 69]]]]], [], ["loc", [null, [42, 26], [42, 70]]]], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [43, 27], [43, 51]]]]], [], []], "rowClickable", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [44, 25], [44, 33]]]]], [], ["loc", [null, [44, 20], [44, 34]]]], ["get", "rowClickable", ["loc", [null, [44, 35], [44, 47]]]]], [], ["loc", [null, [44, 15], [44, 48]]]], "headerClickable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [45, 18], [45, 27]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [46, 10], [46, 17]]]]], [], []], "immediateDelete", true, "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [48, 12], [48, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [49, 18], [49, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [50, 10], [50, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [51, 27], [51, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [51, 51], [51, 74]]]], "sortByColumn"], [], ["loc", [null, [51, 23], [51, 90]]]]], [], ["loc", [null, [51, 15], [51, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [52, 33], [52, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [52, 63], [52, 92]]]], "addColumnToSorting"], [], ["loc", [null, [52, 29], [52, 114]]]]], [], ["loc", [null, [52, 21], [52, 115]]]], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [53, 16], [53, 29]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [54, 14], [54, 26]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [55, 10], [55, 17]]]]], [], []], "applyFilters", ["subexpr", "action", [["subexpr", "if", [["get", "applyFilters", ["loc", [null, [56, 29], [56, 41]]]], ["get", "applyFilters", ["loc", [null, [56, 42], [56, 54]]]], "applyFilters"], [], ["loc", [null, [56, 25], [56, 70]]]]], [], ["loc", [null, [56, 17], [56, 71]]]], "componentForFilter", ["subexpr", "@mut", [["get", "componentForFilter", ["loc", [null, [57, 21], [57, 39]]]]], [], []], "conditionsByType", ["subexpr", "@mut", [["get", "conditionsByType", ["loc", [null, [58, 19], [58, 35]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.filterByAnyMatch", ["loc", [null, [59, 31], [59, 58]]]], ["get", "this.attrs.filterByAnyMatch", ["loc", [null, [59, 59], [59, 86]]]], "filterByAnyMatch"], [], ["loc", [null, [59, 27], [59, 106]]]]], [], ["loc", [null, [59, 19], [59, 107]]]], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [60, 17], [60, 42]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [61, 19], [61, 35]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [62, 21], [62, 39]]]]], [], []], "action", "objectListViewRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [64, 16], [64, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [65, 20], [65, 37]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "selectedRecord", ["loc", [null, [66, 17], [66, 31]]]]], [], []], "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [67, 21], [67, 39]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [68, 21], [68, 39]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "_inHierarchicalMode", ["loc", [null, [69, 21], [69, 40]]]]], [], []], "disableHierarchicalMode", ["subexpr", "if", [["get", "hierarchyByAttribute", ["loc", [null, [70, 30], [70, 50]]]], true, ["get", "disableHierarchicalMode", ["loc", [null, [70, 56], [70, 79]]]]], [], ["loc", [null, [70, 26], [70, 80]]]], "loadRecords", ["subexpr", "action", ["loadRecords"], [], ["loc", [null, [71, 14], [71, 36]]]], "availableHierarchicalMode", ["subexpr", "action", ["availableHierarchicalMode"], [], ["loc", [null, [72, 28], [72, 64]]]]], ["loc", [null, [28, 0], [73, 2]]]], ["block", "unless", [["get", "_inHierarchicalMode", ["loc", [null, [74, 10], [74, 29]]]]], [], 0, null, ["loc", [null, [74, 0], [95, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/flexberry-simpledatetime", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-simpledatetime.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [1, 13], [1, 17]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonlyAttr", ["loc", [null, [1, 27], [1, 39]]]]], [], []], "value", ["subexpr", "@mut", [["get", "_valueAsString", ["loc", [null, [1, 46], [1, 60]]]]], [], []], "min", ["subexpr", "@mut", [["get", "_minAsString", ["loc", [null, [1, 65], [1, 77]]]]], [], []], "max", ["subexpr", "@mut", [["get", "_maxAsString", ["loc", [null, [1, 82], [1, 94]]]]], [], []]], ["loc", [null, [1, 0], [1, 96]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-textarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-textarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [3, 15], [3, 23]]]], "readonly"], [], ["loc", [null, [3, 11], [3, 35]]]], "required", ["subexpr", "if", [["get", "required", ["loc", [null, [4, 15], [4, 23]]]], "required"], [], ["loc", [null, [4, 11], [4, 35]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [5, 14], [5, 25]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [6, 7], [6, 11]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [7, 7], [7, 11]]]]], [], []], "disabled", ["subexpr", "if", [["get", "disabled", ["loc", [null, [8, 15], [8, 23]]]], "disabled"], [], ["loc", [null, [8, 11], [8, 35]]]], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [9, 12], [9, 21]]]]], [], []], "selectionEnd", ["subexpr", "@mut", [["get", "selectionEnd", ["loc", [null, [10, 15], [10, 27]]]]], [], []], "selectionStart", ["subexpr", "@mut", [["get", "selectionStart", ["loc", [null, [11, 17], [11, 31]]]]], [], []], "selectionDirection", ["subexpr", "@mut", [["get", "selectionDirection", ["loc", [null, [12, 21], [12, 39]]]]], [], []], "wrap", ["subexpr", "@mut", [["get", "wrap", ["loc", [null, [13, 7], [13, 11]]]]], [], []], "autofocus", ["subexpr", "if", [["get", "autofocus", ["loc", [null, [14, 16], [14, 25]]]], "autofocus"], [], ["loc", [null, [14, 12], [14, 38]]]], "spellcheck", ["subexpr", "@mut", [["get", "spellcheck", ["loc", [null, [15, 13], [15, 23]]]]], [], []]], ["loc", [null, [1, 0], [16, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-textbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-textbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [4, 15], [4, 23]]]], "readonly"], [], ["loc", [null, [4, 11], [4, 35]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 14], [6, 25]]]]], [], []]], ["loc", [null, [1, 0], [7, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-toggler", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-toggler.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "title");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "dropdown icon");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "flexberry-toggler-caption");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "content flexberry-toggler-content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 2]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["content", "currentCaption", ["loc", [null, [2, 71], [2, 89]]]], ["content", "yield", ["loc", [null, [4, 47], [4, 56]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-validationmessage", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/flexberry-validationmessage.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "error", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/flexberry-validationsummary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/flexberry-validationsummary.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [3, 8], [3, 19]]]]],
        locals: ["message"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 5
          }
        },
        "moduleName": "dummy/templates/components/flexberry-validationsummary.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "list");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "messages", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/groupedit-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "plus icon");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'disabled');
          morphs[2] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [2, 22], [2, 33]]]], " button"]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [2, 75], [2, 83]]]]], ["element", "action", ["addRow"], [], ["loc", [null, [2, 44], [2, 63]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "minus icon");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'disabled');
          morphs[2] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_isDeleteRowsEnabled", ["loc", [null, [5, 25], [5, 45]]]], "", "disabled"], [], ["loc", [null, [5, 20], [5, 61]]]], " ", ["get", "buttonClass", ["loc", [null, [5, 64], [5, 75]]]], " button"]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [5, 97], [5, 105]]]]], ["element", "action", ["deleteRows"], [], ["loc", [null, [5, 108], [5, 131]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/groupedit-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "createNewButton", ["loc", [null, [1, 6], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [4, 6], [4, 18]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ui centered image");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [9, 8], [9, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "description");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [13, 8], [13, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 23,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui cancel button");
              dom.setAttribute(el1, "data-dismiss", "modal");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["components.modal-dialog.close-button-text"], [], ["loc", [null, [21, 10], [21, 59]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 6
                }
              },
              "moduleName": "dummy/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui positive button");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["components.modal-dialog.ok-button-text"], [], ["loc", [null, [26, 10], [26, 56]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "actions");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 2, 2);
            return morphs;
          },
          statements: [["block", "if", [["get", "useCloseButton", ["loc", [null, [19, 12], [19, 26]]]]], [], 0, null, ["loc", [null, [19, 6], [23, 13]]]], ["block", "if", [["get", "useOkButton", ["loc", [null, [24, 12], [24, 23]]]]], [], 1, null, ["loc", [null, [24, 6], [28, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createMorphAt(element1, 1, 1);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [4, 4], [4, 13]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "viewImageContent", ["loc", [null, [6, 19], [6, 35]]]], "image", ""], [], ["loc", [null, [6, 14], [6, 48]]]], " content"]]], ["block", "if", [["get", "viewImageContent", ["loc", [null, [7, 10], [7, 26]]]]], [], 0, 1, ["loc", [null, [7, 4], [15, 11]]]], ["block", "if", [["get", "toolbarVisible", ["loc", [null, [17, 8], [17, 22]]]]], [], 2, null, ["loc", [null, [17, 2], [30, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-modal", [], ["class", ["subexpr", "concat", ["flexberry-modal ", ["get", "sizeClass", ["loc", [null, [1, 45], [1, 54]]]]], [], ["loc", [null, [1, 18], [1, 55]]]]], 0, null, ["loc", [null, [1, 0], [31, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/number-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 40
          }
        },
        "moduleName": "dummy/templates/components/number-input.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "number", "value", ["subexpr", "@mut", [["get", "inputValue", ["loc", [null, [1, 28], [1, 38]]]]], [], []]], ["loc", [null, [1, 0], [1, 40]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/object-list-view-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "formattedValue", ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/object-list-view-header-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", [["get", "column.keyLocale", ["loc", [null, [4, 8], [4, 24]]]]], [], ["loc", [null, [4, 4], [4, 26]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "column.header", ["loc", [null, [6, 4], [6, 21]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "title", "Order ascending");
            var el2 = dom.createTextNode("\n        ▲");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "column.sortNumber", ["loc", [null, [13, 9], [13, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "title", "Order descending");
            var el2 = dom.createTextNode("\n        ▼");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "column.sortNumber", ["loc", [null, [17, 9], [17, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "float:right;");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "column.sortAscending", ["loc", [null, [11, 12], [11, 32]]]]], [], 0, 1, ["loc", [null, [11, 6], [19, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-header-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "title", "Click to change ordering, Ctrl+Click to append ordering for this column");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'data-olv-header-property-name');
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["attribute", "data-olv-header-property-name", ["get", "column.propName", ["loc", [null, [1, 37], [1, 52]]]]], ["block", "if", [["get", "column.keyLocale", ["loc", [null, [3, 8], [3, 24]]]]], [], 0, 1, ["loc", [null, [3, 2], [7, 9]]]], ["block", "if", [["get", "column.sorted", ["loc", [null, [9, 8], [9, 21]]]]], [], 2, null, ["loc", [null, [9, 2], [21, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [8, 55], [8, 85]]]], "transparent"], [], ["loc", [null, [8, 46], [8, 101]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 18,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]], ["subexpr", "not", [["get", "record.config.canBeSelected", ["loc", [null, [14, 41], [14, 68]]]]], [], ["loc", [null, [14, 36], [14, 69]]]]], [], ["loc", [null, [14, 23], [14, 70]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [15, 31], [15, 40]]]], ["get", "record", ["loc", [null, [15, 41], [15, 47]]]]], [], ["loc", [null, [15, 23], [15, 48]]]]], ["loc", [null, [13, 12], [16, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "minus icon");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            morphs[1] = dom.createElementMorph(element3);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [21, 32], [21, 43]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [21, 55], [21, 63]]]], ["subexpr", "not", [["get", "record.config.canBeDeleted", ["loc", [null, [21, 69], [21, 95]]]]], [], ["loc", [null, [21, 64], [21, 96]]]]], [], ["loc", [null, [21, 51], [21, 97]]]], "disabled"], [], ["loc", [null, [21, 46], [21, 110]]]], " button"]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [21, 128], [21, 137]]]], ["get", "record", ["loc", [null, [21, 138], [21, 144]]]]], [], ["loc", [null, [21, 119], [21, 146]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element5, 1, 1);
          morphs[1] = dom.createMorphAt(element5, 2, 2);
          morphs[2] = dom.createMorphAt(element5, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [6, 14], [6, 31]]]]], [], 0, null, ["loc", [null, [6, 8], [10, 15]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [11, 14], [11, 31]]]]], [], 1, null, ["loc", [null, [11, 8], [18, 15]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [19, 14], [19, 35]]]]], [], 2, null, ["loc", [null, [19, 8], [25, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 8
                },
                "end": {
                  "line": 37,
                  "column": 8
                }
              },
              "moduleName": "dummy/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createAttrMorph(element1, 'class');
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["ui button icon mini ", ["get", "buttonClass", ["loc", [null, [34, 47], [34, 58]]]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [34, 62], [34, 95]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [35, 27], [35, 36]]]], "minus", "plus"], [], ["loc", [null, [35, 22], [35, 53]]]], " icon"]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 6
              },
              "end": {
                "line": 38,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "hierarchicalIndent", ["loc", [null, [32, 8], [32, 30]]]], ["block", "if", [["get", "hasRecords", ["loc", [null, [33, 14], [33, 24]]]]], [], 0, null, ["loc", [null, [33, 8], [37, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["element", "action", [["get", "rowClick", ["loc", [null, [30, 17], [30, 25]]]], ["get", "record", ["loc", [null, [30, 26], [30, 32]]]]], ["preventDefault", false], ["loc", [null, [30, 8], [30, 55]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [31, 22], [31, 27]]]]], [], ["loc", [null, [31, 17], [31, 28]]]], ["get", "inHierarchicalMode", ["loc", [null, [31, 29], [31, 47]]]]], [], ["loc", [null, [31, 12], [31, 48]]]]], [], 0, null, ["loc", [null, [31, 6], [38, 13]]]], ["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [39, 18], [39, 52]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [40, 26], [40, 66]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [41, 21], [41, 32]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "record.data", ["loc", [null, [42, 24], [42, 35]]]], ["get", "column.propName", ["loc", [null, [42, 36], [42, 51]]]]], [], ["loc", [null, [42, 19], [42, 52]]]]], [], ["loc", [null, [42, 14], [42, 53]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [43, 17], [43, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [44, 17], [44, 25]]]]], [], []]], ["loc", [null, [39, 6], [45, 8]]]]],
        locals: ["column", "index"],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 2
            },
            "end": {
              "line": 57,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "object-list-view-menu");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", "basic right pointing", "callItemsOnClickCallbacks", false, "configurateItems", ["subexpr", "action", [["get", "menuInRowConfigurateItems", ["loc", [null, [53, 33], [53, 58]]]], ["get", "record", ["loc", [null, [53, 59], [53, 65]]]]], [], ["loc", [null, [53, 25], [53, 66]]]], "onItemClick", ["subexpr", "action", [["get", "menuInRowItemClick", ["loc", [null, [54, 28], [54, 46]]]], ["get", "record", ["loc", [null, [54, 47], [54, 53]]]]], [], ["loc", [null, [54, 20], [54, 54]]]]], ["loc", [null, [50, 6], [55, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 2
              },
              "end": {
                "line": 82,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [62, 13], [62, 19]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [63, 14], [63, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [64, 15], [64, 23]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [65, 15], [65, 23]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [66, 21], [66, 35]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [67, 23], [67, 39]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [68, 23], [68, 39]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [69, 24], [69, 41]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [70, 24], [70, 41]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [71, 28], [71, 49]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [72, 25], [72, 43]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [73, 18], [73, 29]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [74, 15], [74, 23]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [75, 16], [75, 25]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [76, 16], [76, 25]]]]], [], []], "menuInRowItemClick", ["subexpr", "@mut", [["get", "menuInRowItemClick", ["loc", [null, [77, 25], [77, 43]]]]], [], []], "menuInRowConfigurateItems", ["subexpr", "@mut", [["get", "menuInRowConfigurateItems", ["loc", [null, [78, 32], [78, 57]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [79, 20], [79, 33]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [80, 25], [80, 44]]]]], [], []]], ["loc", [null, [61, 4], [81, 6]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 83,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "records", ["loc", [null, [60, 10], [60, 17]]]]], ["key", "key"], 0, null, ["loc", [null, [60, 2], [82, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 84,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "hidden");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element6, 'class');
        morphs[1] = dom.createAttrMorph(element7, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element7, 3, 3);
        morphs[4] = dom.createMorphAt(element6, 3, 3);
        morphs[5] = dom.createMorphAt(element6, 4, 4);
        morphs[6] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "record.config.customClass", ["loc", [null, [1, 13], [1, 38]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [2, 53], [2, 69]]]], "hidden"], [], ["loc", [null, [2, 44], [2, 80]]]]]]], ["content", "record.key", ["loc", [null, [3, 24], [3, 38]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [4, 10], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [27, 11]]]], ["block", "each", [["get", "columns", ["loc", [null, [29, 10], [29, 17]]]]], [], 1, null, ["loc", [null, [29, 2], [47, 11]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [48, 8], [48, 22]]]]], [], 2, null, ["loc", [null, [48, 2], [57, 9]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [59, 11], [59, 20]]]], ["get", "inHierarchicalMode", ["loc", [null, [59, 21], [59, 39]]]]], [], ["loc", [null, [59, 6], [59, 40]]]]], [], 3, null, ["loc", [null, [59, 0], [83, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/object-list-view-single-column-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(":");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["inline fields ", ["subexpr", "if", [["subexpr", "not", [["get", "hasEditableValues", ["loc", [null, [2, 38], [2, 55]]]]], [], ["loc", [null, [2, 33], [2, 56]]]], "readonly"], [], ["loc", [null, [2, 28], [2, 69]]]]]]], ["content", "column.header", ["loc", [null, [3, 11], [3, 28]]]], ["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [4, 16], [4, 50]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [5, 24], [5, 64]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 19], [6, 24]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "model", ["loc", [null, [7, 22], [7, 27]]]], ["get", "column.propName", ["loc", [null, [7, 28], [7, 43]]]]], [], ["loc", [null, [7, 17], [7, 44]]]]], [], ["loc", [null, [7, 12], [7, 45]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [8, 15], [8, 23]]]]], [], []]], ["loc", [null, [4, 4], [9, 6]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view-single-column-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "columns", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [3, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [2, 10], [2, 23]]]]], [], 0, null, ["loc", [null, [2, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 21,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["get", "headerCellComponent.componentName", ["loc", [null, [17, 22], [17, 55]]]]], ["column", ["subexpr", "@mut", [["get", "column", ["loc", [null, [18, 19], [18, 25]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "headerCellComponent.componentProperties", ["loc", [null, [19, 30], [19, 69]]]]], [], []]], ["loc", [null, [17, 10], [20, 12]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
          dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 12
                },
                "end": {
                  "line": 41,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", ["flexberry-dropdown"], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [35, 22], [35, 45]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [36, 22], [36, 46]]]]], [], []], "class", "compact fluid", "placeholder", "", "needChecksOnValue", false], ["loc", [null, [34, 14], [40, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 8
              },
              "end": {
                "line": 43,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "column.filter.conditions", ["loc", [null, [33, 18], [33, 42]]]]], [], 0, null, ["loc", [null, [33, 12], [41, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 8
              },
              "end": {
                "line": 46,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "2");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 12
                },
                "end": {
                  "line": 56,
                  "column": 12
                }
              },
              "moduleName": "dummy/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [52, 26], [52, 54]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [53, 22], [53, 43]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [54, 34], [54, 68]]]]], [], []]], ["loc", [null, [52, 14], [55, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 8
              },
              "end": {
                "line": 58,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "column.filter.component.name", ["loc", [null, [51, 18], [51, 46]]]]], [], 0, null, ["loc", [null, [51, 12], [56, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "rowspan", "2");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          morphs[2] = dom.createMorphAt(element1, 4, 4);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "unless", [["subexpr", "and", [["get", "showHelperColumn", ["loc", [null, [30, 45], [30, 61]]]], ["get", "hasContent", ["loc", [null, [30, 62], [30, 72]]]]], [], ["loc", [null, [30, 40], [30, 73]]]], "hidden"], [], ["loc", [null, [30, 31], [30, 84]]]]]]], ["block", "each", [["get", "columns", ["loc", [null, [31, 16], [31, 23]]]]], [], 0, null, ["loc", [null, [31, 8], [43, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [44, 14], [44, 28]]]]], [], 1, null, ["loc", [null, [44, 8], [46, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [49, 16], [49, 23]]]]], [], 2, null, ["loc", [null, [49, 8], [58, 17]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'colspan');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [63, 23], [63, 30]]]]]]], ["content", "placeholder", ["loc", [null, [63, 61], [63, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [68, 15], [68, 21]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [69, 16], [69, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 17], [70, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [71, 17], [71, 25]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [72, 23], [72, 37]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [73, 25], [73, 41]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [74, 25], [74, 41]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [75, 26], [75, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [76, 26], [76, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [77, 30], [77, 51]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [78, 27], [78, 45]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [79, 27], [79, 45]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [80, 20], [80, 31]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [81, 17], [81, 36]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [82, 18], [82, 38]]]], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [83, 18], [83, 38]]]], "menuInRowItemClick", ["subexpr", "action", ["menuInRowItemClick"], [], ["loc", [null, [84, 27], [84, 56]]]], "menuInRowConfigurateItems", ["subexpr", "action", ["menuInRowConfigurateItems"], [], ["loc", [null, [85, 34], [85, 70]]]]], ["loc", [null, [67, 6], [86, 8]]]]],
        locals: ["record"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        dom.setAttribute(el4, "data-olv-header-property-name", "OlvRowToolbar");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [1]);
        var element4 = dom.childAt(element3, [1, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element3, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createAttrMorph(element5, 'class');
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 4, 4);
        morphs[5] = dom.createMorphAt(element6, 1, 1);
        morphs[6] = dom.createMorphAt(element6, 2, 2);
        morphs[7] = dom.createMorphAt(element6, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [12, 58], [12, 66]]]], "readonly"], [], ["loc", [null, [12, 53], [12, 79]]]], " ", ["get", "tableClass", ["loc", [null, [12, 82], [12, 92]]]], " table"]]], ["attribute", "class", ["concat", ["object-list-view-operations collapsing ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [15, 65], [15, 81]]]], "hidden"], [], ["loc", [null, [15, 56], [15, 92]]]]]]], ["block", "each", [["get", "columns", ["loc", [null, [16, 16], [16, 23]]]]], [], 1, null, ["loc", [null, [16, 8], [21, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [22, 12], [22, 26]]]]], [], 2, null, ["loc", [null, [22, 6], [24, 13]]]], ["block", "if", [["get", "showFilters", ["loc", [null, [28, 10], [28, 21]]]]], [], 3, null, ["loc", [null, [28, 4], [60, 11]]]], ["block", "unless", [["get", "hasContent", ["loc", [null, [61, 14], [61, 24]]]]], [], 4, null, ["loc", [null, [61, 4], [65, 15]]]], ["block", "each", [["get", "contentWithKeys", ["loc", [null, [66, 12], [66, 27]]]]], ["key", "key"], 5, null, ["loc", [null, [66, 4], [87, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("dummy/templates/components/olv-setconfigdialogbutton", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/olv-setconfigdialogbutton.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "large setting icon");
        dom.setAttribute(el2, "title", "customize column views");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [1, 44], [1, 54]]]]], [], ["loc", [null, [1, 26], [1, 56]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/olv-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element12, 'class');
          morphs[1] = dom.createElementMorph(element12);
          morphs[2] = dom.createMorphAt(element12, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [2, 22], [2, 33]]]], " button"]]], ["element", "action", ["refresh"], [], ["loc", [null, [2, 44], [2, 64]]]], ["inline", "t", ["components.olv-toolbar.refresh-button-text"], [], ["loc", [null, [3, 4], [3, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element11, 'class');
          morphs[1] = dom.createElementMorph(element11);
          morphs[2] = dom.createMorphAt(element11, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [7, 22], [7, 33]]]], " ", ["subexpr", "if", [["get", "enableCreateNewButton", ["loc", [null, [7, 41], [7, 62]]]], "", "disabled"], [], ["loc", [null, [7, 36], [7, 78]]]], " button"]]], ["element", "action", ["createNew"], [], ["loc", [null, [7, 87], [7, 109]]]], ["inline", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [8, 4], [8, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element10, 'class');
          morphs[1] = dom.createElementMorph(element10);
          morphs[2] = dom.createMorphAt(element10, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [12, 22], [12, 33]]]], " ", ["subexpr", "if", [["get", "isDeleteButtonEnabled", ["loc", [null, [12, 41], [12, 62]]]], "", "disabled"], [], ["loc", [null, [12, 36], [12, 78]]]], " button"]]], ["element", "action", ["delete"], [], ["loc", [null, [12, 87], [12, 106]]]], ["inline", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [13, 4], [13, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "sitemap icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element9, 'class');
          morphs[1] = dom.createElementMorph(element9);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon ", ["get", "buttonClass", ["loc", [null, [17, 34], [17, 45]]]], " ", ["subexpr", "if", [["get", "inHierarchicalMode", ["loc", [null, [17, 53], [17, 71]]]], "active"], [], ["loc", [null, [17, 48], [17, 82]]]]]]], ["element", "action", [["get", "switchHierarchicalMode", ["loc", [null, [17, 93], [17, 115]]]]], [], ["loc", [null, [17, 84], [17, 117]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 31,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "or");
            dom.setAttribute(el1, "data-text", "•");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            morphs[1] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui button ", ["get", "buttonClass", ["loc", [null, [28, 33], [28, 44]]]]]]], ["element", "action", [["get", "resetFilters", ["loc", [null, [28, 57], [28, 69]]]]], [], ["loc", [null, [28, 48], [28, 71]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 33,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui icon input buttons");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "filter icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var element8 = dom.childAt(element7, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element8, 'class');
          morphs[1] = dom.createElementMorph(element8);
          morphs[2] = dom.createMorphAt(element7, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button ", ["get", "buttonClass", ["loc", [null, [23, 31], [23, 42]]]], " ", ["subexpr", "if", [["get", "showFilters", ["loc", [null, [23, 50], [23, 61]]]], "active"], [], ["loc", [null, [23, 45], [23, 72]]]]]]], ["element", "action", [["get", "toggleStateFilters", ["loc", [null, [23, 83], [23, 101]]]]], [], ["loc", [null, [23, 74], [23, 103]]]], ["block", "if", [["get", "filters", ["loc", [null, [26, 10], [26, 17]]]]], [], 0, null, ["loc", [null, [26, 4], [31, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "search icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "remove icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [3]);
          var element5 = dom.childAt(element3, [5]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element3, 1, 1);
          morphs[1] = dom.createAttrMorph(element4, 'class');
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createAttrMorph(element5, 'class');
          morphs[4] = dom.createElementMorph(element5);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "placeholder", ["subexpr", "t", ["components.olv-toolbar.filter-by-any-match-placeholder"], [], ["loc", [null, [38, 18], [38, 78]]]], "value", ["subexpr", "@mut", [["get", "filterByAnyMatchText", ["loc", [null, [39, 12], [39, 32]]]]], [], []], "enter", "filterByAnyMatch"], ["loc", [null, [36, 4], [40, 6]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [41, 24], [41, 35]]]], " icon button"]]], ["element", "action", ["filterByAnyMatch"], [], ["loc", [null, [41, 51], [41, 80]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [44, 24], [44, 35]]]], " icon button"]]], ["element", "action", ["removeFilter"], [], ["loc", [null, [44, 51], [44, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 54,
                "column": 4
              },
              "end": {
                "line": 59,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "colsSettingsItems", ["loc", [null, [56, 14], [56, 31]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [57, 20], [57, 46]]]]], ["loc", [null, [55, 6], [58, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 0
            },
            "end": {
              "line": 61,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui buttons");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "ui icon button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "large table icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["showConfigDialog"], [], ["loc", [null, [51, 35], [51, 64]]]], ["block", "if", [["get", "colsSettingsItems", ["loc", [null, [54, 10], [54, 27]]]]], [], 0, null, ["loc", [null, [54, 4], [59, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 0
            },
            "end": {
              "line": 68,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "customButton.buttonClasses", ["loc", [null, [64, 19], [64, 45]]]], ["get", "customButton.buttonClasses", ["loc", [null, [64, 46], [64, 72]]]], ""], [], ["loc", [null, [64, 14], [64, 77]]]], " button"]]], ["element", "action", ["customButtonAction", ["get", "customButton.buttonAction", ["loc", [null, [65, 34], [65, 59]]]]], [], ["loc", [null, [65, 4], [65, 61]]]], ["inline", "if", [["get", "customButton.buttonName", ["loc", [null, [66, 9], [66, 32]]]], ["get", "customButton.buttonName", ["loc", [null, [66, 33], [66, 56]]]], ["subexpr", "t", ["components.olv-toolbar.custom-button-text"], [], ["loc", [null, [66, 57], [66, 104]]]]], [], ["loc", [null, [66, 4], [66, 106]]]]],
        locals: ["customButton"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/olv-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "olv-toolbar-info-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "olvt icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui icon button");
        dom.setAttribute(el3, "id", "OLVToolbarInfoCopyButton");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "copy icon");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "olv-toolbar-info-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "remove icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui form");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "olv-toolbar-info-modal-dialog-content center aligned ui field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("textarea");
        dom.setAttribute(el4, "id", "OLVToolbarInfoContent");
        dom.setAttribute(el4, "cols", "80");
        dom.setAttribute(el4, "rows", "20");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element13 = dom.childAt(fragment, [8]);
        var element14 = dom.childAt(element13, [3]);
        var element15 = dom.childAt(element14, [1]);
        var morphs = new Array(13);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[8] = dom.createMorphAt(dom.childAt(element13, [1]), 3, 3);
        morphs[9] = dom.createElementMorph(element15);
        morphs[10] = dom.createMorphAt(element15, 3, 3);
        morphs[11] = dom.createMorphAt(dom.childAt(element14, [3, 1]), 3, 3);
        morphs[12] = dom.createMorphAt(dom.childAt(element13, [5, 1, 1]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "refreshButton", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["block", "if", [["get", "createNewButton", ["loc", [null, [6, 6], [6, 21]]]]], [], 1, null, ["loc", [null, [6, 0], [10, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [11, 6], [11, 18]]]]], [], 2, null, ["loc", [null, [11, 0], [15, 7]]]], ["block", "if", [["get", "availableHierarchicalMode", ["loc", [null, [16, 6], [16, 31]]]]], [], 3, null, ["loc", [null, [16, 0], [20, 7]]]], ["block", "if", [["get", "enableFilters", ["loc", [null, [21, 6], [21, 19]]]]], [], 4, null, ["loc", [null, [21, 0], [33, 7]]]], ["block", "if", [["get", "filterButton", ["loc", [null, [34, 6], [34, 18]]]]], [], 5, null, ["loc", [null, [34, 0], [48, 7]]]], ["block", "if", [["get", "colsConfigButton", ["loc", [null, [49, 6], [49, 22]]]]], [], 6, null, ["loc", [null, [49, 0], [61, 7]]]], ["block", "each", [["get", "customButtons", ["loc", [null, [62, 8], [62, 21]]]]], [], 7, null, ["loc", [null, [62, 0], [68, 9]]]], ["content", "_infoModalDialogCaption", ["loc", [null, [72, 4], [72, 31]]]], ["element", "action", ["copyJSONContent"], [], ["loc", [null, [75, 33], [75, 61]]]], ["inline", "t", ["components.olv-toolbar.copy"], [], ["loc", [null, [77, 6], [77, 41]]]], ["inline", "t", ["components.olv-toolbar.close"], [], ["loc", [null, [82, 8], [82, 44]]]], ["content", "_infoModalDialogContent", ["loc", [null, [88, 63], [88, 90]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("dummy/templates/components/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 16
                },
                "end": {
                  "line": 23,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("=\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "settingMetadata.bindedControllerPropertieDisplayName", ["loc", [null, [22, 18], [22, 74]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 16
                },
                "end": {
                  "line": 25,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("=\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [24, 18], [24, 67]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 16
                },
                "end": {
                  "line": 31,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "to-string", [["get", "settingMetadata.settingValue", ["loc", [null, [30, 30], [30, 58]]]]], [], ["loc", [null, [30, 18], [30, 60]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 33,
                    "column": 18
                  },
                  "end": {
                    "line": 38,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [36, 40], [36, 60]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [36, 61], [36, 106]]]]], [], ["loc", [null, [36, 35], [36, 107]]]]], [], ["loc", [null, [36, 30], [36, 108]]]]], ["loc", [null, [34, 20], [37, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 40,
                    "column": 18
                  },
                  "end": {
                    "line": 45,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [43, 38], [43, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [43, 59], [43, 104]]]]], [], ["loc", [null, [43, 33], [43, 105]]]]], [], ["loc", [null, [43, 28], [43, 106]]]]], ["loc", [null, [41, 20], [44, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 18
                  },
                  "end": {
                    "line": 51,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "number-input", [], ["value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [49, 38], [49, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [49, 59], [49, 104]]]]], [], ["loc", [null, [49, 33], [49, 105]]]]], [], ["loc", [null, [49, 28], [49, 106]]]]], ["loc", [null, [48, 20], [50, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 18
                  },
                  "end": {
                    "line": 58,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "datetime-local", "value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [56, 38], [56, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [56, 59], [56, 104]]]]], [], ["loc", [null, [56, 33], [56, 105]]]]], [], ["loc", [null, [56, 28], [56, 106]]]]], ["loc", [null, [54, 20], [57, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child4 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 63,
                      "column": 22
                    },
                    "end": {
                      "line": 67,
                      "column": 22
                    }
                  },
                  "moduleName": "dummy/templates/components/settings-example.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("option");
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element0, 'value');
                  morphs[1] = dom.createAttrMorph(element0, 'selected');
                  morphs[2] = dom.createMorphAt(element0, 1, 1);
                  return morphs;
                },
                statements: [["attribute", "value", ["get", "item", ["loc", [null, [64, 40], [64, 44]]]]], ["attribute", "selected", ["subexpr", "eq", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [64, 66], [64, 86]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [64, 87], [64, 132]]]]], [], ["loc", [null, [64, 61], [64, 133]]]], ["get", "item", ["loc", [null, [64, 134], [64, 138]]]]], [], ["loc", [null, [64, 56], [64, 140]]]]], ["inline", "to-string", [["get", "item", ["loc", [null, [65, 38], [65, 42]]]]], [], ["loc", [null, [65, 26], [65, 44]]]]],
                locals: ["item"],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 60,
                    "column": 18
                  },
                  "end": {
                    "line": 69,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("select");
                var el2 = dom.createTextNode("\n                      ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("option");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("                    ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'onchange');
                morphs[1] = dom.createMorphAt(element1, 3, 3);
                return morphs;
              },
              statements: [["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [61, 56], [61, 76]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [61, 77], [61, 122]]]]], [], ["loc", [null, [61, 51], [61, 123]]]]], [], ["loc", [null, [61, 46], [61, 124]]]]], ["value", "target.value"], ["loc", [null, [61, 37], [61, 147]]]]], ["block", "each", [["get", "settingMetadata.settingAvailableItems", ["loc", [null, [63, 30], [63, 67]]]]], [], 0, null, ["loc", [null, [63, 22], [67, 31]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child5 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 71,
                    "column": 18
                  },
                  "end": {
                    "line": 76,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "css-picker", [], ["value", ["subexpr", "mut", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [73, 38], [73, 58]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [73, 59], [73, 104]]]]], [], ["loc", [null, [73, 33], [73, 105]]]]], [], ["loc", [null, [73, 28], [73, 106]]]], "items", ["subexpr", "@mut", [["get", "settingMetadata.settingAvailableItems", ["loc", [null, [74, 28], [74, 65]]]]], [], []]], ["loc", [null, [72, 20], [75, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          var child6 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 78,
                    "column": 18
                  },
                  "end": {
                    "line": 80,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "to-string", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [79, 37], [79, 57]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [79, 58], [79, 103]]]]], [], ["loc", [null, [79, 32], [79, 104]]]]], [], ["loc", [null, [79, 20], [79, 106]]]]],
              locals: [],
              templates: []
            };
          })();
          var child7 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 82,
                    "column": 18
                  },
                  "end": {
                    "line": 84,
                    "column": 18
                  }
                },
                "moduleName": "dummy/templates/components/settings-example.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "to-string", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [83, 37], [83, 57]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [83, 58], [83, 103]]]]], [], ["loc", [null, [83, 32], [83, 104]]]]], [], ["loc", [null, [83, 20], [83, 106]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 16
                },
                "end": {
                  "line": 85,
                  "column": 16
                }
              },
              "moduleName": "dummy/templates/components/settings-example.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(8);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
              morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
              morphs[6] = dom.createMorphAt(fragment, 12, 12, contextualElement);
              morphs[7] = dom.createMorphAt(fragment, 14, 14, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [33, 28], [33, 55]]]], "boolean"], [], ["loc", [null, [33, 24], [33, 66]]]]], [], 0, null, ["loc", [null, [33, 18], [38, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [40, 28], [40, 55]]]], "string"], [], ["loc", [null, [40, 24], [40, 65]]]]], [], 1, null, ["loc", [null, [40, 18], [45, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [47, 28], [47, 55]]]], "number"], [], ["loc", [null, [47, 24], [47, 65]]]]], [], 2, null, ["loc", [null, [47, 18], [51, 25]]]], ["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [53, 32], [53, 59]]]], "date"], [], ["loc", [null, [53, 28], [53, 67]]]], ["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [53, 72], [53, 99]]]], "datetime"], [], ["loc", [null, [53, 68], [53, 111]]]]], [], ["loc", [null, [53, 24], [53, 112]]]]], [], 3, null, ["loc", [null, [53, 18], [58, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [60, 28], [60, 55]]]], "enumeration"], [], ["loc", [null, [60, 24], [60, 70]]]]], [], 4, null, ["loc", [null, [60, 18], [69, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [71, 28], [71, 55]]]], "css"], [], ["loc", [null, [71, 24], [71, 62]]]]], [], 5, null, ["loc", [null, [71, 18], [76, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [78, 28], [78, 55]]]], "hasManyArray"], [], ["loc", [null, [78, 24], [78, 71]]]]], [], 6, null, ["loc", [null, [78, 18], [80, 25]]]], ["block", "if", [["subexpr", "eq", [["get", "settingMetadata.settingType", ["loc", [null, [82, 28], [82, 55]]]], "model"], [], ["loc", [null, [82, 24], [82, 64]]]]], [], 7, null, ["loc", [null, [82, 18], [84, 25]]]]],
            locals: [],
            templates: [child0, child1, child2, child3, child4, child5, child6, child7]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 12
              },
              "end": {
                "line": 86,
                "column": 14
              }
            },
            "moduleName": "dummy/templates/components/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "settingMetadata.bindedControllerPropertieDisplayName", ["loc", [null, [21, 22], [21, 74]]]]], [], 0, 1, ["loc", [null, [21, 16], [25, 23]]]], ["block", "if", [["get", "settingMetadata.settingIsWithoutUI", ["loc", [null, [28, 22], [28, 56]]]]], [], 2, 3, ["loc", [null, [28, 16], [85, 23]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 89,
                "column": 14
              },
              "end": {
                "line": 91,
                "column": 14
              }
            },
            "moduleName": "dummy/templates/components/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("=");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "settingMetadata.settingName", ["loc", [null, [90, 16], [90, 47]]]], ["inline", "to-string", [["get", "settingMetadata.settingValue", ["loc", [null, [90, 60], [90, 88]]]]], [], ["loc", [null, [90, 48], [90, 90]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 14
              },
              "end": {
                "line": 93,
                "column": 14
              }
            },
            "moduleName": "dummy/templates/components/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("=");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "to-string", [["get", "settingMetadata.settingName", ["loc", [null, [92, 28], [92, 55]]]]], [], ["loc", [null, [92, 16], [92, 57]]]], ["inline", "to-string", [["subexpr", "get", [["get", "controllerProperties", ["loc", [null, [92, 75], [92, 95]]]], ["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [92, 96], [92, 141]]]]], [], ["loc", [null, [92, 70], [92, 142]]]]], [], ["loc", [null, [92, 58], [92, 144]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 8
            },
            "end": {
              "line": 99,
              "column": 8
            }
          },
          "moduleName": "dummy/templates/components/settings-example.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("=");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(element3, 1, 1);
          morphs[3] = dom.createMorphAt(element3, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [19, 18], [19, 63]]]]], [], 0, null, ["loc", [null, [19, 12], [86, 21]]]], ["block", "if", [["subexpr", "or", [["get", "settingMetadata.settingIsWithoutUI", ["loc", [null, [89, 24], [89, 58]]]], ["subexpr", "not", [["get", "settingMetadata.bindedControllerPropertieName", ["loc", [null, [89, 64], [89, 109]]]]], [], ["loc", [null, [89, 59], [89, 110]]]]], [], ["loc", [null, [89, 20], [89, 111]]]]], [], 1, 2, ["loc", [null, [89, 14], [93, 21]]]], ["inline", "to-string", [["get", "settingMetadata.settingName", ["loc", [null, [96, 26], [96, 53]]]]], [], ["loc", [null, [96, 14], [96, 55]]]], ["inline", "to-string", [["get", "settingMetadata.settingDefaultValue", ["loc", [null, [96, 68], [96, 103]]]]], [], ["loc", [null, [96, 56], [96, 105]]]]],
        locals: ["settingMetadata"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 109,
            "column": 6
          }
        },
        "moduleName": "dummy/templates/components/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui segments");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4, "class", "ui header");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("pre");
        var el5 = dom.createElement("code");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        dom.setAttribute(el3, "class", "ui celled table flexberry-word-break");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("thead");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("tr");
        var el6 = dom.createElement("th");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("th");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tbody");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4, "class", "ui header");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1, 1]);
        var element6 = dom.childAt(element4, [3, 1]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element4, [5, 1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element5, [3, 0]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element7, [0]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element7, [2]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element7, [4]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element8, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["components.settings-example.component-template-caption"], [], ["loc", [null, [4, 28], [4, 90]]]], ["content", "componentTemplateText", ["loc", [null, [5, 17], [5, 42]]]], ["inline", "t", ["components.settings-example.controller-properties-caption"], [], ["loc", [null, [11, 16], [11, 81]]]], ["inline", "t", ["components.settings-example.component-current-settings-caption"], [], ["loc", [null, [12, 12], [12, 82]]]], ["inline", "t", ["components.settings-example.component-default-settings-caption"], [], ["loc", [null, [13, 12], [13, 82]]]], ["block", "each", [["get", "componentSettingsMetadata", ["loc", [null, [16, 16], [16, 41]]]]], [], 0, null, ["loc", [null, [16, 8], [99, 17]]]], ["inline", "t", ["components.settings-example.component-with-applied-settings-caption"], [], ["loc", [null, [105, 28], [105, 103]]]], ["content", "yield", ["loc", [null, [106, 6], [106, 15]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components/ui-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-message-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "caption", ["loc", [null, [2, 22], [2, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [5, 5], [5, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-message-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "caption", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "message", ["loc", [null, [4, 6], [4, 13]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components/ui-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "icon", ["loc", [null, [2, 14], [2, 18]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [9, 4], [9, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [12, 2], [12, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "icon", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "closeable", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["block", "if", [["get", "icon", ["loc", [null, [7, 6], [7, 10]]]]], [], 2, 3, ["loc", [null, [7, 0], [13, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/components/ui-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components/ui-radio", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components/ui-radio.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-checkbox/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-checkbox/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [10, 14], [10, 24]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [11, 14], [11, 19]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 17], [12, 25]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [13, 14], [13, 19]]]]], [], []]], ["loc", [null, [9, 6], [14, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-checkbox/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-checkbox.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 99]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [15, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-datepicker/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-datepicker/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-datepicker", [], ["dateTimeFormat", ["subexpr", "@mut", [["get", "dateTimeFormat", ["loc", [null, [10, 23], [10, 37]]]]], [], []], "hasTimePicker", ["subexpr", "@mut", [["get", "hasTimePicker", ["loc", [null, [11, 22], [11, 35]]]]], [], []], "minDate", ["subexpr", "@mut", [["get", "minDate", ["loc", [null, [12, 16], [12, 23]]]]], [], []], "maxDate", ["subexpr", "@mut", [["get", "maxDate", ["loc", [null, [13, 16], [13, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [14, 14], [14, 24]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [15, 20], [15, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [16, 17], [16, 25]]]]], [], []]], ["loc", [null, [9, 6], [17, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-datepicker/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-datepicker.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 101]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [18, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/conditional-render-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 4
            },
            "end": {
              "line": 15,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-dropdown/conditional-render-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.enumeration", ["loc", [null, [14, 12], [14, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 4
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-dropdown/conditional-render-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["components-examples/flexberry-dropdown/conditional-render-example/enumeration"], [], ["loc", [null, [17, 14], [17, 110]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [18, 14], [18, 31]]]]], [], []]], ["loc", [null, [16, 6], [19, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/conditional-render-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.conditional-render-example.caption"], [], ["loc", [null, [1, 22], [1, 109]]]], ["inline", "ui-message", [], ["type", "info", "closeable", false, "visible", true, "icon", "info circle icon", "title", ["subexpr", "t", ["forms.components-examples.flexberry-dropdown.conditional-render-example.info-caption"], [], ["loc", [null, [9, 12], [9, 102]]]], "message", ["subexpr", "@mut", [["get", "infoMessage", ["loc", [null, [10, 14], [10, 25]]]]], [], []]], ["loc", [null, [4, 4], [11, 6]]]], ["block", "if", [["get", "model.enumeration", ["loc", [null, [13, 10], [13, 27]]]]], [], 0, 1, ["loc", [null, [13, 4], [20, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/empty-value-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/empty-value-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui info message");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "header");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.empty-value-example.caption"], [], ["loc", [null, [1, 22], [1, 102]]]], ["inline", "t", ["forms.components-examples.flexberry-dropdown.empty-value-example.message"], [], ["loc", [null, [5, 4], [5, 84]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["components-examples/flexberry-dropdown/empty-value-example/enumeration"], [], ["loc", [null, [10, 12], [10, 101]]]], "value", "Enum value №2"], ["loc", [null, [9, 4], [12, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/items-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/items-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("        \n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui action fluid input");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "ui green basic button icon");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "large remove circle icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [5, 1]);
        var element2 = dom.childAt(element1, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createElementMorph(element2);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.items-example.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["inline", "ui-message", [], ["type", "info", "closeable", false, "visible", true, "icon", "info circle icon", "title", ["subexpr", "t", ["forms.components-examples.flexberry-dropdown.items-example.info-caption"], [], ["loc", [null, [8, 10], [8, 87]]]], "message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [9, 12], [9, 19]]]]], [], []]], ["loc", [null, [3, 2], [10, 4]]]], ["inline", "flexberry-checkbox", [], ["class", ["subexpr", "concat", [["subexpr", "if", [["get", "value", ["loc", [null, [13, 24], [13, 29]]]], "disabled"], [], ["loc", [null, [13, 20], [13, 41]]]], " toggle"], [], ["loc", [null, [13, 12], [13, 52]]]], "onChange", ["subexpr", "action", ["checked"], [], ["loc", [null, [14, 15], [14, 33]]]], "label", ["subexpr", "t", ["forms.components-examples.flexberry-dropdown.items-example.checkbox-caption"], [], ["loc", [null, [15, 12], [15, 93]]]]], ["loc", [null, [12, 4], [16, 6]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "@mut", [["get", "currentItems", ["loc", [null, [22, 14], [22, 26]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [23, 20], [23, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [24, 17], [24, 25]]]]], [], []], "class", "fluid", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [26, 14], [26, 19]]]]], [], []]], ["loc", [null, [21, 6], [27, 8]]]], ["element", "action", ["resetValue"], [], ["loc", [null, [28, 49], [28, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-dropdown/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-dropdown/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["components-examples/flexberry-dropdown/settings-example/enumeration"], [], ["loc", [null, [10, 14], [10, 100]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [11, 14], [11, 31]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [12, 20], [12, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 17], [13, 25]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [14, 14], [14, 19]]]]], [], []]], ["loc", [null, [9, 6], [15, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-dropdown/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-dropdown.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 99]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [16, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-field/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-field/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-field", [], ["class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [10, 14], [10, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [11, 14], [11, 24]]]]], [], []], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [12, 14], [12, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [13, 20], [13, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [14, 17], [14, 25]]]]], [], []]], ["loc", [null, [9, 6], [15, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-field/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-field.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [16, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-file/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-file/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [9, 12], [9, 22]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [10, 18], [10, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 15], [11, 23]]]]], [], []], "uploadUrl", ["subexpr", "@mut", [["get", "uploadUrl", ["loc", [null, [12, 16], [12, 25]]]]], [], []], "maxUploadFileSize", ["subexpr", "@mut", [["get", "maxUploadFileSize", ["loc", [null, [13, 24], [13, 41]]]]], [], []], "showPreview", ["subexpr", "@mut", [["get", "showPreview", ["loc", [null, [14, 18], [14, 29]]]]], [], []], "showUploadButton", ["subexpr", "@mut", [["get", "showUploadButton", ["loc", [null, [15, 23], [15, 39]]]]], [], []], "showDownloadButton", ["subexpr", "@mut", [["get", "showDownloadButton", ["loc", [null, [16, 25], [16, 43]]]]], [], []], "showModalDialogOnUploadError", ["subexpr", "@mut", [["get", "showModalDialogOnUploadError", ["loc", [null, [17, 35], [17, 63]]]]], [], []], "showModalDialogOnDownloadError", ["subexpr", "@mut", [["get", "showModalDialogOnDownloadError", ["loc", [null, [18, 37], [18, 67]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [19, 12], [19, 17]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [20, 18], [20, 29]]]]], [], []]], ["loc", [null, [8, 4], [21, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-file/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-file.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 95]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 25], [4, 29]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [5, 30], [5, 55]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [6, 26], [6, 47]]]]], [], []]], 0, null, ["loc", [null, [3, 2], [22, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/model-update-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/model-update-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui button");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui button");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createMorphAt(element2, 0, 0);
        morphs[3] = dom.createElementMorph(element3);
        morphs[4] = dom.createMorphAt(element3, 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-groupedit.model-update-example.caption"], [], ["loc", [null, [1, 22], [1, 104]]]], ["element", "action", ["addDetail", ["get", "record", ["loc", [null, [4, 51], [4, 57]]]]], [], ["loc", [null, [4, 30], [4, 59]]]], ["inline", "t", ["forms.components-examples.flexberry-groupedit.model-update-example.addDetailButton"], [], ["loc", [null, [4, 60], [4, 150]]]], ["element", "action", ["deleteDetail", ["get", "record", ["loc", [null, [5, 54], [5, 60]]]]], [], ["loc", [null, [5, 30], [5, 62]]]], ["inline", "t", ["forms.components-examples.flexberry-groupedit.model-update-example.removeDetailButton"], [], ["loc", [null, [5, 63], [5, 156]]]], ["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [10, 16], [10, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [11, 24], [11, 58]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [12, 20], [12, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [13, 17], [13, 25]]]]], [], []], "createNewButton", true, "deleteButton", true, "showAsteriskInRow", true, "showCheckBoxInRow", true, "showDeleteButtonInRow", true, "rowClickable", false, "immediateDelete", false, "editOnSeperateRoute", false, "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [22, 31], [22, 53]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [24, 17], [24, 25]]]]], [], []]], ["loc", [null, [8, 4], [25, 8]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-groupedit/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-groupedit/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [11, 16], [11, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "detailsProjection", ["loc", [null, [12, 24], [12, 41]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [13, 20], [13, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [14, 17], [14, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [15, 21], [15, 33]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [16, 24], [16, 39]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [17, 21], [17, 33]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [18, 26], [18, 43]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [19, 26], [19, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [20, 26], [20, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [21, 30], [21, 51]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [22, 30], [22, 51]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [23, 32], [23, 55]]]]], [], []], "useSingleColumn", ["subexpr", "@mut", [["get", "useSingleColumn", ["loc", [null, [24, 24], [24, 39]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [25, 32], [25, 55]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [26, 21], [26, 33]]]]], [], []], "immediateDelete", ["subexpr", "@mut", [["get", "immediateDelete", ["loc", [null, [27, 24], [27, 39]]]]], [], []]], ["loc", [null, [9, 6], [28, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-groupedit/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-groupedit.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 100]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [29, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/customizing-window-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/customizing-window-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.customizing-window-example.caption"], [], ["loc", [null, [1, 22], [1, 107]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "CustomizeLookupWindowExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.customizing-window-example.titleLookup"], [], ["loc", [null, [8, 12], [8, 99]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "limitFunction", null, "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [14, 35], [14, 69]]]]], ["loc", [null, [4, 4], [15, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/dropdown-mode-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/dropdown-mode-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.dropdown-mode-example.caption"], [], ["loc", [null, [1, 22], [1, 102]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "DropDownLookupExampleView", "displayAttributeName", "name", "title", "Master", "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [13, 27], [13, 53]]]]], [], []], "dropdown", true], ["loc", [null, [4, 4], [15, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/limit-function-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/limit-function-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.limit-function-example.caption"], [], ["loc", [null, [1, 22], [1, 103]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [5, 12], [5, 22]]]]], [], []], "projection", "LookupWithLimitFunctionExampleView", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.components-examples.flexberry-lookup.limit-function-example.titleLookup"], [], ["loc", [null, [8, 12], [8, 95]]]], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []], "lookupWindowCustomProperties", ["subexpr", "action", ["getLookupFolvProperties"], [], ["loc", [null, [13, 35], [13, 69]]]], "lookupLimitPredicate", ["subexpr", "@mut", [["get", "lookupCustomLimitPredicate", ["loc", [null, [14, 27], [14, 53]]]]], [], []], "autocomplete", true], ["loc", [null, [4, 4], [16, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/lookup-block-form-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-block-form-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui info message");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "header");
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "list");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("li");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-block-form-example.caption"], [], ["loc", [null, [1, 22], [1, 106]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-block-form-example.message"], [], ["loc", [null, [5, 2], [5, 86]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-block-form-example.paragraph1"], [], ["loc", [null, [8, 8], [8, 95]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-block-form-example.paragraph2"], [], ["loc", [null, [9, 8], [9, 95]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-block-form-example.paragraph3"], [], ["loc", [null, [10, 8], [10, 95]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/lookup-in-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-in-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui form flexberry-vertical-form");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "field");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui button");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [3, 1]);
          var element3 = dom.childAt(element2, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element3);
          morphs[3] = dom.createMorphAt(element3, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.captionModal"], [], ["loc", [null, [9, 22], [9, 101]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [14, 16], [14, 29]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [15, 23], [15, 28]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [19, 19], [19, 27]]]]], [], []], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [20, 17], [20, 44]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [21, 17], [21, 45]]]]], ["loc", [null, [13, 8], [22, 10]]]], ["element", "action", ["logOut"], [], ["loc", [null, [24, 32], [24, 51]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonClose"], [], ["loc", [null, [24, 52], [24, 130]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-in-modal.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui form flexberry-vertical-form");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "field");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui button");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3, 1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.captionModalDouble"], [], ["loc", [null, [30, 22], [30, 107]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [35, 16], [35, 26]]]]], [], []], "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", "Master", "relationName", "type", "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [40, 17], [40, 44]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [41, 17], [41, 45]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [42, 19], [42, 27]]]]], [], []]], ["loc", [null, [34, 8], [43, 10]]]], ["element", "action", ["logOutDouble"], [], ["loc", [null, [45, 32], [45, 57]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonClose"], [], ["loc", [null, [45, 58], [45, 136]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 49,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/lookup-in-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "ui button");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createElementMorph(element5);
        morphs[2] = dom.createMorphAt(element5, 0, 0);
        morphs[3] = dom.createElementMorph(element6);
        morphs[4] = dom.createMorphAt(element6, 0, 0);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.caption"], [], ["loc", [null, [1, 22], [1, 96]]]], ["element", "action", ["modalWindow"], [], ["loc", [null, [4, 28], [4, 52]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonModal"], [], ["loc", [null, [4, 53], [4, 131]]]], ["element", "action", ["modalWindowDouble"], [], ["loc", [null, [5, 28], [5, 58]]]], ["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-in-modal.buttonModalDouble"], [], ["loc", [null, [5, 59], [5, 143]]]], ["block", "ui-modal", [], ["id", "repeat-window"], 0, null, ["loc", [null, [8, 0], [27, 13]]]], ["block", "ui-modal", [], ["id", "repeat-window-double"], 1, null, ["loc", [null, [29, 0], [48, 13]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-lookup/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-lookup/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-lookup", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [10, 20], [10, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 17], [11, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [12, 14], [12, 24]]]]], [], []], "projection", "SettingLookupExampleView", "displayAttributeName", "name", "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [15, 14], [15, 19]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [16, 21], [16, 26]]]]], [], []], "relationName", "type", "choose", "showLookupDialog", "remove", "removeLookupValue", "autocomplete", ["subexpr", "@mut", [["get", "autocomplete", ["loc", [null, [20, 21], [20, 33]]]]], [], []], "dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [21, 17], [21, 25]]]]], [], []], "chooseText", ["subexpr", "@mut", [["get", "chooseText", ["loc", [null, [22, 19], [22, 29]]]]], [], []], "removeText", ["subexpr", "@mut", [["get", "removeText", ["loc", [null, [23, 19], [23, 29]]]]], [], []], "chooseButtonClass", ["subexpr", "@mut", [["get", "chooseButtonClass", ["loc", [null, [24, 26], [24, 43]]]]], [], []], "removeButtonClass", ["subexpr", "@mut", [["get", "removeButtonClass", ["loc", [null, [25, 26], [25, 43]]]]], [], []]], ["loc", [null, [9, 6], [26, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-lookup/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 97]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [27, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-menu/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-menu/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          morphs[2] = dom.createMorphAt(element0, 3, 3);
          morphs[3] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "menuPosition", ["loc", [null, [9, 17], [9, 29]]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "itemsLeft", ["loc", [null, [11, 14], [11, 23]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [12, 20], [12, 46]]]], "collapseMenuOnItemClick", ["subexpr", "@mut", [["get", "collapseMenuOnItemClick", ["loc", [null, [13, 32], [13, 55]]]]], [], []]], ["loc", [null, [10, 6], [14, 8]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "itemsRight", ["loc", [null, [16, 14], [16, 24]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [17, 20], [17, 46]]]], "collapseMenuOnItemClick", ["subexpr", "@mut", [["get", "collapseMenuOnItemClick", ["loc", [null, [18, 32], [18, 55]]]]], [], []]], ["loc", [null, [15, 6], [19, 8]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "itemsSubmenu", ["loc", [null, [21, 14], [21, 26]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [22, 20], [22, 46]]]], "collapseMenuOnItemClick", ["subexpr", "@mut", [["get", "collapseMenuOnItemClick", ["loc", [null, [23, 32], [23, 55]]]]], [], []]], ["loc", [null, [20, 6], [24, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-menu/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-menu.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 95]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [26, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/configurate-rows", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/configurate-rows.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["componentName", "SuggestionsObjectListView", "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [11, 16], [11, 21]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "editFormRoute", "ember-flexberry-dummy-suggestion-edit", "modelProjection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [14, 24], [14, 34]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [15, 25], [15, 52]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [16, 19], [16, 25]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [17, 16], [17, 31]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 21], [18, 44]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 27], [19, 56]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [20, 14], [20, 19]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [21, 21], [21, 33]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [22, 22], [22, 35]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [23, 24], [23, 39]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [24, 20], [24, 31]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [25, 21], [25, 44]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [26, 17], [26, 36]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [27, 17], [27, 36]]]], "configurateRow", ["subexpr", "action", ["configurateRow"], [], ["loc", [null, [28, 23], [28, 48]]]], "componentName", "FOLVSettingExampleObjectListView"], ["loc", [null, [9, 6], [30, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/configurate-rows.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.configurate-rows.caption"], [], ["loc", [null, [1, 22], [1, 105]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [31, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/custom-filter", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/custom-filter.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.custom-filter.caption"], [], ["loc", [null, [1, 4], [1, 84]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "enableFilters", true, "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [11, 12], [11, 19]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [12, 17], [12, 40]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [13, 17], [13, 40]]]], "componentForFilter", ["subexpr", "action", ["componentForFilter"], [], ["loc", [null, [14, 23], [14, 52]]]], "conditionsByType", ["subexpr", "action", ["conditionsByType"], [], ["loc", [null, [15, 21], [15, 48]]]], "filterButton", true, "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [17, 15], [17, 21]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [18, 21], [18, 48]]]], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [19, 12], [19, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [21, 10], [21, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [22, 17], [22, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [23, 18], [23, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [24, 20], [24, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [25, 16], [25, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [26, 17], [26, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [27, 23], [27, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [28, 17], [28, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [29, 13], [29, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [30, 13], [30, 32]]]], "colsConfigButton", false, "componentName", "FOLVCustomFilterObjectListView"], ["loc", [null, [3, 2], [33, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/limit-function-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/limit-function-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.limit-function-example.caption"], [], ["loc", [null, [1, 22], [1, 111]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "createNewButton", false, "showCheckBoxInRow", false, "showDeleteButtonInRow", false, "showEditMenuItemInRow", false, "showDeleteMenuItemInRow", false, "rowClickable", false, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [15, 19], [15, 46]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [16, 13], [16, 19]]]]], [], []], "filterButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [20, 10], [20, 25]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [22, 15], [22, 38]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [23, 21], [23, 50]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [24, 8], [24, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [25, 15], [25, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [26, 16], [26, 29]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [27, 18], [27, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [28, 14], [28, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [29, 15], [29, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [30, 11], [30, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [31, 11], [31, 30]]]], "componentName", "FOLVLimitFunctionExampleObjectListView"], ["loc", [null, [3, 0], [33, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 8
              },
              "end": {
                "line": 26,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [25, 59], [25, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [25, 77], [25, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 8
              },
              "end": {
                "line": 29,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [28, 59], [28, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [28, 85], [28, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 8
              },
              "end": {
                "line": 32,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [31, 59], [31, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [31, 79], [31, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 6
            },
            "end": {
              "line": 33,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [24, 23], [24, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [24, 43], [24, 63]]]]], [], ["loc", [null, [24, 38], [24, 64]]]]], [], ["loc", [null, [24, 18], [24, 65]]]]], [], 0, null, ["loc", [null, [24, 8], [26, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [27, 23], [27, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [27, 43], [27, 63]]]]], [], ["loc", [null, [27, 38], [27, 64]]]]], [], ["loc", [null, [27, 18], [27, 65]]]]], [], 1, null, ["loc", [null, [27, 8], [29, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [30, 23], [30, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [30, 44], [30, 58]]]]], [], ["loc", [null, [30, 39], [30, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [30, 65], [30, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [30, 80], [30, 100]]]]], [], ["loc", [null, [30, 60], [30, 101]]]]], [], ["loc", [null, [30, 35], [30, 102]]]]], [], ["loc", [null, [30, 18], [30, 103]]]]], [], 2, null, ["loc", [null, [30, 8], [32, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.name", ["loc", [null, [39, 31], [39, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 52,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.eMail", ["loc", [null, [51, 31], [51, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone1", ["loc", [null, [63, 31], [63, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 74,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone2", ["loc", [null, [75, 31], [75, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 4
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.phone3", ["loc", [null, [87, 31], [87, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 99,
              "column": 4
            },
            "end": {
              "line": 101,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.activated", ["loc", [null, [100, 30], [100, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 105,
              "column": 4
            },
            "end": {
              "line": 107,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vK", ["loc", [null, [106, 31], [106, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 119,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.facebook", ["loc", [null, [118, 31], [118, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.twitter", ["loc", [null, [130, 31], [130, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.birthday", ["loc", [null, [143, 30], [143, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 153,
              "column": 4
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.gender", ["loc", [null, [154, 30], [154, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 160,
              "column": 4
            },
            "end": {
              "line": 162,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.vip", ["loc", [null, [161, 30], [161, 50]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 168,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.karma", ["loc", [null, [167, 31], [167, 53]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 190,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form/user.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("hr");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode(":");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [5, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [7]);
        var element7 = dom.childAt(element3, [9]);
        var element8 = dom.childAt(element3, [11]);
        var element9 = dom.childAt(element3, [13]);
        var element10 = dom.childAt(element3, [15]);
        var element11 = dom.childAt(element3, [17]);
        var element12 = dom.childAt(element3, [19]);
        var element13 = dom.childAt(element3, [21]);
        var element14 = dom.childAt(element3, [23]);
        var element15 = dom.childAt(element3, [25]);
        var element16 = dom.childAt(element3, [27]);
        var element17 = dom.childAt(element3, [29]);
        var element18 = dom.childAt(element3, [31]);
        var element19 = dom.childAt(element3, [35]);
        var morphs = new Array(39);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createElementMorph(element5);
        morphs[6] = dom.createMorphAt(element5, 0, 0);
        morphs[7] = dom.createMorphAt(element6, 1, 1);
        morphs[8] = dom.createMorphAt(element6, 3, 3);
        morphs[9] = dom.createMorphAt(element7, 1, 1);
        morphs[10] = dom.createMorphAt(element7, 3, 3);
        morphs[11] = dom.createMorphAt(element8, 1, 1);
        morphs[12] = dom.createMorphAt(element8, 3, 3);
        morphs[13] = dom.createMorphAt(element9, 1, 1);
        morphs[14] = dom.createMorphAt(element9, 3, 3);
        morphs[15] = dom.createMorphAt(element10, 1, 1);
        morphs[16] = dom.createMorphAt(element10, 3, 3);
        morphs[17] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[18] = dom.createMorphAt(element11, 3, 3);
        morphs[19] = dom.createMorphAt(element11, 5, 5);
        morphs[20] = dom.createMorphAt(element12, 1, 1);
        morphs[21] = dom.createMorphAt(element12, 3, 3);
        morphs[22] = dom.createMorphAt(element13, 1, 1);
        morphs[23] = dom.createMorphAt(element13, 3, 3);
        morphs[24] = dom.createMorphAt(element14, 1, 1);
        morphs[25] = dom.createMorphAt(element14, 3, 3);
        morphs[26] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element15, 3, 3);
        morphs[28] = dom.createMorphAt(element15, 5, 5);
        morphs[29] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[30] = dom.createMorphAt(element16, 3, 3);
        morphs[31] = dom.createMorphAt(element16, 5, 5);
        morphs[32] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[33] = dom.createMorphAt(element17, 3, 3);
        morphs[34] = dom.createMorphAt(element17, 5, 5);
        morphs[35] = dom.createMorphAt(element18, 1, 1);
        morphs[36] = dom.createMorphAt(element18, 3, 3);
        morphs[37] = dom.createMorphAt(dom.childAt(element19, [1]), 0, 0);
        morphs[38] = dom.createMorphAt(element19, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [1, 22], [1, 87]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 18], [2, 27]]]], " form flexberry-vertical-form"]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [23, 16], [23, 24]]]]], [], 0, null, ["loc", [null, [23, 6], [33, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [34, 46], [34, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [34, 65], [34, 106]]]], ["block", "if", [["get", "model.errors.name", ["loc", [null, [38, 10], [38, 27]]]]], [], 1, null, ["loc", [null, [38, 4], [40, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [42, 15], [42, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [45, 16], [45, 33]]]], "error", ""], [], ["loc", [null, [45, 12], [45, 45]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [46, 12], [46, 80]]]]], ["loc", [null, [41, 4], [47, 6]]]], ["block", "if", [["get", "model.errors.eMail", ["loc", [null, [50, 10], [50, 28]]]]], [], 2, null, ["loc", [null, [50, 4], [52, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [56, 12], [56, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [57, 16], [57, 34]]]], "error", ""], [], ["loc", [null, [57, 12], [57, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.eMail-caption"], [], ["loc", [null, [58, 12], [58, 81]]]]], ["loc", [null, [53, 4], [59, 6]]]], ["block", "if", [["get", "model.errors.phone1", ["loc", [null, [62, 10], [62, 29]]]]], [], 3, null, ["loc", [null, [62, 4], [64, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [66, 15], [66, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [68, 12], [68, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [69, 16], [69, 35]]]], "error", ""], [], ["loc", [null, [69, 12], [69, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-caption"], [], ["loc", [null, [70, 12], [70, 82]]]]], ["loc", [null, [65, 4], [71, 6]]]], ["block", "if", [["get", "model.errors.phone2", ["loc", [null, [74, 10], [74, 29]]]]], [], 4, null, ["loc", [null, [74, 4], [76, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [78, 15], [78, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [80, 12], [80, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [81, 16], [81, 35]]]], "error", ""], [], ["loc", [null, [81, 12], [81, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone2-caption"], [], ["loc", [null, [82, 12], [82, 82]]]]], ["loc", [null, [77, 4], [83, 6]]]], ["block", "if", [["get", "model.errors.phone3", ["loc", [null, [86, 10], [86, 29]]]]], [], 5, null, ["loc", [null, [86, 4], [88, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [90, 15], [90, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [92, 12], [92, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [93, 16], [93, 35]]]], "error", ""], [], ["loc", [null, [93, 12], [93, 47]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone3-caption"], [], ["loc", [null, [94, 12], [94, 82]]]]], ["loc", [null, [89, 4], [95, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.activated-caption"], [], ["loc", [null, [98, 11], [98, 86]]]], ["block", "if", [["get", "model.errors.activated", ["loc", [null, [99, 10], [99, 32]]]]], [], 6, null, ["loc", [null, [99, 4], [101, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [102, 34], [102, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [102, 49], [102, 64]]]]], [], []]], ["loc", [null, [102, 4], [102, 66]]]], ["block", "if", [["get", "model.errors.vK", ["loc", [null, [105, 10], [105, 25]]]]], [], 7, null, ["loc", [null, [105, 4], [107, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [109, 15], [109, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [111, 12], [111, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [112, 16], [112, 31]]]], "error", ""], [], ["loc", [null, [112, 12], [112, 43]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.vK-caption"], [], ["loc", [null, [113, 12], [113, 78]]]]], ["loc", [null, [108, 4], [114, 6]]]], ["block", "if", [["get", "model.errors.facebook", ["loc", [null, [117, 10], [117, 31]]]]], [], 8, null, ["loc", [null, [117, 4], [119, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [121, 15], [121, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [123, 12], [123, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [124, 16], [124, 37]]]], "error", ""], [], ["loc", [null, [124, 12], [124, 49]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.facebook-caption"], [], ["loc", [null, [125, 12], [125, 84]]]]], ["loc", [null, [120, 4], [126, 6]]]], ["block", "if", [["get", "model.errors.twitter", ["loc", [null, [129, 10], [129, 30]]]]], [], 9, null, ["loc", [null, [129, 4], [131, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [133, 15], [133, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [135, 12], [135, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [136, 16], [136, 36]]]], "error", ""], [], ["loc", [null, [136, 12], [136, 48]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.twitter-caption"], [], ["loc", [null, [137, 12], [137, 83]]]]], ["loc", [null, [132, 4], [138, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.birthday-caption"], [], ["loc", [null, [141, 11], [141, 85]]]], ["block", "if", [["get", "model.errors.birthday", ["loc", [null, [142, 10], [142, 31]]]]], [], 10, null, ["loc", [null, [142, 4], [144, 11]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [146, 15], [146, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [147, 12], [147, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [148, 16], [148, 37]]]], "error", ""], [], ["loc", [null, [148, 12], [148, 49]]]]], ["loc", [null, [145, 4], [149, 6]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.gender-caption"], [], ["loc", [null, [152, 11], [152, 83]]]], ["block", "if", [["get", "model.errors.gender", ["loc", [null, [153, 10], [153, 29]]]]], [], 11, null, ["loc", [null, [153, 4], [155, 11]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-gender"], [], ["loc", [null, [156, 31], [156, 78]]]], "value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [156, 85], [156, 97]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [156, 107], [156, 115]]]]], [], []]], ["loc", [null, [156, 4], [156, 117]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.vip-caption"], [], ["loc", [null, [159, 11], [159, 80]]]], ["block", "if", [["get", "model.errors.vip", ["loc", [null, [160, 10], [160, 26]]]]], [], 12, null, ["loc", [null, [160, 4], [162, 11]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [163, 34], [163, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [163, 49], [163, 58]]]]], [], []]], ["loc", [null, [163, 4], [163, 60]]]], ["block", "if", [["get", "model.errors.karma", ["loc", [null, [166, 10], [166, 28]]]]], [], 13, null, ["loc", [null, [166, 4], [168, 11]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [170, 15], [170, 23]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [172, 12], [172, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [173, 16], [173, 34]]]], "error", ""], [], ["loc", [null, [173, 12], [173, 46]]]], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.karma-caption"], [], ["loc", [null, [174, 12], [174, 81]]]]], ["loc", [null, [169, 4], [175, 6]]]], ["inline", "t", ["forms.components-examples.flexberry-objectlistview.on-edit-form.caption"], [], ["loc", [null, [179, 8], [179, 87]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "customContent", ["loc", [null, [181, 14], [181, 27]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", "SuggestionL", "rowClickable", false, "colsConfigButton", false, "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [186, 20], [186, 33]]]]], [], []]], ["loc", [null, [180, 4], [187, 6]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/on-edit-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/on-edit-form.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-list.caption"], [], ["loc", [null, [1, 4], [1, 69]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [15, 20], [15, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [16, 16], [16, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [17, 17], [17, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [18, 23], [18, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "FOLVonEditFormObjectListView"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-objectlistview", [], ["componentName", "SuggestionsObjectListView", "colsConfigButton", true, "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [12, 16], [12, 21]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "editFormRoute", "ember-flexberry-dummy-suggestion-edit", "modelProjection", ["subexpr", "@mut", [["get", "projection", ["loc", [null, [15, 24], [15, 34]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [16, 20], [16, 31]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [17, 17], [17, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [18, 21], [18, 33]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [19, 26], [19, 43]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [20, 24], [20, 39]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [21, 21], [21, 33]]]]], [], []], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [22, 22], [22, 35]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [23, 22], [23, 35]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [24, 16], [24, 23]]]]], [], []], "applyFilters", ["subexpr", "action", ["applyFilters"], [], ["loc", [null, [25, 21], [25, 44]]]], "resetFilters", ["subexpr", "action", ["resetFilters"], [], ["loc", [null, [26, 21], [26, 44]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [27, 21], [27, 33]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [28, 26], [28, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [29, 30], [29, 51]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [30, 30], [30, 51]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [31, 32], [31, 55]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [32, 21], [32, 33]]]]], [], []], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [33, 18], [33, 27]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [34, 32], [34, 55]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [35, 25], [35, 52]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [36, 19], [36, 25]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [37, 16], [37, 31]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [38, 21], [38, 44]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [39, 27], [39, 56]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [40, 14], [40, 19]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [41, 21], [41, 33]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [42, 22], [42, 35]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [43, 24], [43, 39]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [44, 20], [44, 31]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [45, 21], [45, 44]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [46, 17], [46, 36]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [47, 17], [47, 36]]]], "configurateRow", ["subexpr", "action", ["configurateRow"], [], ["loc", [null, [48, 23], [48, 48]]]]], ["loc", [null, [9, 6], [49, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 105]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [50, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-objectlistview/toolbar-custom-buttons-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-objectlistview.toolbar-custom-buttons-example.caption"], [], ["loc", [null, [1, 22], [1, 119]]]], ["inline", "flexberry-objectlistview", [], ["modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "createNewButton", false, "showCheckBoxInRow", false, "showDeleteButtonInRow", false, "showEditMenuItemInRow", false, "showDeleteMenuItemInRow", false, "rowClickable", false, "refreshButton", false, "colsConfigButton", false, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [17, 8], [17, 13]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [18, 15], [18, 27]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [19, 16], [19, 29]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [20, 18], [20, 33]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [21, 14], [21, 25]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [22, 15], [22, 38]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [23, 11], [23, 30]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [24, 11], [24, 30]]]], "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [26, 16], [26, 29]]]]], [], []], "userButtonActionTest", "userButtonActionTest", "componentName", "FOLVToolbarCustomButtonsExample"], ["loc", [null, [3, 0], [29, 3]]]], ["content", "messageForUser", ["loc", [null, [31, 17], [31, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/components-examples/flexberry-simpledatetime/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-simpledatetime/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-simpledatetime", [], ["type", "datetime-local", "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [11, 14], [11, 24]]]]], [], []], "min", ["subexpr", "@mut", [["get", "min", ["loc", [null, [12, 12], [12, 15]]]]], [], []], "max", ["subexpr", "@mut", [["get", "max", ["loc", [null, [13, 12], [13, 15]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [14, 17], [14, 25]]]]], [], []]], ["loc", [null, [9, 6], [15, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-simpledatetime/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-simpledatetime.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 105]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [16, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-textarea/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-textarea/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [9, 12], [9, 22]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [10, 18], [10, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 15], [11, 23]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [12, 9], [12, 14]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [13, 15], [13, 23]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [14, 11], [14, 15]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [15, 11], [15, 15]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [16, 15], [16, 23]]]]], [], []], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [17, 16], [17, 25]]]]], [], []], "selectionStart", ["subexpr", "@mut", [["get", "selectionStart", ["loc", [null, [18, 21], [18, 35]]]]], [], []], "selectionEnd", ["subexpr", "@mut", [["get", "selectionEnd", ["loc", [null, [19, 19], [19, 31]]]]], [], []], "selectionDirection", ["subexpr", "@mut", [["get", "selectionDirection", ["loc", [null, [20, 25], [20, 43]]]]], [], []], "wrap", ["subexpr", "@mut", [["get", "wrap", ["loc", [null, [21, 11], [21, 15]]]]], [], []], "autofocus", ["subexpr", "@mut", [["get", "autofocus", ["loc", [null, [22, 16], [22, 25]]]]], [], []], "spellcheck", ["subexpr", "@mut", [["get", "spellcheck", ["loc", [null, [23, 17], [23, 27]]]]], [], []]], ["loc", [null, [8, 4], [24, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-textarea/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-textarea.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 99]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 25], [4, 29]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [5, 30], [5, 55]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [6, 26], [6, 47]]]]], [], []]], 0, null, ["loc", [null, [3, 2], [25, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-textbox/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-textbox/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-textbox", [], ["class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [9, 12], [9, 17]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [10, 12], [10, 22]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [11, 18], [11, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [12, 15], [12, 23]]]]], [], []]], ["loc", [null, [8, 4], [13, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-textbox/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-textbox.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 98]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 25], [4, 29]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [5, 30], [5, 55]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [6, 26], [6, 47]]]]], [], []]], 0, null, ["loc", [null, [3, 2], [14, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/components-examples/flexberry-toggler/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["forms.components-examples.flexberry-toggler.settings-example.togglerContent"], [], ["loc", [null, [14, 8], [14, 91]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "flexberry-toggler", [], ["caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [10, 16], [10, 23]]]]], [], []], "expandedCaption", ["subexpr", "@mut", [["get", "expandedCaption", ["loc", [null, [11, 24], [11, 39]]]]], [], []], "collapsedCaption", ["subexpr", "@mut", [["get", "collapsedCaption", ["loc", [null, [12, 25], [12, 41]]]]], [], []]], 0, null, ["loc", [null, [9, 6], [15, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/components-examples/flexberry-toggler/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-toggler.settings-example.caption"], [], ["loc", [null, [1, 22], [1, 98]]]], ["block", "settings-example", [], ["controllerProperties", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 27], [5, 31]]]]], [], []], "componentSettingsMetadata", ["subexpr", "@mut", [["get", "componentSettingsMetadata", ["loc", [null, [6, 32], [6, 57]]]]], [], []], "componentTemplateText", ["subexpr", "@mut", [["get", "componentTemplateText", ["loc", [null, [7, 28], [7, 49]]]]], [], []]], 0, null, ["loc", [null, [4, 4], [16, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 59], [30, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 77], [30, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 59], [33, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 85], [33, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 59], [36, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 79], [36, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 148,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var element9 = dom.childAt(element3, [15]);
        var element10 = dom.childAt(element3, [17]);
        var element11 = dom.childAt(element3, [19]);
        var element12 = dom.childAt(element3, [21]);
        var element13 = dom.childAt(element3, [23]);
        var element14 = dom.childAt(element3, [25]);
        var element15 = dom.childAt(element3, [27]);
        var element16 = dom.childAt(element3, [29]);
        var element17 = dom.childAt(element3, [31]);
        var element18 = dom.childAt(element3, [33]);
        var morphs = new Array(51);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(element8, 1, 1);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createAttrMorph(element9, 'class');
        morphs[18] = dom.createMorphAt(element9, 1, 1);
        morphs[19] = dom.createMorphAt(element9, 3, 3);
        morphs[20] = dom.createAttrMorph(element10, 'class');
        morphs[21] = dom.createMorphAt(element10, 1, 1);
        morphs[22] = dom.createMorphAt(element10, 3, 3);
        morphs[23] = dom.createAttrMorph(element11, 'class');
        morphs[24] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[25] = dom.createMorphAt(element11, 3, 3);
        morphs[26] = dom.createMorphAt(element11, 5, 5);
        morphs[27] = dom.createAttrMorph(element12, 'class');
        morphs[28] = dom.createMorphAt(element12, 1, 1);
        morphs[29] = dom.createMorphAt(element12, 3, 3);
        morphs[30] = dom.createAttrMorph(element13, 'class');
        morphs[31] = dom.createMorphAt(element13, 1, 1);
        morphs[32] = dom.createMorphAt(element13, 3, 3);
        morphs[33] = dom.createAttrMorph(element14, 'class');
        morphs[34] = dom.createMorphAt(element14, 1, 1);
        morphs[35] = dom.createMorphAt(element14, 3, 3);
        morphs[36] = dom.createAttrMorph(element15, 'class');
        morphs[37] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[38] = dom.createMorphAt(element15, 3, 3);
        morphs[39] = dom.createMorphAt(element15, 5, 5);
        morphs[40] = dom.createAttrMorph(element16, 'class');
        morphs[41] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[42] = dom.createMorphAt(element16, 3, 3);
        morphs[43] = dom.createMorphAt(element16, 5, 5);
        morphs[44] = dom.createAttrMorph(element17, 'class');
        morphs[45] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[46] = dom.createMorphAt(element17, 3, 3);
        morphs[47] = dom.createMorphAt(element17, 5, 5);
        morphs[48] = dom.createAttrMorph(element18, 'class');
        morphs[49] = dom.createMorphAt(element18, 1, 1);
        morphs[50] = dom.createMorphAt(element18, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.caption"], [], ["loc", [null, [1, 22], [1, 87]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 18], [2, 27]]]], " form flexberry-vertical-form"]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 46], [39, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 65], [39, 106]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.name-caption"], [], ["loc", [null, [45, 12], [45, 80]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [50, 25], [50, 43]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [52, 12], [52, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.eMail-caption"], [], ["loc", [null, [53, 12], [53, 81]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [51, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.eMail", ["loc", [null, [56, 40], [56, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [58, 25], [58, 44]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [60, 12], [60, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone1-caption"], [], ["loc", [null, [61, 12], [61, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [62, 15], [62, 23]]]]], [], []]], ["loc", [null, [59, 4], [63, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone1", ["loc", [null, [64, 40], [64, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [64, 4], [64, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [66, 25], [66, 44]]]], "error", ""], [], ["loc", [null, [66, 20], [66, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [68, 12], [68, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone2-caption"], [], ["loc", [null, [69, 12], [69, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 15], [70, 23]]]]], [], []]], ["loc", [null, [67, 4], [71, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone2", ["loc", [null, [72, 40], [72, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [72, 4], [72, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [74, 25], [74, 44]]]], "error", ""], [], ["loc", [null, [74, 20], [74, 57]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [76, 12], [76, 24]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.phone3-caption"], [], ["loc", [null, [77, 12], [77, 82]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [78, 15], [78, 23]]]]], [], []]], ["loc", [null, [75, 4], [79, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone3", ["loc", [null, [80, 40], [80, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [80, 4], [80, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.activated", ["loc", [null, [82, 25], [82, 47]]]], "error", ""], [], ["loc", [null, [82, 20], [82, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.activated-caption"], [], ["loc", [null, [83, 11], [83, 86]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [85, 12], [85, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [86, 15], [86, 23]]]]], [], []]], ["loc", [null, [84, 4], [87, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.activated", ["loc", [null, [88, 40], [88, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [88, 4], [88, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [90, 25], [90, 40]]]], "error", ""], [], ["loc", [null, [90, 20], [90, 53]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [92, 12], [92, 20]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.vK-caption"], [], ["loc", [null, [93, 12], [93, 78]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [94, 15], [94, 23]]]]], [], []]], ["loc", [null, [91, 4], [95, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vK", ["loc", [null, [96, 40], [96, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [96, 4], [96, 77]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [98, 25], [98, 46]]]], "error", ""], [], ["loc", [null, [98, 20], [98, 59]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [100, 12], [100, 26]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.facebook-caption"], [], ["loc", [null, [101, 12], [101, 84]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [102, 15], [102, 23]]]]], [], []]], ["loc", [null, [99, 4], [103, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.facebook", ["loc", [null, [104, 40], [104, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [104, 4], [104, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [106, 25], [106, 45]]]], "error", ""], [], ["loc", [null, [106, 20], [106, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [108, 12], [108, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.twitter-caption"], [], ["loc", [null, [109, 12], [109, 83]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [110, 15], [110, 23]]]]], [], []]], ["loc", [null, [107, 4], [111, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.twitter", ["loc", [null, [112, 40], [112, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [112, 4], [112, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [114, 25], [114, 46]]]], "error", ""], [], ["loc", [null, [114, 20], [114, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.birthday-caption"], [], ["loc", [null, [115, 11], [115, 85]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [117, 12], [117, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [118, 15], [118, 23]]]]], [], []]], ["loc", [null, [116, 4], [119, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.birthday", ["loc", [null, [120, 40], [120, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [120, 4], [120, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.gender", ["loc", [null, [122, 25], [122, 44]]]], "error", ""], [], ["loc", [null, [122, 20], [122, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.gender-caption"], [], ["loc", [null, [123, 11], [123, 83]]]], ["inline", "flexberry-dropdown", [], ["value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [125, 12], [125, 24]]]]], [], []], "items", ["subexpr", "flexberry-enum", ["ember-flexberry-dummy-gender"], [], ["loc", [null, [126, 12], [126, 59]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [127, 15], [127, 23]]]]], [], []]], ["loc", [null, [124, 4], [128, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.gender", ["loc", [null, [129, 40], [129, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [129, 4], [129, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.vip", ["loc", [null, [131, 25], [131, 41]]]], "error", ""], [], ["loc", [null, [131, 20], [131, 54]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-application-user-edit.vip-caption"], [], ["loc", [null, [132, 11], [132, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [134, 12], [134, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [135, 15], [135, 23]]]]], [], []]], ["loc", [null, [133, 4], [136, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vip", ["loc", [null, [137, 40], [137, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [137, 4], [137, 78]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [139, 25], [139, 43]]]], "error", ""], [], ["loc", [null, [139, 20], [139, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [141, 12], [141, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-application-user-edit.karma-caption"], [], ["loc", [null, [142, 12], [142, 81]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [143, 15], [143, 23]]]]], [], []]], ["loc", [null, [140, 4], [144, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.karma", ["loc", [null, [145, 40], [145, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [145, 4], [145, 80]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-application-user-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-application-user-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-application-user-list.caption"], [], ["loc", [null, [1, 4], [1, 69]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [15, 20], [15, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [16, 16], [16, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [17, 17], [17, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [18, 23], [18, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "applicationUserObjectListView"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-comment-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 59], [30, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 77], [30, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 59], [33, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 85], [33, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 59], [36, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 79], [36, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-comment-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var element9 = dom.childAt(element3, [15]);
        var element10 = dom.childAt(element3, [17]);
        var morphs = new Array(26);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createMorphAt(element9, 5, 5);
        morphs[22] = dom.createAttrMorph(element10, 'class');
        morphs[23] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[24] = dom.createMorphAt(element10, 3, 3);
        morphs[25] = dom.createMorphAt(element10, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.caption"], [], ["loc", [null, [1, 22], [1, 78]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 18], [2, 27]]]], " form flexberry-vertical-form"]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 46], [39, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 65], [39, 106]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.text-caption"], [], ["loc", [null, [45, 12], [45, 71]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [50, 25], [50, 43]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [52, 12], [52, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.votes-caption"], [], ["loc", [null, [53, 12], [53, 72]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [51, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [56, 40], [56, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [58, 25], [58, 47]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.moderated-caption"], [], ["loc", [null, [59, 11], [59, 77]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [61, 12], [61, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [62, 15], [62, 23]]]]], [], []]], ["loc", [null, [60, 4], [63, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [64, 40], [64, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [64, 4], [64, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [66, 25], [66, 44]]]], "error", ""], [], ["loc", [null, [66, 20], [66, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.author-caption"], [], ["loc", [null, [67, 11], [67, 74]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [69, 12], [69, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [70, 19], [70, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-comment-edit.author-caption"], [], ["loc", [null, [74, 12], [74, 73]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [75, 13], [75, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [76, 13], [76, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [77, 15], [77, 23]]]]], [], []]], ["loc", [null, [68, 4], [78, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [79, 40], [79, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [79, 4], [79, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [81, 25], [81, 47]]]], "error", ""], [], ["loc", [null, [81, 20], [81, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-comment-edit.userVotes-caption"], [], ["loc", [null, [82, 11], [82, 77]]]], ["inline", "flexberry-groupedit", [], ["componentName", "commentUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [85, 14], [85, 29]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [86, 22], [86, 58]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [88, 15], [88, 23]]]]], [], []]], ["loc", [null, [83, 4], [89, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [90, 40], [90, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [90, 4], [90, 84]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-comment-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-comment-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 59], [30, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 77], [30, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 59], [33, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 85], [33, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 59], [36, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 79], [36, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var morphs = new Array(11);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-localization-edit.caption"], [], ["loc", [null, [1, 22], [1, 83]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 18], [2, 27]]]], " form flexberry-vertical-form"]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 46], [39, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 65], [39, 106]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-localization-edit.name-caption"], [], ["loc", [null, [45, 12], [45, 76]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-localization-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-localization-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-localization-list.caption"], [], ["loc", [null, [1, 4], [1, 65]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-localization", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [15, 20], [15, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [16, 16], [16, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [17, 17], [17, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [18, 23], [18, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "localizationObjectListView"], ["loc", [null, [3, 2], [23, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 59], [30, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 77], [30, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 59], [33, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 85], [33, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 59], [36, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 79], [36, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 169,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var element9 = dom.childAt(element3, [15]);
        var element10 = dom.childAt(element3, [17]);
        var element11 = dom.childAt(element3, [19]);
        var element12 = dom.childAt(element3, [21]);
        var element13 = dom.childAt(element3, [23]);
        var element14 = dom.childAt(element3, [25]);
        var element15 = dom.childAt(element3, [27]);
        var element16 = dom.childAt(element3, [29]);
        var morphs = new Array(49);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(element7, 1, 1);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createAttrMorph(element8, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        morphs[18] = dom.createAttrMorph(element9, 'class');
        morphs[19] = dom.createMorphAt(element9, 1, 1);
        morphs[20] = dom.createMorphAt(element9, 3, 3);
        morphs[21] = dom.createAttrMorph(element10, 'class');
        morphs[22] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element10, 3, 3);
        morphs[24] = dom.createMorphAt(element10, 5, 5);
        morphs[25] = dom.createAttrMorph(element11, 'class');
        morphs[26] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[27] = dom.createMorphAt(element11, 3, 3);
        morphs[28] = dom.createMorphAt(element11, 5, 5);
        morphs[29] = dom.createAttrMorph(element12, 'class');
        morphs[30] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element12, 3, 3);
        morphs[32] = dom.createMorphAt(element12, 5, 5);
        morphs[33] = dom.createAttrMorph(element13, 'class');
        morphs[34] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element13, 3, 3);
        morphs[36] = dom.createMorphAt(element13, 5, 5);
        morphs[37] = dom.createAttrMorph(element14, 'class');
        morphs[38] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[39] = dom.createMorphAt(element14, 3, 3);
        morphs[40] = dom.createMorphAt(element14, 5, 5);
        morphs[41] = dom.createAttrMorph(element15, 'class');
        morphs[42] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[43] = dom.createMorphAt(element15, 3, 3);
        morphs[44] = dom.createMorphAt(element15, 5, 5);
        morphs[45] = dom.createAttrMorph(element16, 'class');
        morphs[46] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[47] = dom.createMorphAt(element16, 3, 3);
        morphs[48] = dom.createMorphAt(element16, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.caption"], [], ["loc", [null, [1, 22], [1, 81]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 18], [2, 27]]]], " form flexberry-vertical-form"]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 46], [39, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 65], [39, 106]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [42, 25], [42, 45]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 58]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [44, 12], [44, 25]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.address-caption"], [], ["loc", [null, [45, 12], [45, 77]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [48, 40], [48, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [50, 25], [50, 42]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [52, 12], [52, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.text-caption"], [], ["loc", [null, [53, 12], [53, 74]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [51, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [56, 40], [56, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [58, 25], [58, 42]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.date-caption"], [], ["loc", [null, [59, 11], [59, 75]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [61, 12], [61, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [62, 15], [62, 23]]]]], [], []]], ["loc", [null, [60, 4], [63, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [64, 40], [64, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [64, 4], [64, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [66, 25], [66, 43]]]], "error", ""], [], ["loc", [null, [66, 20], [66, 56]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [68, 12], [68, 23]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.votes-caption"], [], ["loc", [null, [69, 12], [69, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [70, 15], [70, 23]]]]], [], []]], ["loc", [null, [67, 4], [71, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [72, 40], [72, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [72, 4], [72, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [74, 25], [74, 47]]]], "error", ""], [], ["loc", [null, [74, 20], [74, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.moderated-caption"], [], ["loc", [null, [75, 11], [75, 80]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [77, 12], [77, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [78, 15], [78, 23]]]]], [], []]], ["loc", [null, [76, 4], [79, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [80, 40], [80, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [80, 4], [80, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.type", ["loc", [null, [82, 25], [82, 42]]]], "error", ""], [], ["loc", [null, [82, 20], [82, 55]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [83, 11], [83, 75]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [85, 12], [85, 22]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [86, 19], [86, 24]]]]], [], []], "relationName", "type", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.type-caption"], [], ["loc", [null, [90, 12], [90, 74]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [91, 13], [91, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [92, 13], [92, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [93, 15], [93, 23]]]]], [], []]], ["loc", [null, [84, 4], [94, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [95, 40], [95, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [95, 4], [95, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.author", ["loc", [null, [97, 25], [97, 44]]]], "error", ""], [], ["loc", [null, [97, 20], [97, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [98, 11], [98, 77]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [100, 12], [100, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [101, 19], [101, 24]]]]], [], []], "relationName", "author", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.author-caption"], [], ["loc", [null, [105, 12], [105, 76]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [106, 13], [106, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [107, 13], [107, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [108, 15], [108, 23]]]]], [], []]], ["loc", [null, [99, 4], [109, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [110, 40], [110, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [110, 4], [110, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.editor1", ["loc", [null, [112, 25], [112, 45]]]], "error", ""], [], ["loc", [null, [112, 20], [112, 58]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [113, 11], [113, 78]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [115, 12], [115, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [116, 19], [116, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [120, 12], [120, 77]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [121, 13], [121, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [122, 13], [122, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [123, 15], [123, 23]]]]], [], []]], ["loc", [null, [114, 4], [124, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [125, 40], [125, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [125, 4], [125, 82]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [127, 25], [127, 43]]]], "error", ""], [], ["loc", [null, [127, 20], [127, 56]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.files-caption"], [], ["loc", [null, [128, 11], [128, 76]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [131, 14], [131, 25]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [132, 26], [132, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [133, 22], [133, 54]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [135, 15], [135, 23]]]]], [], []]], ["loc", [null, [129, 4], [136, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [137, 40], [137, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [137, 4], [137, 80]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [139, 25], [139, 47]]]], "error", ""], [], ["loc", [null, [139, 20], [139, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.userVotes-caption"], [], ["loc", [null, [140, 11], [140, 80]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionUserVotesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [143, 14], [143, 29]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [144, 26], [144, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [145, 22], [145, 58]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [147, 15], [147, 23]]]]], [], []]], ["loc", [null, [141, 4], [148, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [149, 40], [149, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [149, 4], [149, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [151, 25], [151, 46]]]], "error", ""], [], ["loc", [null, [151, 20], [151, 59]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.comments-caption"], [], ["loc", [null, [152, 11], [152, 79]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionCommentsGroupEdit", "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [155, 14], [155, 28]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [156, 26], [156, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [157, 22], [157, 57]]]]], [], []], "rowClickable", true, "rowClick", "rowClick", "editOnSeparateRoute", true, "editFormRoute", ["subexpr", "@mut", [["get", "commentsEditRoute", ["loc", [null, [161, 20], [161, 37]]]]], [], []], "saveBeforeRouteLeave", true, "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [164, 15], [164, 23]]]]], [], []]], ["loc", [null, [153, 4], [165, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [166, 40], [166, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [166, 4], [166, 83]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-list.caption"], [], ["loc", [null, [1, 4], [1, 63]]]], ["inline", "flexberry-objectlistview", [], ["editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [4, 16], [4, 29]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "SuggestionObjectListView"], ["loc", [null, [3, 0], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 8
              },
              "end": {
                "line": 31,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [30, 59], [30, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [30, 77], [30, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 8
              },
              "end": {
                "line": 34,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [33, 59], [33, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [33, 85], [33, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 35,
                "column": 8
              },
              "end": {
                "line": 37,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [36, 59], [36, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [36, 79], [36, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 6
            },
            "end": {
              "line": 38,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [29, 23], [29, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 43], [29, 63]]]]], [], ["loc", [null, [29, 38], [29, 64]]]]], [], ["loc", [null, [29, 18], [29, 65]]]]], [], 0, null, ["loc", [null, [29, 8], [31, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [32, 23], [32, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [32, 43], [32, 63]]]]], [], ["loc", [null, [32, 38], [32, 64]]]]], [], ["loc", [null, [32, 18], [32, 65]]]]], [], 1, null, ["loc", [null, [32, 8], [34, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [35, 23], [35, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [35, 44], [35, 58]]]]], [], ["loc", [null, [35, 39], [35, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [35, 65], [35, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [35, 80], [35, 100]]]]], [], ["loc", [null, [35, 60], [35, 101]]]]], [], ["loc", [null, [35, 35], [35, 102]]]]], [], ["loc", [null, [35, 18], [35, 103]]]]], [], 2, null, ["loc", [null, [35, 8], [37, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 86,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-edit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [7, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [9]);
        var element7 = dom.childAt(element3, [11]);
        var element8 = dom.childAt(element3, [13]);
        var element9 = dom.childAt(element3, [15]);
        var morphs = new Array(23);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(element3, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [5, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 0, 0);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createAttrMorph(element7, 'class');
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(element7, 5, 5);
        morphs[15] = dom.createAttrMorph(element8, 'class');
        morphs[16] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element8, 3, 3);
        morphs[18] = dom.createMorphAt(element8, 5, 5);
        morphs[19] = dom.createAttrMorph(element9, 'class');
        morphs[20] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[21] = dom.createMorphAt(element9, 3, 3);
        morphs[22] = dom.createMorphAt(element9, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.caption"], [], ["loc", [null, [1, 22], [1, 86]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 18], [2, 27]]]], " form flexberry-vertical-form"]]], ["inline", "ui-message", [], ["type", "success", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormSuccessMessage", ["loc", [null, [6, 12], [6, 34]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formSuccessMessageCaption", ["loc", [null, [7, 12], [7, 37]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formSuccessMessage", ["loc", [null, [8, 12], [8, 30]]]]], [], []], "onShow", ["subexpr", "action", ["onSuccessMessageShow"], [], ["loc", [null, [9, 11], [9, 42]]]], "onHide", ["subexpr", "action", ["onSuccessMessageHide"], [], ["loc", [null, [10, 11], [10, 42]]]]], ["loc", [null, [3, 2], [11, 4]]]], ["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", ["subexpr", "@mut", [["get", "showFormErrorMessage", ["loc", [null, [15, 12], [15, 32]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "formErrorMessageCaption", ["loc", [null, [16, 12], [16, 35]]]]], [], []], "message", ["subexpr", "@mut", [["get", "formErrorMessage", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "onShow", ["subexpr", "action", ["onErrorMessageShow"], [], ["loc", [null, [18, 11], [18, 40]]]], "onHide", ["subexpr", "action", ["onErrorMessageHide"], [], ["loc", [null, [19, 11], [19, 40]]]]], ["loc", [null, [12, 2], [20, 4]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [23, 43], [23, 55]]]]], [], []]], ["loc", [null, [23, 6], [23, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 16], [28, 24]]]]], [], 0, null, ["loc", [null, [28, 6], [38, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [39, 46], [39, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [39, 65], [39, 106]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [42, 25], [42, 42]]]], "error", ""], [], ["loc", [null, [42, 20], [42, 55]]]]]]], ["inline", "flexberry-field", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [44, 12], [44, 22]]]]], [], []], "label", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.name-caption"], [], ["loc", [null, [45, 12], [45, 79]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [46, 15], [46, 23]]]]], [], []]], ["loc", [null, [43, 4], [47, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [48, 40], [48, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [48, 4], [48, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.moderated", ["loc", [null, [50, 25], [50, 47]]]], "error", ""], [], ["loc", [null, [50, 20], [50, 60]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.moderated-caption"], [], ["loc", [null, [51, 11], [51, 85]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [53, 12], [53, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 15], [54, 23]]]]], [], []]], ["loc", [null, [52, 4], [55, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [56, 40], [56, 62]]]]], [], []], "pointing", "pointing"], ["loc", [null, [56, 4], [56, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.parent", ["loc", [null, [58, 25], [58, 44]]]], "error", ""], [], ["loc", [null, [58, 20], [58, 57]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [59, 11], [59, 82]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.parent", ["loc", [null, [61, 12], [61, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [62, 19], [62, 24]]]]], [], []], "relationName", "parent", "projection", "SuggestionTypeL", "displayAttributeName", "name", "title", ["subexpr", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.parent-caption"], [], ["loc", [null, [66, 12], [66, 81]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [67, 13], [67, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [68, 13], [68, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 15], [69, 23]]]]], [], []]], ["loc", [null, [60, 4], [70, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.parent", ["loc", [null, [71, 40], [71, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [71, 4], [71, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.localizedTypes", ["loc", [null, [73, 25], [73, 52]]]], "error", ""], [], ["loc", [null, [73, 20], [73, 65]]]]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-edit.localized-types-caption"], [], ["loc", [null, [74, 11], [74, 91]]]], ["inline", "flexberry-groupedit", [], ["componentName", "suggestionTypeLocalizedTypesGroupEdit", "content", ["subexpr", "@mut", [["get", "model.localizedTypes", ["loc", [null, [77, 14], [77, 34]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.localizedTypes", ["loc", [null, [78, 22], [78, 63]]]]], [], []], "orderable", false, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 15], [80, 23]]]]], [], []]], ["loc", [null, [75, 4], [81, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.localizedTypes", ["loc", [null, [82, 40], [82, 67]]]]], [], []], "pointing", "pointing"], ["loc", [null, [82, 4], [82, 89]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-list/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-list/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/ember-flexberry-dummy-suggestion-type-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/ember-flexberry-dummy-suggestion-type-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.ember-flexberry-dummy-suggestion-type-list.caption"], [], ["loc", [null, [1, 4], [1, 68]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "ember-flexberry-dummy-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [15, 20], [15, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [16, 16], [16, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [17, 17], [17, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [18, 23], [18, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "suggestionTypeObjectListView"], ["loc", [null, [3, 2], [23, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/flexberry-file-view-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/flexberry-file-view-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1, "class", "flexberry-file-view-dialog");
          dom.setAttribute(el1, "alt", "LoadedImage");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "imageSrc", ["loc", [null, [8, 49], [8, 57]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/flexberry-file-view-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "useOkButton", false, "close", "removeModalDialog", "created", "createdModalDialog", "viewImageContent", true, "sizeClass", ["subexpr", "@mut", [["get", "sizeClass", ["loc", [null, [7, 12], [7, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [9, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [4, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [3, 10], [3, 23]]]]], [], 0, null, ["loc", [null, [3, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [18, 59], [18, 76]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [18, 77], [18, 117]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui positive button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [21, 59], [21, 84]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [21, 85], [21, 133]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [24, 59], [24, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [24, 79], [24, 121]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [17, 23], [17, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [17, 43], [17, 63]]]]], [], ["loc", [null, [17, 38], [17, 64]]]]], [], ["loc", [null, [17, 18], [17, 65]]]]], [], 0, null, ["loc", [null, [17, 8], [19, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [20, 23], [20, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [20, 43], [20, 63]]]]], [], ["loc", [null, [20, 38], [20, 64]]]]], [], ["loc", [null, [20, 18], [20, 65]]]]], [], 1, null, ["loc", [null, [20, 8], [22, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [23, 23], [23, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [23, 44], [23, 58]]]]], [], ["loc", [null, [23, 39], [23, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [23, 65], [23, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [23, 80], [23, 100]]]]], [], ["loc", [null, [23, 60], [23, 101]]]]], [], ["loc", [null, [23, 35], [23, 102]]]]], [], ["loc", [null, [23, 18], [23, 103]]]]], [], 2, null, ["loc", [null, [23, 8], [25, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.category", ["loc", [null, [34, 6], [34, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.eventId", ["loc", [null, [49, 6], [49, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.priority", ["loc", [null, [64, 6], [64, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.severity", ["loc", [null, [79, 6], [79, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.title", ["loc", [null, [94, 6], [94, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.timestamp", ["loc", [null, [109, 28], [109, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.machineName", ["loc", [null, [121, 6], [121, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.appDomainName", ["loc", [null, [136, 6], [136, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processId", ["loc", [null, [151, 6], [151, 32]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processName", ["loc", [null, [166, 6], [166, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.threadName", ["loc", [null, [181, 6], [181, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.win32ThreadId", ["loc", [null, [196, 6], [196, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child14 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.message", ["loc", [null, [211, 6], [211, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child15 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 224,
              "column": 2
            },
            "end": {
              "line": 228,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.formattedMessage", ["loc", [null, [226, 6], [226, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 239,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-edit-panel");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "submit");
        dom.setAttribute(el5, "class", "ui button");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Timestamp");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [1, 1, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [3]);
        var element7 = dom.childAt(element3, [5]);
        var element8 = dom.childAt(element3, [7]);
        var element9 = dom.childAt(element3, [9]);
        var element10 = dom.childAt(element3, [11]);
        var element11 = dom.childAt(element3, [13]);
        var element12 = dom.childAt(element3, [15]);
        var element13 = dom.childAt(element3, [17]);
        var element14 = dom.childAt(element3, [19]);
        var element15 = dom.childAt(element3, [21]);
        var element16 = dom.childAt(element3, [23]);
        var element17 = dom.childAt(element3, [25]);
        var element18 = dom.childAt(element3, [27]);
        var element19 = dom.childAt(element3, [29]);
        var morphs = new Array(32);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(element4, 1, 1);
        morphs[2] = dom.createElementMorph(element5);
        morphs[3] = dom.createMorphAt(element5, 0, 0);
        morphs[4] = dom.createMorphAt(element6, 1, 1);
        morphs[5] = dom.createMorphAt(element6, 3, 3);
        morphs[6] = dom.createMorphAt(element7, 1, 1);
        morphs[7] = dom.createMorphAt(element7, 3, 3);
        morphs[8] = dom.createMorphAt(element8, 1, 1);
        morphs[9] = dom.createMorphAt(element8, 3, 3);
        morphs[10] = dom.createMorphAt(element9, 1, 1);
        morphs[11] = dom.createMorphAt(element9, 3, 3);
        morphs[12] = dom.createMorphAt(element10, 1, 1);
        morphs[13] = dom.createMorphAt(element10, 3, 3);
        morphs[14] = dom.createMorphAt(element11, 3, 3);
        morphs[15] = dom.createMorphAt(element11, 5, 5);
        morphs[16] = dom.createMorphAt(element12, 1, 1);
        morphs[17] = dom.createMorphAt(element12, 3, 3);
        morphs[18] = dom.createMorphAt(element13, 1, 1);
        morphs[19] = dom.createMorphAt(element13, 3, 3);
        morphs[20] = dom.createMorphAt(element14, 1, 1);
        morphs[21] = dom.createMorphAt(element14, 3, 3);
        morphs[22] = dom.createMorphAt(element15, 1, 1);
        morphs[23] = dom.createMorphAt(element15, 3, 3);
        morphs[24] = dom.createMorphAt(element16, 1, 1);
        morphs[25] = dom.createMorphAt(element16, 3, 3);
        morphs[26] = dom.createMorphAt(element17, 1, 1);
        morphs[27] = dom.createMorphAt(element17, 3, 3);
        morphs[28] = dom.createMorphAt(element18, 1, 1);
        morphs[29] = dom.createMorphAt(element18, 3, 3);
        morphs[30] = dom.createMorphAt(element19, 1, 1);
        morphs[31] = dom.createMorphAt(element19, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [2, 6], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 0], [11, 7]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [16, 16], [16, 24]]]]], [], 1, null, ["loc", [null, [16, 6], [26, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [27, 46], [27, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [27, 65], [27, 106]]]], ["block", "if", [["get", "model.errors.category", ["loc", [null, [32, 8], [32, 29]]]]], [], 2, null, ["loc", [null, [32, 2], [36, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [38, 13], [38, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.category", ["loc", [null, [40, 10], [40, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.category", ["loc", [null, [41, 14], [41, 35]]]], "error", ""], [], ["loc", [null, [41, 10], [41, 47]]]], "label", "Category"], ["loc", [null, [37, 2], [43, 4]]]], ["block", "if", [["get", "model.errors.eventId", ["loc", [null, [47, 8], [47, 28]]]]], [], 3, null, ["loc", [null, [47, 2], [51, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [53, 13], [53, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eventId", ["loc", [null, [55, 10], [55, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eventId", ["loc", [null, [56, 14], [56, 34]]]], "error", ""], [], ["loc", [null, [56, 10], [56, 46]]]], "label", "Event id"], ["loc", [null, [52, 2], [58, 4]]]], ["block", "if", [["get", "model.errors.priority", ["loc", [null, [62, 8], [62, 29]]]]], [], 4, null, ["loc", [null, [62, 2], [66, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [68, 13], [68, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.priority", ["loc", [null, [70, 10], [70, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.priority", ["loc", [null, [71, 14], [71, 35]]]], "error", ""], [], ["loc", [null, [71, 10], [71, 47]]]], "label", "Priority"], ["loc", [null, [67, 2], [73, 4]]]], ["block", "if", [["get", "model.errors.severity", ["loc", [null, [77, 8], [77, 29]]]]], [], 5, null, ["loc", [null, [77, 2], [81, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [83, 13], [83, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.severity", ["loc", [null, [85, 10], [85, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.severity", ["loc", [null, [86, 14], [86, 35]]]], "error", ""], [], ["loc", [null, [86, 10], [86, 47]]]], "label", "Severity"], ["loc", [null, [82, 2], [88, 4]]]], ["block", "if", [["get", "model.errors.title", ["loc", [null, [92, 8], [92, 26]]]]], [], 6, null, ["loc", [null, [92, 2], [96, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [98, 13], [98, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [100, 10], [100, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.title", ["loc", [null, [101, 14], [101, 32]]]], "error", ""], [], ["loc", [null, [101, 10], [101, 44]]]], "label", "Title"], ["loc", [null, [97, 2], [103, 4]]]], ["block", "if", [["get", "model.errors.timestamp", ["loc", [null, [108, 8], [108, 30]]]]], [], 7, null, ["loc", [null, [108, 2], [110, 9]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 13], [112, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.timestamp", ["loc", [null, [113, 10], [113, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.timestamp", ["loc", [null, [114, 14], [114, 36]]]], "error", ""], [], ["loc", [null, [114, 10], [114, 48]]]]], ["loc", [null, [111, 2], [115, 4]]]], ["block", "if", [["get", "model.errors.machineName", ["loc", [null, [119, 8], [119, 32]]]]], [], 8, null, ["loc", [null, [119, 2], [123, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [125, 13], [125, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.machineName", ["loc", [null, [127, 10], [127, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.machineName", ["loc", [null, [128, 14], [128, 38]]]], "error", ""], [], ["loc", [null, [128, 10], [128, 50]]]], "label", "Machine name"], ["loc", [null, [124, 2], [130, 4]]]], ["block", "if", [["get", "model.errors.appDomainName", ["loc", [null, [134, 8], [134, 34]]]]], [], 9, null, ["loc", [null, [134, 2], [138, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [140, 13], [140, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.appDomainName", ["loc", [null, [142, 10], [142, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.appDomainName", ["loc", [null, [143, 14], [143, 40]]]], "error", ""], [], ["loc", [null, [143, 10], [143, 52]]]], "label", "App domain name"], ["loc", [null, [139, 2], [145, 4]]]], ["block", "if", [["get", "model.errors.processId", ["loc", [null, [149, 8], [149, 30]]]]], [], 10, null, ["loc", [null, [149, 2], [153, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [155, 13], [155, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processId", ["loc", [null, [157, 10], [157, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processId", ["loc", [null, [158, 14], [158, 36]]]], "error", ""], [], ["loc", [null, [158, 10], [158, 48]]]], "label", "Process id"], ["loc", [null, [154, 2], [160, 4]]]], ["block", "if", [["get", "model.errors.processName", ["loc", [null, [164, 8], [164, 32]]]]], [], 11, null, ["loc", [null, [164, 2], [168, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [170, 13], [170, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processName", ["loc", [null, [172, 10], [172, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processName", ["loc", [null, [173, 14], [173, 38]]]], "error", ""], [], ["loc", [null, [173, 10], [173, 50]]]], "label", "Process name"], ["loc", [null, [169, 2], [175, 4]]]], ["block", "if", [["get", "model.errors.threadName", ["loc", [null, [179, 8], [179, 31]]]]], [], 12, null, ["loc", [null, [179, 2], [183, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [185, 13], [185, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.threadName", ["loc", [null, [187, 10], [187, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.threadName", ["loc", [null, [188, 14], [188, 37]]]], "error", ""], [], ["loc", [null, [188, 10], [188, 49]]]], "label", "Thread name"], ["loc", [null, [184, 2], [190, 4]]]], ["block", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [194, 8], [194, 34]]]]], [], 13, null, ["loc", [null, [194, 2], [198, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [200, 13], [200, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.win32ThreadId", ["loc", [null, [202, 10], [202, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [203, 14], [203, 40]]]], "error", ""], [], ["loc", [null, [203, 10], [203, 52]]]], "label", "Win32 thread id"], ["loc", [null, [199, 2], [205, 4]]]], ["block", "if", [["get", "model.errors.message", ["loc", [null, [209, 8], [209, 28]]]]], [], 14, null, ["loc", [null, [209, 2], [213, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [215, 13], [215, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.message", ["loc", [null, [217, 10], [217, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.message", ["loc", [null, [218, 14], [218, 34]]]], "error", ""], [], ["loc", [null, [218, 10], [218, 46]]]], "label", "Message"], ["loc", [null, [214, 2], [220, 4]]]], ["block", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [224, 8], [224, 37]]]]], [], 15, null, ["loc", [null, [224, 2], [228, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [230, 13], [230, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.formattedMessage", ["loc", [null, [232, 10], [232, 32]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [233, 14], [233, 43]]]], "error", ""], [], ["loc", [null, [233, 10], [233, 55]]]], "label", "Formatted message"], ["loc", [null, [229, 2], [235, 4]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15]
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/i-i-s-caseberry-logging-objects-application-log-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/i-i-s-caseberry-logging-objects-application-log-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-i-s-caseberry-logging-objects-application-log-l.caption"], [], ["loc", [null, [1, 4], [1, 75]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "i-i-s-caseberry-logging-objects-application-log", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [15, 20], [15, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [16, 16], [16, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [17, 17], [17, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [18, 23], [18, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [19, 17], [19, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "componentName", "IISLoggingObjectListView"], ["loc", [null, [3, 2], [23, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui message");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.index.greeting"], [], ["loc", [null, [3, 4], [3, 32]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/integration-examples/edit-form/readonly-mode", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 117,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/integration-examples/edit-form/readonly-mode.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui horizontal segments");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "ui header");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui segment");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "ui header");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n      readonly=");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "two fields");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("label");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(fragment, [4]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element3, [5]);
        var element7 = dom.childAt(element3, [7]);
        var element8 = dom.childAt(element3, [9]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element8, [3]);
        var element11 = dom.childAt(element3, [11]);
        var element12 = dom.childAt(element3, [13]);
        var element13 = dom.childAt(element3, [15]);
        var element14 = dom.childAt(element3, [17]);
        var morphs = new Array(27);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(element1, 5, 5);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[5] = dom.createMorphAt(element2, 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[7] = dom.createMorphAt(element4, 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[9] = dom.createMorphAt(element5, 3, 3);
        morphs[10] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[11] = dom.createMorphAt(element6, 3, 3);
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[15] = dom.createMorphAt(element9, 3, 3);
        morphs[16] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[17] = dom.createMorphAt(element10, 3, 3);
        morphs[18] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[19] = dom.createMorphAt(element11, 3, 3);
        morphs[20] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[21] = dom.createMorphAt(element12, 3, 3);
        morphs[22] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[23] = dom.createMorphAt(element13, 3, 3);
        morphs[24] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[25] = dom.createMorphAt(element14, 3, 3);
        morphs[26] = dom.createMorphAt(dom.childAt(element3, [19]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.caption"], [], ["loc", [null, [1, 22], [1, 88]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.readonly-flag-management-segment-caption"], [], ["loc", [null, [5, 8], [5, 107]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.readonly-flag-caption"], [], ["loc", [null, [7, 13], [7, 93]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "mut", [["get", "readonly", ["loc", [null, [8, 43], [8, 51]]]]], [], ["loc", [null, [8, 38], [8, 52]]]]], ["loc", [null, [8, 6], [8, 54]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.readonly-flag-value-segment-caption"], [], ["loc", [null, [12, 8], [12, 102]]]], ["inline", "to-string", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]]], [], ["loc", [null, [14, 15], [14, 37]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.flag-caption"], [], ["loc", [null, [19, 11], [19, 82]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [21, 12], [21, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [22, 15], [22, 23]]]]], [], []]], ["loc", [null, [20, 4], [23, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.number-caption"], [], ["loc", [null, [26, 11], [26, 84]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.number", ["loc", [null, [28, 12], [28, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [29, 15], [29, 23]]]]], [], []]], ["loc", [null, [27, 4], [30, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.text-caption"], [], ["loc", [null, [33, 11], [33, 82]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [35, 12], [35, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [36, 15], [36, 23]]]]], [], []]], ["loc", [null, [34, 4], [37, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.long-text-caption"], [], ["loc", [null, [40, 9], [40, 85]]]], ["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.longText", ["loc", [null, [42, 12], [42, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [43, 15], [43, 23]]]]], [], []]], ["loc", [null, [41, 4], [44, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.date-caption"], [], ["loc", [null, [48, 13], [48, 84]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [50, 14], [50, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [51, 17], [51, 25]]]]], [], []]], ["loc", [null, [49, 6], [52, 8]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.time-caption"], [], ["loc", [null, [55, 13], [55, 84]]]], ["inline", "flexberry-simpledatetime", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [57, 17], [57, 25]]]]], [], []], "type", "time", "value", ["subexpr", "@mut", [["get", "model.time", ["loc", [null, [59, 14], [59, 24]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [60, 17], [60, 25]]]]], [], []]], ["loc", [null, [56, 6], [61, 8]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.enumeration-caption"], [], ["loc", [null, [65, 11], [65, 89]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["integration-examples/edit-form/readonly-mode/enumeration"], [], ["loc", [null, [67, 12], [67, 87]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [68, 12], [68, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 15], [69, 23]]]]], [], []]], ["loc", [null, [66, 4], [70, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.file-caption"], [], ["loc", [null, [73, 11], [73, 82]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [75, 12], [75, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [76, 15], [76, 23]]]]], [], []]], ["loc", [null, [74, 4], [77, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.master-caption"], [], ["loc", [null, [80, 11], [80, 84]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.master", ["loc", [null, [82, 12], [82, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [83, 19], [83, 24]]]]], [], []], "relationName", "master", "projection", "MasterL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.readonly-mode.master-caption"], [], ["loc", [null, [87, 12], [87, 83]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [88, 13], [88, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [89, 13], [89, 41]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [90, 15], [90, 23]]]]], [], []]], ["loc", [null, [81, 4], [91, 6]]]], ["inline", "t", ["forms.integration-examples.edit-form.readonly-mode.master-dropdown-caption"], [], ["loc", [null, [94, 11], [94, 93]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.masterDropdown", ["loc", [null, [96, 12], [96, 32]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [97, 19], [97, 24]]]]], [], []], "relationName", "masterDropdown", "projection", "MasterDropdownL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.readonly-mode.master-dropdown-caption"], [], ["loc", [null, [101, 12], [101, 92]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [102, 13], [102, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [103, 13], [103, 41]]]], "dropdown", true, "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [105, 15], [105, 23]]]]], [], []]], ["loc", [null, [95, 4], [106, 6]]]], ["inline", "flexberry-groupedit", [], ["componentName", "aggregatorDetailsGroupedit", "content", ["subexpr", "@mut", [["get", "model.details", ["loc", [null, [111, 14], [111, 27]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.details", ["loc", [null, [112, 22], [112, 56]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [113, 15], [113, 23]]]]], [], []]], ["loc", [null, [109, 4], [114, 6]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/integration-examples/edit-form/validation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/integration-examples/edit-form/validation.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "inline fields");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(element0, [7]);
        var element4 = dom.childAt(element0, [9]);
        var element5 = dom.childAt(element0, [11]);
        var element6 = dom.childAt(element5, [3]);
        var element7 = dom.childAt(element0, [13]);
        var element8 = dom.childAt(element0, [15]);
        var element9 = dom.childAt(element0, [17]);
        var morphs = new Array(34);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 1, 1);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[4] = dom.createMorphAt(element1, 3, 3);
        morphs[5] = dom.createMorphAt(element1, 5, 5);
        morphs[6] = dom.createAttrMorph(element2, 'class');
        morphs[7] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[8] = dom.createMorphAt(element2, 3, 3);
        morphs[9] = dom.createMorphAt(element2, 5, 5);
        morphs[10] = dom.createAttrMorph(element3, 'class');
        morphs[11] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
        morphs[12] = dom.createMorphAt(element3, 3, 3);
        morphs[13] = dom.createMorphAt(element3, 5, 5);
        morphs[14] = dom.createAttrMorph(element4, 'class');
        morphs[15] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element4, 3, 3);
        morphs[17] = dom.createMorphAt(element4, 5, 5);
        morphs[18] = dom.createAttrMorph(element5, 'class');
        morphs[19] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element6, 1, 1);
        morphs[21] = dom.createMorphAt(element6, 3, 3);
        morphs[22] = dom.createAttrMorph(element7, 'class');
        morphs[23] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[24] = dom.createMorphAt(element7, 3, 3);
        morphs[25] = dom.createMorphAt(element7, 5, 5);
        morphs[26] = dom.createAttrMorph(element8, 'class');
        morphs[27] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[28] = dom.createMorphAt(element8, 3, 3);
        morphs[29] = dom.createMorphAt(element8, 5, 5);
        morphs[30] = dom.createAttrMorph(element9, 'class');
        morphs[31] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[32] = dom.createMorphAt(element9, 3, 3);
        morphs[33] = dom.createMorphAt(element9, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.integration-examples.edit-form.validation.caption"], [], ["loc", [null, [1, 22], [1, 85]]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [5, 43], [5, 55]]]]], [], []]], ["loc", [null, [5, 6], [5, 57]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.flag", ["loc", [null, [8, 25], [8, 42]]]], "error", ""], [], ["loc", [null, [8, 20], [8, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.flag-caption"], [], ["loc", [null, [9, 11], [9, 79]]]], ["inline", "flexberry-checkbox", [], ["value", ["subexpr", "@mut", [["get", "model.flag", ["loc", [null, [11, 12], [11, 22]]]]], [], []]], ["loc", [null, [10, 4], [12, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.flag", ["loc", [null, [13, 40], [13, 57]]]]], [], []], "pointing", "left pointing"], ["loc", [null, [13, 4], [13, 84]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.number", ["loc", [null, [15, 25], [15, 44]]]], "error", ""], [], ["loc", [null, [15, 20], [15, 57]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.number-caption"], [], ["loc", [null, [16, 11], [16, 81]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.number", ["loc", [null, [18, 12], [18, 24]]]]], [], []]], ["loc", [null, [17, 4], [19, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.number", ["loc", [null, [20, 40], [20, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [20, 4], [20, 81]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [22, 25], [22, 42]]]], "error", ""], [], ["loc", [null, [22, 20], [22, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.text-caption"], [], ["loc", [null, [23, 11], [23, 79]]]], ["inline", "flexberry-textbox", [], ["value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [25, 12], [25, 22]]]]], [], []]], ["loc", [null, [24, 4], [26, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [27, 40], [27, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [27, 4], [27, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.longText", ["loc", [null, [29, 25], [29, 46]]]], "error", ""], [], ["loc", [null, [29, 20], [29, 59]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.long-text-caption"], [], ["loc", [null, [30, 9], [30, 82]]]], ["inline", "flexberry-textarea", [], ["value", ["subexpr", "@mut", [["get", "model.longText", ["loc", [null, [32, 12], [32, 26]]]]], [], []]], ["loc", [null, [31, 4], [33, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.longText", ["loc", [null, [34, 40], [34, 61]]]]], [], []], "pointing", "pointing"], ["loc", [null, [34, 4], [34, 83]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [36, 25], [36, 42]]]], "error", ""], [], ["loc", [null, [36, 20], [36, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.date-caption"], [], ["loc", [null, [37, 11], [37, 79]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [39, 40], [39, 57]]]]], [], []], "pointing", "right pointing"], ["loc", [null, [39, 4], [39, 85]]]], ["inline", "flexberry-datepicker", [], ["value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [41, 12], [41, 22]]]]], [], []]], ["loc", [null, [40, 4], [42, 6]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.enumeration", ["loc", [null, [45, 25], [45, 49]]]], "error", ""], [], ["loc", [null, [45, 20], [45, 62]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.enumeration-caption"], [], ["loc", [null, [46, 11], [46, 86]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["integration-examples/edit-form/validation/enumeration"], [], ["loc", [null, [48, 12], [48, 84]]]], "value", ["subexpr", "@mut", [["get", "model.enumeration", ["loc", [null, [49, 12], [49, 29]]]]], [], []]], ["loc", [null, [47, 4], [50, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.enumeration", ["loc", [null, [51, 40], [51, 64]]]]], [], []], "pointing", "pointing"], ["loc", [null, [51, 4], [51, 86]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.file", ["loc", [null, [53, 25], [53, 42]]]], "error", ""], [], ["loc", [null, [53, 20], [53, 55]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.file-caption"], [], ["loc", [null, [54, 11], [54, 79]]]], ["inline", "flexberry-file", [], ["value", ["subexpr", "@mut", [["get", "model.file", ["loc", [null, [56, 12], [56, 22]]]]], [], []], "showUploadButton", false, "showDownloadButton", false], ["loc", [null, [55, 4], [59, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.file", ["loc", [null, [60, 40], [60, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [60, 4], [60, 79]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["get", "model.errors.master", ["loc", [null, [62, 25], [62, 44]]]], "error", ""], [], ["loc", [null, [62, 20], [62, 57]]]]]]], ["inline", "t", ["forms.integration-examples.edit-form.validation.master-caption"], [], ["loc", [null, [63, 11], [63, 81]]]], ["inline", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.master", ["loc", [null, [65, 12], [65, 24]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [66, 19], [66, 24]]]]], [], []], "relationName", "master", "projection", "MasterL", "displayAttributeName", "text", "title", ["subexpr", "t", ["forms.integration-examples.edit-form.validation.master-caption"], [], ["loc", [null, [70, 12], [70, 80]]]], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [71, 13], [71, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [72, 13], [72, 41]]]]], ["loc", [null, [64, 4], [73, 6]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.master", ["loc", [null, [74, 40], [74, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [74, 4], [74, 81]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.loading.spinner-caption"], [], ["loc", [null, [3, 4], [3, 41]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/log-service-examples/settings-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 76,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/log-service-examples/settings-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "ui celled table flexberry-word-break");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("th");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.enabled=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.enabled=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color:#db2828");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeErrorMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeErrorMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #f2711c;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeWarnMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeWarnMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #fbbd08;");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDeprecationMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDeprecationMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #21ba45;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeLogMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeLogMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #00b5ad;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeInfoMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeInfoMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        dom.setAttribute(el3, "style", "background-color: #2185d0;");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDebugMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("td");
        var el5 = dom.createTextNode("logService.storeDebugMessages=");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element2, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var morphs = new Array(18);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element4, [3]), 1, 1);
        morphs[7] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
        morphs[10] = dom.createMorphAt(dom.childAt(element6, [3]), 1, 1);
        morphs[11] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        morphs[13] = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
        morphs[14] = dom.createMorphAt(dom.childAt(element8, [3]), 1, 1);
        morphs[15] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
        morphs[16] = dom.createMorphAt(dom.childAt(element9, [3]), 1, 1);
        morphs[17] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.log-service-examples.settings-example.caption"], [], ["loc", [null, [1, 4], [1, 63]]]], ["inline", "t", ["forms.log-service-examples.settings-example.setting-column-header-caption"], [], ["loc", [null, [5, 10], [5, 91]]]], ["inline", "t", ["forms.log-service-examples.settings-example.settings-value-column-header-caption"], [], ["loc", [null, [6, 10], [6, 98]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.enabled", ["loc", [null, [11, 61], [11, 79]]]]], [], []]], ["loc", [null, [11, 29], [11, 81]]]], ["inline", "to-string", [["get", "logService.enabled", ["loc", [null, [12, 41], [12, 59]]]]], [], ["loc", [null, [12, 29], [12, 61]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeErrorMessages", ["loc", [null, [15, 70], [15, 99]]]]], [], []]], ["loc", [null, [15, 38], [15, 101]]]], ["inline", "to-string", [["get", "logService.storeErrorMessages", ["loc", [null, [16, 52], [16, 81]]]]], [], ["loc", [null, [16, 40], [16, 83]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeWarnMessages", ["loc", [null, [19, 71], [19, 99]]]]], [], []]], ["loc", [null, [19, 39], [19, 101]]]], ["inline", "to-string", [["get", "logService.storeWarnMessages", ["loc", [null, [20, 51], [20, 79]]]]], [], ["loc", [null, [20, 39], [20, 81]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeDeprecationMessages", ["loc", [null, [23, 76], [23, 111]]]]], [], []]], ["loc", [null, [23, 44], [23, 113]]]], ["inline", "to-string", [["get", "logService.storeDeprecationMessages", ["loc", [null, [24, 56], [24, 91]]]]], [], ["loc", [null, [24, 44], [24, 93]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeLogMessages", ["loc", [null, [27, 70], [27, 97]]]]], [], []]], ["loc", [null, [27, 38], [27, 99]]]], ["inline", "to-string", [["get", "logService.storeLogMessages", ["loc", [null, [28, 50], [28, 77]]]]], [], ["loc", [null, [28, 38], [28, 79]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeInfoMessages", ["loc", [null, [31, 71], [31, 99]]]]], [], []]], ["loc", [null, [31, 39], [31, 101]]]], ["inline", "to-string", [["get", "logService.storeInfoMessages", ["loc", [null, [32, 51], [32, 79]]]]], [], ["loc", [null, [32, 39], [32, 81]]]], ["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "logService.storeDebugMessages", ["loc", [null, [35, 72], [35, 101]]]]], [], []]], ["loc", [null, [35, 40], [35, 103]]]], ["inline", "to-string", [["get", "logService.storeDebugMessages", ["loc", [null, [36, 52], [36, 81]]]]], [], ["loc", [null, [36, 40], [36, 83]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [42, 12], [42, 17]]]]], [], []], "modelName", "i-i-s-caseberry-logging-objects-application-log", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [44, 20], [44, 35]]]]], [], []], "class", "flexberry-word-break", "createNewButton", false, "refreshButton", true, "colsConfigButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [49, 12], [49, 27]]]]], [], []], "orderable", true, "rowClickable", false, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [52, 10], [52, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [53, 17], [53, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [54, 18], [54, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [55, 20], [55, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [56, 16], [56, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [57, 17], [57, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [58, 23], [58, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [59, 17], [59, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [60, 13], [60, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [61, 13], [61, 32]]]], "customButtons", ["subexpr", "@mut", [["get", "objectListViewCustomButtons", ["loc", [null, [62, 18], [62, 45]]]]], [], []], "onThrowExceptionButtonClick", "onThrowExceptionButtonClick", "onRejectRsvpPromiseButtonClick", "onRejectRsvpPromiseButtonClick", "onEmberAssertButtonClick", "onEmberAssertButtonClick", "onEmberLoggerErrorButtonClick", "onEmberLoggerErrorButtonClick", "onEmberLoggerWarnButtonClick", "onEmberLoggerWarnButtonClick", "onEmberDeprecateButtonClick", "onEmberDeprecateButtonClick", "onEmberLoggerLogButtonClick", "onEmberLoggerLogButtonClick", "onEmberLoggerInfoButtonClick", "onEmberLoggerInfoButtonClick", "onEmberLoggerDebugButtonClick", "onEmberLoggerDebugButtonClick", "componentName", "FOLVSettingExample", "colsConfigButton", false], ["loc", [null, [41, 2], [74, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/lookup-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/lookup-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "lookup-list");
        dom.setAttribute(el1, "class", "list-group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["class", "ui bottom attached", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [4, 20], [4, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "currentLookupRow", ["loc", [null, [6, 19], [6, 35]]]]], [], []], "componentMode", "lookupform", "componentName", "flexberry-objectlistview-at-lookup", "showEditMenuItemInRow", false, "createNewButton", false, "showCheckBoxInRow", false, "colsConfigButton", false, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [15, 21], [15, 48]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [16, 15], [16, 21]]]]], [], []], "customProperties", ["subexpr", "@mut", [["get", "customPropertiesData", ["loc", [null, [18, 21], [18, 41]]]]], [], []], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [20, 10], [20, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [21, 17], [21, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [22, 18], [22, 31]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [23, 20], [23, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [24, 16], [24, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [25, 17], [25, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [26, 13], [26, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [27, 13], [27, 32]]]], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [29, 12], [29, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [31, 17], [31, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [32, 23], [32, 52]]]], "notUseUserSettings", true], ["loc", [null, [2, 2], [34, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("dummy/templates/lookup-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/lookup-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [8, 2], [8, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/lookup-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", ["subexpr", "@mut", [["get", "sizeClass", ["loc", [null, [3, 12], [3, 21]]]]], [], []], "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false], 0, null, ["loc", [null, [1, 0], [9, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "href", "https://github.com/flexberry");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("img");
          dom.setAttribute(el2, "class", "ui centered image");
          dom.setAttribute(el2, "src", "assets/images/flexberry-logo.png");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "item");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(fragment, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element2, 'title');
          morphs[1] = dom.createAttrMorph(element3, 'href');
          morphs[2] = dom.createAttrMorph(element3, 'title');
          morphs[3] = dom.createMorphAt(element3, 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-name.title"], [], ["loc", [null, [5, 11], [5, 67]]]]], ["attribute", "href", ["get", "addonVersionHref", ["loc", [null, [9, 12], [9, 28]]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-version.title"], [], ["loc", [null, [11, 11], [11, 70]]]]], ["inline", "t", ["forms.application.sitemap.application-version.caption"], ["version", ["subexpr", "@mut", [["get", "addonVersion", ["loc", [null, [12, 72], [12, 84]]]]], [], []]], ["loc", [null, [12, 4], [12, 86]]]], ["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [14, 21], [14, 28]]]]], [], ["loc", [null, [14, 2], [14, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 14
              },
              "end": {
                "line": 43,
                "column": 14
              }
            },
            "moduleName": "dummy/templates/mobile/application.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createTextNode("\n                  ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'value');
            morphs[1] = dom.createAttrMorph(element0, 'selected');
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "value", ["get", "locale", ["loc", [null, [40, 32], [40, 38]]]]], ["attribute", "selected", ["subexpr", "eq", [["subexpr", "get", [["get", "i18n", ["loc", [null, [40, 60], [40, 64]]]], "locale"], [], ["loc", [null, [40, 55], [40, 74]]]], ["get", "locale", ["loc", [null, [40, 75], [40, 81]]]]], [], ["loc", [null, [40, 50], [40, 83]]]]], ["content", "locale", ["loc", [null, [41, 18], [41, 28]]]]],
          locals: ["locale"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 10
            },
            "end": {
              "line": 45,
              "column": 10
            }
          },
          "moduleName": "dummy/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("select");
          dom.setAttribute(el1, "class", "ui dropdown");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onchange');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["subexpr", "get", [["get", "i18n", ["loc", [null, [38, 68], [38, 72]]]], "locale"], [], ["loc", [null, [38, 63], [38, 82]]]]], [], ["loc", [null, [38, 58], [38, 83]]]]], ["value", "target.value"], ["loc", [null, [38, 49], [38, 106]]]]], ["block", "each", [["get", "locales", ["loc", [null, [39, 22], [39, 29]]]]], [], 0, null, ["loc", [null, [39, 14], [43, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 10
            },
            "end": {
              "line": 52,
              "column": 10
            }
          },
          "moduleName": "dummy/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["class", "compact", "items", ["subexpr", "@mut", [["get", "locales", ["loc", [null, [48, 20], [48, 27]]]]], [], []], "value", ["subexpr", "@mut", [["get", "i18n.locale", ["loc", [null, [49, 20], [49, 31]]]]], [], []], "placeholder", ["subexpr", "t", ["forms.application.header.menu.language-dropdown.placeholder"], [], ["loc", [null, [50, 26], [50, 91]]]]], ["loc", [null, [46, 12], [51, 14]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example-mobile");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui top fixed inverted menu");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "launch icon item");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "sidebar icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "right menu");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "item");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "style", "margin-right: 5px;");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "item");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("label");
        dom.setAttribute(el6, "style", "margin-right: 5px;");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-content ui attached segment");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [1, 1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element7, [3]);
        var element10 = dom.childAt(element4, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element6);
        morphs[2] = dom.createMorphAt(dom.childAt(element8, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(element8, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
        morphs[5] = dom.createMorphAt(element9, 3, 3);
        morphs[6] = dom.createMorphAt(element10, 1, 1);
        morphs[7] = dom.createMorphAt(element10, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ui-sidebar", [], ["class", "inverted vertical menu"], 0, null, ["loc", [null, [1, 0], [15, 15]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [19, 9], [19, 35]]]], ["inline", "t", ["forms.application.header.menu.user-settings-service-checkbox.caption"], [], ["loc", [null, [25, 12], [25, 88]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "userSettingsService.isUserSettingsServiceEnabled", ["loc", [null, [29, 18], [29, 66]]]]], [], []]], ["loc", [null, [27, 10], [30, 12]]]], ["inline", "t", ["forms.application.header.menu.language-dropdown.caption"], [], ["loc", [null, [34, 12], [34, 75]]]], ["block", "if", [["get", "browserIsInternetExplorer", ["loc", [null, [37, 16], [37, 41]]]]], [], 1, 2, ["loc", [null, [37, 10], [52, 17]]]], ["content", "outlet", ["loc", [null, [57, 6], [57, 16]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [58, 6], [58, 24]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("dummy/templates/mobile/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 28,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "class", "flexberry-file-image-preview");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'src');
              morphs[1] = dom.createAttrMorph(element0, 'alt');
              return morphs;
            },
            statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [26, 20], [26, 47]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [27, 18], [27, 82]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui small image");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [22, 73], [22, 101]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [23, 20], [23, 48]]]]], [], 0, null, ["loc", [null, [23, 10], [28, 21]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [29, 30], [29, 58]]]], "active", ""], [], ["loc", [null, [29, 25], [29, 72]]]], " loader"]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flexberry-file-menu");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", "bottom left pointing", "items", ["subexpr", "@mut", [["get", "_menuItems", ["loc", [null, [15, 16], [15, 26]]]]], [], []], "callItemsOnClickCallbacks", false, "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [17, 22], [17, 48]]]], "collapseMenuOnItemClick", true], ["loc", [null, [13, 8], [19, 10]]]], ["block", "if", [["get", "showPreview", ["loc", [null, [21, 12], [21, 23]]]]], [], 0, null, ["loc", [null, [21, 6], [31, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-grid ui grid");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-file-error-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element4, 'id');
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createAttrMorph(element6, 'title');
        morphs[3] = dom.createAttrMorph(element6, 'for');
        morphs[4] = dom.createElementMorph(element6);
        morphs[5] = dom.createMorphAt(element6, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element7, [3, 1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element7, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 41], [2, 53]]]]], ["attribute", "class", ["concat", ["flexberry-file-add-button ui icon ", ["get", "buttonClass", ["loc", [null, [5, 49], [5, 60]]]], " ", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [5, 72], [5, 91]]]], "disabled"], [], ["loc", [null, [5, 63], [5, 104]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "_hasFile", ["loc", [null, [5, 114], [5, 122]]]], ["get", "readonly", ["loc", [null, [5, 123], [5, 131]]]]], [], ["loc", [null, [5, 110], [5, 132]]]], "hidden"], [], ["loc", [null, [5, 105], [5, 143]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [6, 12], [6, 62]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [7, 12], [7, 24]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [8, 6], [8, 65]]]], ["inline", "t", ["components.flexberry-file.add-button-caption"], [], ["loc", [null, [9, 4], [9, 56]]]], ["block", "if", [["get", "_hasFile", ["loc", [null, [11, 10], [11, 18]]]]], [], 0, null, ["loc", [null, [11, 4], [32, 11]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [40, 4], [40, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [44, 6], [44, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [51, 8], [51, 72]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/mobile/components/flexberry-lookup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 16], [3, 27]]]]], [], []], "class", "search", "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [6, 17], [6, 25]]]], "readonly"], [], ["loc", [null, [6, 13], [6, 37]]]], "needChecksOnValue", false, "isSearch", true], ["loc", [null, [2, 2], [9, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 10
                },
                "end": {
                  "line": 17,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [16, 12], [16, 21]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 10
                },
                "end": {
                  "line": 19,
                  "column": 10
                }
              },
              "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "displayValue", ["loc", [null, [18, 12], [18, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [15, 16], [15, 24]]]]], [], 0, 1, ["loc", [null, [15, 10], [19, 17]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "placeholder", ["loc", [null, [21, 10], [21, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 6
              },
              "end": {
                "line": 26,
                "column": 6
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "chevron right icon");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 4
              },
              "end": {
                "line": 32,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui icon ", ["get", "removeButtonClass", ["loc", [null, [29, 31], [29, 48]]]], " button"]]], ["element", "action", ["remove", ["get", "removeData", ["loc", [null, [29, 77], [29, 87]]]]], [], ["loc", [null, [29, 59], [29, 89]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui transparent icon input");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "lookup-field");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          morphs[3] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [12, 27], [12, 37]]]]], [], ["loc", [null, [12, 9], [12, 39]]]], ["block", "if", [["get", "value", ["loc", [null, [14, 14], [14, 19]]]]], [], 0, 1, ["loc", [null, [14, 8], [22, 15]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [24, 16], [24, 24]]]]], [], 2, null, ["loc", [null, [24, 6], [26, 17]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [28, 14], [28, 22]]]]], [], 3, null, ["loc", [null, [28, 4], [32, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/flexberry-lookup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "dropdown", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [34, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/mobile/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [8, 55], [8, 85]]]], "transparent"], [], ["loc", [null, [8, 46], [8, 101]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 18,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]], ["subexpr", "not", [["get", "record.config.canBeSelected", ["loc", [null, [14, 41], [14, 68]]]]], [], ["loc", [null, [14, 36], [14, 69]]]]], [], ["loc", [null, [14, 23], [14, 70]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [15, 31], [15, 40]]]], ["get", "record", ["loc", [null, [15, 41], [15, 47]]]]], [], ["loc", [null, [15, 23], [15, 48]]]]], ["loc", [null, [13, 12], [16, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "minus icon");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [21, 32], [21, 43]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [21, 55], [21, 63]]]], ["subexpr", "not", [["get", "record.config.canBeDeleted", ["loc", [null, [21, 69], [21, 95]]]]], [], ["loc", [null, [21, 64], [21, 96]]]]], [], ["loc", [null, [21, 51], [21, 97]]]], "disabled"], [], ["loc", [null, [21, 46], [21, 110]]]], " button"]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [21, 128], [21, 137]]]], ["get", "record", ["loc", [null, [21, 138], [21, 144]]]]], [], ["loc", [null, [21, 119], [21, 146]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element4, 1, 1);
          morphs[1] = dom.createMorphAt(element4, 2, 2);
          morphs[2] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [6, 14], [6, 31]]]]], [], 0, null, ["loc", [null, [6, 8], [10, 15]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [11, 14], [11, 31]]]]], [], 1, null, ["loc", [null, [11, 8], [18, 15]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [19, 14], [19, 35]]]]], [], 2, null, ["loc", [null, [19, 8], [25, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 6
            },
            "end": {
              "line": 41,
              "column": 6
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon mini ", ["get", "buttonClass", ["loc", [null, [38, 45], [38, 56]]]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [38, 60], [38, 93]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [39, 25], [39, 34]]]], "minus", "plus"], [], ["loc", [null, [39, 20], [39, 51]]]], " icon"]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 52,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "object-list-view-menu");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", "basic right pointing", "callItemsOnClickCallbacks", false, "configurateItems", ["subexpr", "action", [["get", "menuInRowConfigurateItems", ["loc", [null, [48, 33], [48, 58]]]], ["get", "record", ["loc", [null, [48, 59], [48, 65]]]]], [], ["loc", [null, [48, 25], [48, 66]]]], "onItemClick", ["subexpr", "action", [["get", "menuInRowItemClick", ["loc", [null, [49, 28], [49, 46]]]], ["get", "record", ["loc", [null, [49, 47], [49, 53]]]]], [], ["loc", [null, [49, 20], [49, 54]]]]], ["loc", [null, [45, 6], [50, 8]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 2
              },
              "end": {
                "line": 78,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [57, 13], [57, 19]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [58, 14], [58, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [59, 15], [59, 23]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [60, 15], [60, 23]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [61, 21], [61, 35]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [62, 23], [62, 39]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [63, 23], [63, 39]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [64, 24], [64, 41]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [65, 24], [65, 41]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [66, 28], [66, 49]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [67, 25], [67, 43]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [68, 32], [68, 57]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [69, 18], [69, 29]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [70, 15], [70, 23]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [71, 16], [71, 25]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [72, 16], [72, 25]]]]], [], []], "menuInRowItemClick", ["subexpr", "@mut", [["get", "menuInRowItemClick", ["loc", [null, [73, 25], [73, 43]]]]], [], []], "menuInRowConfigurateItems", ["subexpr", "@mut", [["get", "menuInRowConfigurateItems", ["loc", [null, [74, 32], [74, 57]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [75, 20], [75, 33]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [76, 25], [76, 44]]]]], [], []]], ["loc", [null, [56, 4], [77, 6]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 0
            },
            "end": {
              "line": 79,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "records", ["loc", [null, [55, 10], [55, 17]]]]], ["key", "key"], 0, null, ["loc", [null, [55, 2], [78, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "hidden");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element5, 'class');
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element6, 3, 3);
        morphs[4] = dom.createAttrMorph(element7, 'style');
        morphs[5] = dom.createElementMorph(element7);
        morphs[6] = dom.createMorphAt(element7, 1, 1);
        morphs[7] = dom.createMorphAt(element7, 3, 3);
        morphs[8] = dom.createMorphAt(element5, 5, 5);
        morphs[9] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "record.config.customClass", ["loc", [null, [1, 13], [1, 38]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [2, 53], [2, 69]]]], "hidden"], [], ["loc", [null, [2, 44], [2, 80]]]]]]], ["content", "record.key", ["loc", [null, [3, 24], [3, 38]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [4, 10], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [27, 11]]]], ["attribute", "style", ["concat", ["padding-left:", ["get", "hierarchicalIndent", ["loc", [null, [29, 78], [29, 96]]]], "px;"]]], ["element", "action", [["get", "rowClick", ["loc", [null, [29, 17], [29, 25]]]], ["get", "record", ["loc", [null, [29, 26], [29, 32]]]]], ["preventDefault", false], ["loc", [null, [29, 8], [29, 55]]]], ["inline", "component", [["get", "singleColumnCellComponent.componentName", ["loc", [null, [30, 18], [30, 57]]]]], ["model", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [31, 14], [31, 25]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [32, 16], [32, 23]]]]], [], []], "hasEditableValues", ["subexpr", "@mut", [["get", "hasEditableValues", ["loc", [null, [33, 26], [33, 43]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "singleColumnCellComponent.componentProperties", ["loc", [null, [34, 26], [34, 71]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [35, 17], [35, 25]]]]], [], []]], ["loc", [null, [30, 6], [36, 8]]]], ["block", "if", [["get", "hasRecords", ["loc", [null, [37, 12], [37, 22]]]]], [], 1, null, ["loc", [null, [37, 6], [41, 13]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [43, 8], [43, 22]]]]], [], 2, null, ["loc", [null, [43, 2], [52, 9]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [54, 11], [54, 20]]]], ["get", "inHierarchicalMode", ["loc", [null, [54, 21], [54, 39]]]]], [], ["loc", [null, [54, 6], [54, 40]]]]], [], 3, null, ["loc", [null, [54, 0], [79, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("dummy/templates/mobile/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [3, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [2, 10], [2, 23]]]]], [], 0, null, ["loc", [null, [2, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
            dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 2
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("thead");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          dom.setAttribute(el3, "data-olv-header-property-name", "OlvRowToolbar");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1, 1]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createMorphAt(element4, 3, 3);
          morphs[2] = dom.createMorphAt(element4, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["object-list-view-operations collapsing ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [16, 67], [16, 83]]]], "hidden"], [], ["loc", [null, [16, 58], [16, 94]]]]]]], ["inline", "component", [["get", "headerCellComponent.componentName", ["loc", [null, [17, 22], [17, 55]]]]], ["column", ["subexpr", "hash", [], ["header", ["get", "singleColumnHeaderTitle", ["loc", [null, [18, 32], [18, 55]]]], "sortable", false], ["loc", [null, [18, 19], [18, 71]]]], "dynamicProperties", ["subexpr", "@mut", [["get", "headerCellComponent.componentProperties", ["loc", [null, [19, 30], [19, 69]]]]], [], []]], ["loc", [null, [17, 10], [20, 12]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [21, 14], [21, 28]]]]], [], 0, null, ["loc", [null, [21, 8], [23, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 14
                },
                "end": {
                  "line": 45,
                  "column": 14
                }
              },
              "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", ["flexberry-dropdown"], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [39, 24], [39, 47]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [40, 24], [40, 48]]]]], [], []], "class", "compact fluid", "placeholder", "", "needChecksOnValue", false], ["loc", [null, [38, 16], [44, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 14
                },
                "end": {
                  "line": 51,
                  "column": 14
                }
              },
              "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [47, 28], [47, 56]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [48, 24], [48, 45]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [49, 36], [49, 70]]]]], [], []]], ["loc", [null, [47, 16], [50, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 10
              },
              "end": {
                "line": 53,
                "column": 10
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "inline fields");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(":");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element1, 3, 3);
            morphs[2] = dom.createMorphAt(element1, 4, 4);
            return morphs;
          },
          statements: [["content", "column.header", ["loc", [null, [36, 21], [36, 38]]]], ["block", "if", [["get", "column.filter.conditions", ["loc", [null, [37, 20], [37, 44]]]]], [], 0, null, ["loc", [null, [37, 14], [45, 21]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [46, 20], [46, 48]]]]], [], 1, null, ["loc", [null, [46, 14], [51, 21]]]]],
          locals: ["column"],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 8
              },
              "end": {
                "line": 57,
                "column": 8
              }
            },
            "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "class", "object-list-view-menu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "object-list-view-helper-column-cell");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(element2, 5, 5);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [30, 59], [30, 75]]]], "hidden"], [], ["loc", [null, [30, 50], [30, 86]]]]]]], ["block", "each", [["get", "columns", ["loc", [null, [34, 18], [34, 25]]]]], [], 0, null, ["loc", [null, [34, 10], [53, 19]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [55, 14], [55, 28]]]]], [], 1, null, ["loc", [null, [55, 8], [57, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'colspan');
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [62, 23], [62, 30]]]]]]], ["content", "placeholder", ["loc", [null, [62, 61], [62, 76]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 4
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [67, 15], [67, 21]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [68, 16], [68, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [69, 17], [69, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [70, 17], [70, 25]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [71, 23], [71, 37]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [72, 25], [72, 41]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [73, 25], [73, 41]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [74, 26], [74, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [75, 26], [75, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [76, 30], [76, 51]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [77, 27], [77, 45]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [78, 27], [78, 45]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [79, 34], [79, 59]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [80, 20], [80, 31]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [81, 17], [81, 36]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [82, 18], [82, 38]]]], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [83, 18], [83, 38]]]], "menuInRowItemClick", ["subexpr", "action", ["menuInRowItemClick"], [], ["loc", [null, [84, 27], [84, 56]]]], "menuInRowConfigurateItems", ["subexpr", "action", ["menuInRowConfigurateItems"], [], ["loc", [null, [85, 34], [85, 70]]]]], ["loc", [null, [66, 6], [86, 8]]]]],
        locals: ["record"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [1]);
        var element7 = dom.childAt(element6, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createMorphAt(element6, 1, 1);
        morphs[3] = dom.createMorphAt(element7, 1, 1);
        morphs[4] = dom.createMorphAt(element7, 2, 2);
        morphs[5] = dom.createMorphAt(element7, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [12, 58], [12, 66]]]], "readonly"], [], ["loc", [null, [12, 53], [12, 79]]]], " ", ["get", "tableClass", ["loc", [null, [12, 82], [12, 92]]]], " table"]]], ["block", "if", [["get", "singleColumnHeaderTitle", ["loc", [null, [13, 8], [13, 31]]]]], [], 1, null, ["loc", [null, [13, 2], [26, 9]]]], ["block", "if", [["get", "showFilters", ["loc", [null, [28, 10], [28, 21]]]]], [], 2, null, ["loc", [null, [28, 4], [59, 11]]]], ["block", "unless", [["get", "hasContent", ["loc", [null, [60, 14], [60, 24]]]]], [], 3, null, ["loc", [null, [60, 4], [64, 15]]]], ["block", "each", [["get", "contentWithKeys", ["loc", [null, [65, 12], [65, 27]]]]], ["key", "key"], 4, null, ["loc", [null, [65, 4], [87, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("dummy/templates/mobile/components-examples/flexberry-lookup/lookup-block-form-example", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "dummy/templates/mobile/components-examples/flexberry-lookup/lookup-block-form-example.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["content", "model.editor1.name", ["loc", [null, [15, 6], [15, 28]]]], ["content", "model.editor1.eMail", ["loc", [null, [16, 6], [16, 29]]]], ["content", "model.editor1.gender", ["loc", [null, [17, 6], [17, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/mobile/components-examples/flexberry-lookup/lookup-block-form-example.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.components-examples.flexberry-lookup.lookup-block-form-example.caption"], [], ["loc", [null, [1, 22], [1, 106]]]], ["inline", "t", ["forms.ember-flexberry-dummy-suggestion-edit.editor1-caption"], [], ["loc", [null, [4, 11], [4, 78]]]], ["block", "flexberry-lookup", [], ["value", ["subexpr", "@mut", [["get", "model.editor1", ["loc", [null, [6, 12], [6, 25]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 19], [7, 24]]]]], [], []], "relationName", "editor1", "projection", "ApplicationUserL", "displayAttributeName", "Name", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 15], [11, 23]]]]], [], []], "choose", ["subexpr", "action", ["showLookupDialog"], [], ["loc", [null, [12, 13], [12, 40]]]], "remove", ["subexpr", "action", ["removeLookupValue"], [], ["loc", [null, [13, 13], [13, 41]]]]], 0, null, ["loc", [null, [5, 4], [18, 25]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.editor1", ["loc", [null, [19, 40], [19, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [19, 4], [19, 82]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/sitemap-node-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "dummy/templates/sitemap-node-content.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "render", ["sitemap-node", ["get", "child", ["loc", [null, [5, 30], [5, 35]]]]], [], ["loc", [null, [5, 6], [5, 37]]]]],
          locals: ["child"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "model.children", ["loc", [null, [4, 12], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 7
          }
        },
        "moduleName": "dummy/templates/sitemap-node-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "model.caption", ["loc", [null, [1, 0], [1, 17]]]], ["block", "if", [["get", "model.children.length", ["loc", [null, [2, 6], [2, 27]]]]], [], 0, null, ["loc", [null, [2, 0], [8, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("dummy/templates/sitemap-node", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "dummy/templates/sitemap-node.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [3, 4], [3, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "model.link", ["loc", [null, [2, 13], [2, 23]]]]], ["class", "item", "title", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [2, 43], [2, 54]]]]], [], []], "invokeAction", ["subexpr", "action", ["hideSidebar"], [], ["loc", [null, [2, 68], [2, 90]]]]], 0, null, ["loc", [null, [2, 2], [4, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "title", ["get", "model.title", ["loc", [null, [6, 28], [6, 39]]]]], ["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [7, 4], [7, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/sitemap-node.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.link", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("dummy/templates/sitemap", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "dummy/templates/sitemap.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("	");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap-node", ["get", "node", ["loc", [null, [2, 25], [2, 29]]]]], [], ["loc", [null, [2, 1], [2, 31]]]]],
        locals: ["node"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "dummy/templates/sitemap.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "model.nodes", ["loc", [null, [1, 8], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('dummy/transforms/components-examples/flexberry-dropdown/conditional-render-example/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/components-examples/flexberry-dropdown/conditional-render-example/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsComponentsExamplesFlexberryDropdownConditionalRenderExampleEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsComponentsExamplesFlexberryDropdownConditionalRenderExampleEnumeration['default']
  });
});
define('dummy/transforms/components-examples/flexberry-dropdown/settings-example/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/components-examples/flexberry-dropdown/settings-example/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsComponentsExamplesFlexberryDropdownSettingsExampleEnumeration['default']
  });
});
define('dummy/transforms/components-examples/flexberry-groupedit/shared/detail-enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/components-examples/flexberry-groupedit/shared/detail-enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsComponentsExamplesFlexberryGroupeditSharedDetailEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsComponentsExamplesFlexberryGroupeditSharedDetailEnumeration['default']
  });
});
define('dummy/transforms/decimal', ['exports', 'ember-flexberry-data/transforms/decimal'], function (exports, _emberFlexberryDataTransformsDecimal) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsDecimal['default'];
    }
  });
});
define('dummy/transforms/ember-flexberry-dummy-gender', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/ember-flexberry-dummy-gender'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsEmberFlexberryDummyGender) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsEmberFlexberryDummyGender['default']
  });
});
define('dummy/transforms/ember-flexberry-dummy-vote-type', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/ember-flexberry-dummy-vote-type'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsEmberFlexberryDummyVoteType) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsEmberFlexberryDummyVoteType['default']
  });
});
define('dummy/transforms/file', ['exports', 'ember-flexberry-data/transforms/file'], function (exports, _emberFlexberryDataTransformsFile) {
  exports['default'] = _emberFlexberryDataTransformsFile['default'];
});
define('dummy/transforms/flexberry-enum', ['exports', 'ember-flexberry-data/transforms/flexberry-enum'], function (exports, _emberFlexberryDataTransformsFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsFlexberryEnum['default'];
    }
  });
});
define('dummy/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('dummy/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('dummy/transforms/integration-examples/edit-form/readonly-mode/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/integration-examples/edit-form/readonly-mode/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsIntegrationExamplesEditFormReadonlyModeEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsIntegrationExamplesEditFormReadonlyModeEnumeration['default']
  });
});
define('dummy/transforms/integration-examples/edit-form/validation/enumeration', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'dummy/enums/integration-examples/edit-form/validation/enumeration'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _dummyEnumsIntegrationExamplesEditFormValidationEnumeration) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _dummyEnumsIntegrationExamplesEditFormValidationEnumeration['default']
  });
});
define('dummy/utils/i18n/compile-template', ['exports', 'ember-i18n/utils/i18n/compile-template'], function (exports, _emberI18nUtilsI18nCompileTemplate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nCompileTemplate['default'];
    }
  });
});
define('dummy/utils/i18n/missing-message', ['exports', 'ember-i18n/utils/i18n/missing-message'], function (exports, _emberI18nUtilsI18nMissingMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nMissingMessage['default'];
    }
  });
});
define('dummy/validators/local/datetime', ['exports', 'ember-flexberry/validators/local/datetime'], function (exports, _emberFlexberryValidatorsLocalDatetime) {
  exports['default'] = _emberFlexberryValidatorsLocalDatetime['default'];
});
define('dummy/views/application', ['exports', 'ember'], function (exports, _ember) {

  /**
    Override wrapper tag name to disable wrapper.
  
    The sidebar, as per Semantic-UI's documentation,
    need to be directly below the body element.
   */
  exports['default'] = _ember['default'].Component.extend({
    tagName: ''
  });
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("dummy/app")["default"].create({"name":"dummy","backendUrl":"https://flexberry-ember-dummy.azurewebsites.net","backendUrls":{"root":"https://flexberry-ember-dummy.azurewebsites.net","api":"https://flexberry-ember-dummy.azurewebsites.net/odata"},"log":{"enabled":true,"storeErrorMessages":true},"useUserSettingsService":true,"components":{"flexberryFile":{"uploadUrl":"https://flexberry-ember-dummy.azurewebsites.net/api/File","maxUploadFileSize":null,"uploadOnModelPreSave":true,"showUploadButton":true,"showModalDialogOnUploadError":true,"showModalDialogOnDownloadError":true}},"version":"0.5.0-beta.2+98755edd"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map